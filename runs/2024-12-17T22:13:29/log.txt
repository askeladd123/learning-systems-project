creating new run in runs/2024-12-17T22:13:29
reporting parameters in runs/2024-12-17T22:13:29/params.toml, values:
{'epochs': 150, 'number_of_clauses': 200, 't': 800, 's': 1.0232100506710238, 'depth': 3, 'hypervector_size': 512, 'hypervector_bits': 4, 'message_size': 512, 'message_bits': 2, 'double_hashing': False, 'max_included_literals': 16}
loading dataset from /home/ask/skole-learning-systems/attempt1/data/5x5_medium.csv
hashing dataset
saving dataset report to runs/2024-12-17T22:13:29/dataset.toml, content:
{'filename': '/home/ask/skole-learning-systems/attempt1/data/5x5_medium.csv', 'hash-blake2b': 'b0b36b8a6b032c3e372a41e962df4fc44512f185a20c006de08d02a1424c632e3f49b93ea8f40fdfbc47cdbb7be4d82c0fd10dd7be083b595841b024e043130b', 'dimensions': 5, 'rows': 10000}
X_train shape: (9000,)
X_test shape: (1000,)
Creating training data
bytecode dump:
>          0	NOP(arg=None, lineno=72)
           2	RESUME(arg=0, lineno=72)
           4	LOAD_GLOBAL(arg=1, lineno=75)
          14	LOAD_FAST(arg=1, lineno=75)
          16	LOAD_ATTR(arg=2, lineno=75)
          36	LOAD_CONST(arg=1, lineno=75)
          38	BINARY_SUBSCR(arg=None, lineno=75)
          42	CALL(arg=1, lineno=75)
          50	GET_ITER(arg=None, lineno=75)
>         52	FOR_ITER(arg=50, lineno=75)
          56	STORE_FAST(arg=2, lineno=75)
          58	LOAD_GLOBAL(arg=1, lineno=76)
          68	LOAD_FAST(arg=0, lineno=76)
          70	LOAD_FAST(arg=0, lineno=76)
          72	LOAD_CONST(arg=2, lineno=76)
          74	BINARY_OP(arg=5, lineno=76)
          78	CALL(arg=2, lineno=76)
          86	GET_ITER(arg=None, lineno=76)
>         88	FOR_ITER(arg=30, lineno=76)
          92	STORE_FAST(arg=3, lineno=76)
          94	LOAD_FAST(arg=3, lineno=77)
          96	LOAD_CONST(arg=3, lineno=77)
          98	BINARY_OP(arg=2, lineno=77)
         102	STORE_FAST(arg=4, lineno=77)
         104	LOAD_FAST(arg=3, lineno=78)
         106	LOAD_CONST(arg=3, lineno=78)
         108	BINARY_OP(arg=6, lineno=78)
         112	STORE_FAST(arg=5, lineno=78)
         114	LOAD_FAST(arg=1, lineno=79)
         116	LOAD_FAST(arg=2, lineno=79)
         118	LOAD_FAST(arg=4, lineno=79)
         120	BUILD_TUPLE(arg=2, lineno=79)
         122	COPY(arg=2, lineno=79)
         124	COPY(arg=2, lineno=79)
         126	BINARY_SUBSCR(arg=None, lineno=79)
         130	LOAD_CONST(arg=4, lineno=79)
         132	LOAD_FAST(arg=5, lineno=79)
         134	BINARY_OP(arg=3, lineno=79)
         138	BINARY_OP(arg=20, lineno=79)
         142	SWAP(arg=3, lineno=79)
         144	SWAP(arg=2, lineno=79)
         146	STORE_SUBSCR(arg=None, lineno=79)
         150	JUMP_BACKWARD(arg=32, lineno=79)
>        152	END_FOR(arg=None, lineno=76)
         154	JUMP_BACKWARD(arg=52, lineno=76)
>        156	END_FOR(arg=None, lineno=75)
         158	RETURN_CONST(arg=0, lineno=75)
pending: deque([State(pc_initial=0 nstack_initial=0)])
stack: []
state.pc_initial: State(pc_initial=0 nstack_initial=0)
dispatch pc=0, inst=NOP(arg=None, lineno=72)
stack []
dispatch pc=2, inst=RESUME(arg=0, lineno=72)
stack []
dispatch pc=4, inst=LOAD_GLOBAL(arg=1, lineno=75)
stack []
dispatch pc=14, inst=LOAD_FAST(arg=1, lineno=75)
stack ['$null$4.1', '$4load_global.0']
dispatch pc=16, inst=LOAD_ATTR(arg=2, lineno=75)
stack ['$null$4.1', '$4load_global.0', '$X14.2']
dispatch pc=36, inst=LOAD_CONST(arg=1, lineno=75)
stack ['$null$4.1', '$4load_global.0', '$16load_attr.3']
dispatch pc=38, inst=BINARY_SUBSCR(arg=None, lineno=75)
stack ['$null$4.1', '$4load_global.0', '$16load_attr.3', '$const36.4']
dispatch pc=42, inst=CALL(arg=1, lineno=75)
stack ['$null$4.1', '$4load_global.0', '$38binary_subscr.5']
dispatch pc=50, inst=GET_ITER(arg=None, lineno=75)
stack ['$42call.6']
end state. edges=[Edge(pc=52, stack=('$50get_iter.7',), blockstack=(), npush=0)]
pending: deque([State(pc_initial=52 nstack_initial=1)])
stack: ['$phi52.0']
state.pc_initial: State(pc_initial=52 nstack_initial=1)
dispatch pc=52, inst=FOR_ITER(arg=50, lineno=75)
stack ['$phi52.0']
end state. edges=[Edge(pc=156, stack=('$phi52.0', '$52for_iter.2'), blockstack=(), npush=0), Edge(pc=56, stack=('$phi52.0', '$52for_iter.2'), blockstack=(), npush=0)]
pending: deque([State(pc_initial=156 nstack_initial=2), State(pc_initial=56 nstack_initial=2)])
stack: ['$phi156.0', '$phi156.1']
state.pc_initial: State(pc_initial=156 nstack_initial=2)
dispatch pc=156, inst=END_FOR(arg=None, lineno=75)
stack ['$phi156.0', '$phi156.1']
dispatch pc=158, inst=RETURN_CONST(arg=0, lineno=75)
stack []
end state. edges=[]
pending: deque([State(pc_initial=56 nstack_initial=2)])
stack: ['$phi56.0', '$phi56.1']
state.pc_initial: State(pc_initial=56 nstack_initial=2)
dispatch pc=56, inst=STORE_FAST(arg=2, lineno=75)
stack ['$phi56.0', '$phi56.1']
dispatch pc=58, inst=LOAD_GLOBAL(arg=1, lineno=76)
stack ['$phi56.0']
dispatch pc=68, inst=LOAD_FAST(arg=0, lineno=76)
stack ['$phi56.0', '$null$58.3', '$58load_global.2']
dispatch pc=70, inst=LOAD_FAST(arg=0, lineno=76)
stack ['$phi56.0', '$null$58.3', '$58load_global.2', '$hypervector_size68.4']
dispatch pc=72, inst=LOAD_CONST(arg=2, lineno=76)
stack ['$phi56.0', '$null$58.3', '$58load_global.2', '$hypervector_size68.4', '$hypervector_size70.5']
dispatch pc=74, inst=BINARY_OP(arg=5, lineno=76)
stack ['$phi56.0', '$null$58.3', '$58load_global.2', '$hypervector_size68.4', '$hypervector_size70.5', '$const72.6']
dispatch pc=78, inst=CALL(arg=2, lineno=76)
stack ['$phi56.0', '$null$58.3', '$58load_global.2', '$hypervector_size68.4', '$binop_mul74.7']
dispatch pc=86, inst=GET_ITER(arg=None, lineno=76)
stack ['$phi56.0', '$78call.8']
end state. edges=[Edge(pc=88, stack=('$phi56.0', '$86get_iter.9'), blockstack=(), npush=0)]
pending: deque([State(pc_initial=88 nstack_initial=2)])
stack: ['$phi88.0', '$phi88.1']
state.pc_initial: State(pc_initial=88 nstack_initial=2)
dispatch pc=88, inst=FOR_ITER(arg=30, lineno=76)
stack ['$phi88.0', '$phi88.1']
end state. edges=[Edge(pc=152, stack=('$phi88.0', '$phi88.1', '$88for_iter.3'), blockstack=(), npush=0), Edge(pc=92, stack=('$phi88.0', '$phi88.1', '$88for_iter.3'), blockstack=(), npush=0)]
pending: deque([State(pc_initial=152 nstack_initial=3), State(pc_initial=92 nstack_initial=3)])
stack: ['$phi152.0', '$phi152.1', '$phi152.2']
state.pc_initial: State(pc_initial=152 nstack_initial=3)
dispatch pc=152, inst=END_FOR(arg=None, lineno=76)
stack ['$phi152.0', '$phi152.1', '$phi152.2']
dispatch pc=154, inst=JUMP_BACKWARD(arg=52, lineno=76)
stack ['$phi152.0']
end state. edges=[Edge(pc=52, stack=('$phi152.0',), blockstack=(), npush=0)]
pending: deque([State(pc_initial=92 nstack_initial=3), State(pc_initial=52 nstack_initial=1)])
stack: ['$phi92.0', '$phi92.1', '$phi92.2']
state.pc_initial: State(pc_initial=92 nstack_initial=3)
dispatch pc=92, inst=STORE_FAST(arg=3, lineno=76)
stack ['$phi92.0', '$phi92.1', '$phi92.2']
dispatch pc=94, inst=LOAD_FAST(arg=3, lineno=77)
stack ['$phi92.0', '$phi92.1']
dispatch pc=96, inst=LOAD_CONST(arg=3, lineno=77)
stack ['$phi92.0', '$phi92.1', '$k94.3']
dispatch pc=98, inst=BINARY_OP(arg=2, lineno=77)
stack ['$phi92.0', '$phi92.1', '$k94.3', '$const96.4']
dispatch pc=102, inst=STORE_FAST(arg=4, lineno=77)
stack ['$phi92.0', '$phi92.1', '$binop_floordiv98.5']
dispatch pc=104, inst=LOAD_FAST(arg=3, lineno=78)
stack ['$phi92.0', '$phi92.1']
dispatch pc=106, inst=LOAD_CONST(arg=3, lineno=78)
stack ['$phi92.0', '$phi92.1', '$k104.6']
dispatch pc=108, inst=BINARY_OP(arg=6, lineno=78)
stack ['$phi92.0', '$phi92.1', '$k104.6', '$const106.7']
dispatch pc=112, inst=STORE_FAST(arg=5, lineno=78)
stack ['$phi92.0', '$phi92.1', '$binop_mod108.8']
dispatch pc=114, inst=LOAD_FAST(arg=1, lineno=79)
stack ['$phi92.0', '$phi92.1']
dispatch pc=116, inst=LOAD_FAST(arg=2, lineno=79)
stack ['$phi92.0', '$phi92.1', '$X114.9']
dispatch pc=118, inst=LOAD_FAST(arg=4, lineno=79)
stack ['$phi92.0', '$phi92.1', '$X114.9', '$i116.10']
dispatch pc=120, inst=BUILD_TUPLE(arg=2, lineno=79)
stack ['$phi92.0', '$phi92.1', '$X114.9', '$i116.10', '$chunk118.11']
dispatch pc=122, inst=COPY(arg=2, lineno=79)
stack ['$phi92.0', '$phi92.1', '$X114.9', '$120build_tuple.12']
dispatch pc=124, inst=COPY(arg=2, lineno=79)
stack ['$phi92.0', '$phi92.1', '$X114.9', '$120build_tuple.12', '$X114.9']
dispatch pc=126, inst=BINARY_SUBSCR(arg=None, lineno=79)
stack ['$phi92.0', '$phi92.1', '$X114.9', '$120build_tuple.12', '$X114.9', '$120build_tuple.12']
dispatch pc=130, inst=LOAD_CONST(arg=4, lineno=79)
stack ['$phi92.0', '$phi92.1', '$X114.9', '$120build_tuple.12', '$126binary_subscr.13']
dispatch pc=132, inst=LOAD_FAST(arg=5, lineno=79)
stack ['$phi92.0', '$phi92.1', '$X114.9', '$120build_tuple.12', '$126binary_subscr.13', '$const130.14']
dispatch pc=134, inst=BINARY_OP(arg=3, lineno=79)
stack ['$phi92.0', '$phi92.1', '$X114.9', '$120build_tuple.12', '$126binary_subscr.13', '$const130.14', '$pos132.15']
dispatch pc=138, inst=BINARY_OP(arg=20, lineno=79)
stack ['$phi92.0', '$phi92.1', '$X114.9', '$120build_tuple.12', '$126binary_subscr.13', '$binop_lshift134.16']
dispatch pc=142, inst=SWAP(arg=3, lineno=79)
stack ['$phi92.0', '$phi92.1', '$X114.9', '$120build_tuple.12', '$binop_ior138.17']
dispatch pc=144, inst=SWAP(arg=2, lineno=79)
stack ['$phi92.0', '$phi92.1', '$binop_ior138.17', '$120build_tuple.12', '$X114.9']
dispatch pc=146, inst=STORE_SUBSCR(arg=None, lineno=79)
stack ['$phi92.0', '$phi92.1', '$binop_ior138.17', '$X114.9', '$120build_tuple.12']
dispatch pc=150, inst=JUMP_BACKWARD(arg=32, lineno=79)
stack ['$phi92.0', '$phi92.1']
end state. edges=[Edge(pc=88, stack=('$phi92.0', '$phi92.1'), blockstack=(), npush=0)]
pending: deque([State(pc_initial=52 nstack_initial=1), State(pc_initial=88 nstack_initial=2)])
pending: deque([State(pc_initial=88 nstack_initial=2)])
-------------------------Prune PHIs-------------------------
Used_phis: defaultdict(<class 'set'>,
            {State(pc_initial=0 nstack_initial=0): set(),
             State(pc_initial=52 nstack_initial=1): {'$phi52.0'},
             State(pc_initial=56 nstack_initial=2): {'$phi56.1'},
             State(pc_initial=88 nstack_initial=2): {'$phi88.1'},
             State(pc_initial=92 nstack_initial=3): {'$phi92.2'},
             State(pc_initial=152 nstack_initial=3): set(),
             State(pc_initial=156 nstack_initial=2): set()})
defmap: {'$phi152.2': State(pc_initial=88 nstack_initial=2),
 '$phi156.1': State(pc_initial=52 nstack_initial=1),
 '$phi52.0': State(pc_initial=0 nstack_initial=0),
 '$phi56.1': State(pc_initial=52 nstack_initial=1),
 '$phi88.1': State(pc_initial=56 nstack_initial=2),
 '$phi92.2': State(pc_initial=88 nstack_initial=2)}
phismap: defaultdict(<class 'set'>,
            {'$phi152.0': {('$phi88.0', State(pc_initial=88 nstack_initial=2))},
             '$phi152.1': {('$phi88.1', State(pc_initial=88 nstack_initial=2))},
             '$phi152.2': {('$88for_iter.3',
                            State(pc_initial=88 nstack_initial=2))},
             '$phi156.0': {('$phi52.0', State(pc_initial=52 nstack_initial=1))},
             '$phi156.1': {('$52for_iter.2',
                            State(pc_initial=52 nstack_initial=1))},
             '$phi52.0': {('$50get_iter.7',
                           State(pc_initial=0 nstack_initial=0)),
                          ('$phi152.0',
                           State(pc_initial=152 nstack_initial=3))},
             '$phi56.0': {('$phi52.0', State(pc_initial=52 nstack_initial=1))},
             '$phi56.1': {('$52for_iter.2',
                           State(pc_initial=52 nstack_initial=1))},
             '$phi88.0': {('$phi56.0', State(pc_initial=56 nstack_initial=2)),
                          ('$phi92.0', State(pc_initial=92 nstack_initial=3))},
             '$phi88.1': {('$86get_iter.9',
                           State(pc_initial=56 nstack_initial=2)),
                          ('$phi92.1', State(pc_initial=92 nstack_initial=3))},
             '$phi92.0': {('$phi88.0', State(pc_initial=88 nstack_initial=2))},
             '$phi92.1': {('$phi88.1', State(pc_initial=88 nstack_initial=2))},
             '$phi92.2': {('$88for_iter.3',
                           State(pc_initial=88 nstack_initial=2))}})
changing phismap: defaultdict(<class 'set'>,
            {'$phi152.0': {('$phi56.0', State(pc_initial=56 nstack_initial=2)),
                           ('$phi92.0', State(pc_initial=92 nstack_initial=3))},
             '$phi152.1': {('$86get_iter.9',
                            State(pc_initial=56 nstack_initial=2)),
                           ('$phi92.1', State(pc_initial=92 nstack_initial=3))},
             '$phi152.2': {('$88for_iter.3',
                            State(pc_initial=88 nstack_initial=2))},
             '$phi156.0': {('$50get_iter.7',
                            State(pc_initial=0 nstack_initial=0)),
                           ('$phi152.0',
                            State(pc_initial=152 nstack_initial=3))},
             '$phi156.1': {('$52for_iter.2',
                            State(pc_initial=52 nstack_initial=1))},
             '$phi52.0': {('$50get_iter.7',
                           State(pc_initial=0 nstack_initial=0)),
                          ('$phi56.0', State(pc_initial=56 nstack_initial=2)),
                          ('$phi92.0', State(pc_initial=92 nstack_initial=3))},
             '$phi56.0': {('$50get_iter.7',
                           State(pc_initial=0 nstack_initial=0)),
                          ('$phi56.0', State(pc_initial=56 nstack_initial=2)),
                          ('$phi92.0', State(pc_initial=92 nstack_initial=3))},
             '$phi56.1': {('$52for_iter.2',
                           State(pc_initial=52 nstack_initial=1))},
             '$phi88.0': {('$50get_iter.7',
                           State(pc_initial=0 nstack_initial=0)),
                          ('$phi88.0', State(pc_initial=88 nstack_initial=2))},
             '$phi88.1': {('$86get_iter.9',
                           State(pc_initial=56 nstack_initial=2)),
                          ('$phi88.1', State(pc_initial=88 nstack_initial=2))},
             '$phi92.0': {('$50get_iter.7',
                           State(pc_initial=0 nstack_initial=0))},
             '$phi92.1': {('$86get_iter.9',
                           State(pc_initial=56 nstack_initial=2))},
             '$phi92.2': {('$88for_iter.3',
                           State(pc_initial=88 nstack_initial=2))}})
changing phismap: defaultdict(<class 'set'>,
            {'$phi152.0': {('$50get_iter.7',
                            State(pc_initial=0 nstack_initial=0))},
             '$phi152.1': {('$86get_iter.9',
                            State(pc_initial=56 nstack_initial=2))},
             '$phi152.2': {('$88for_iter.3',
                            State(pc_initial=88 nstack_initial=2))},
             '$phi156.0': {('$50get_iter.7',
                            State(pc_initial=0 nstack_initial=0))},
             '$phi156.1': {('$52for_iter.2',
                            State(pc_initial=52 nstack_initial=1))},
             '$phi52.0': {('$50get_iter.7',
                           State(pc_initial=0 nstack_initial=0))},
             '$phi56.0': {('$50get_iter.7',
                           State(pc_initial=0 nstack_initial=0))},
             '$phi56.1': {('$52for_iter.2',
                           State(pc_initial=52 nstack_initial=1))},
             '$phi88.0': {('$50get_iter.7',
                           State(pc_initial=0 nstack_initial=0))},
             '$phi88.1': {('$86get_iter.9',
                           State(pc_initial=56 nstack_initial=2))},
             '$phi92.0': {('$50get_iter.7',
                           State(pc_initial=0 nstack_initial=0))},
             '$phi92.1': {('$86get_iter.9',
                           State(pc_initial=56 nstack_initial=2))},
             '$phi92.2': {('$88for_iter.3',
                           State(pc_initial=88 nstack_initial=2))}})
changing phismap: defaultdict(<class 'set'>,
            {'$phi152.0': {('$50get_iter.7',
                            State(pc_initial=0 nstack_initial=0))},
             '$phi152.1': {('$86get_iter.9',
                            State(pc_initial=56 nstack_initial=2))},
             '$phi152.2': {('$88for_iter.3',
                            State(pc_initial=88 nstack_initial=2))},
             '$phi156.0': {('$50get_iter.7',
                            State(pc_initial=0 nstack_initial=0))},
             '$phi156.1': {('$52for_iter.2',
                            State(pc_initial=52 nstack_initial=1))},
             '$phi52.0': {('$50get_iter.7',
                           State(pc_initial=0 nstack_initial=0))},
             '$phi56.0': {('$50get_iter.7',
                           State(pc_initial=0 nstack_initial=0))},
             '$phi56.1': {('$52for_iter.2',
                           State(pc_initial=52 nstack_initial=1))},
             '$phi88.0': {('$50get_iter.7',
                           State(pc_initial=0 nstack_initial=0))},
             '$phi88.1': {('$86get_iter.9',
                           State(pc_initial=56 nstack_initial=2))},
             '$phi92.0': {('$50get_iter.7',
                           State(pc_initial=0 nstack_initial=0))},
             '$phi92.1': {('$86get_iter.9',
                           State(pc_initial=56 nstack_initial=2))},
             '$phi92.2': {('$88for_iter.3',
                           State(pc_initial=88 nstack_initial=2))}})
keep phismap: {'$phi52.0': {('$50get_iter.7', State(pc_initial=0 nstack_initial=0))},
 '$phi56.1': {('$52for_iter.2', State(pc_initial=52 nstack_initial=1))},
 '$phi88.1': {('$86get_iter.9', State(pc_initial=56 nstack_initial=2))},
 '$phi92.2': {('$88for_iter.3', State(pc_initial=88 nstack_initial=2))}}
new_out: defaultdict(<class 'dict'>,
            {State(pc_initial=0 nstack_initial=0): {'$phi52.0': '$50get_iter.7'},
             State(pc_initial=52 nstack_initial=1): {'$phi56.1': '$52for_iter.2'},
             State(pc_initial=56 nstack_initial=2): {'$phi88.1': '$86get_iter.9'},
             State(pc_initial=88 nstack_initial=2): {'$phi92.2': '$88for_iter.3'}})
----------------------DONE Prune PHIs-----------------------
block_infos State(pc_initial=0 nstack_initial=0):
AdaptBlockInfo(insts=((0, {}), (2, {}), (4, {'idx': 0, 'res': '$4load_global.0'}), (14, {'res': '$X14.2'}), (16, {'item': '$X14.2', 'res': '$16load_attr.3'}), (36, {'res': '$const36.4'}), (38, {'index': '$const36.4', 'target': '$16load_attr.3', 'res': '$38binary_subscr.5'}), (42, {'func': '$4load_global.0', 'args': ['$38binary_subscr.5'], 'kw_names': None, 'res': '$42call.6'}), (50, {'value': '$42call.6', 'res': '$50get_iter.7'})), outgoing_phis={'$phi52.0': '$50get_iter.7'}, blockstack=(), active_try_block=None, outgoing_edgepushed={52: ('$50get_iter.7',)})
block_infos State(pc_initial=52 nstack_initial=1):
AdaptBlockInfo(insts=((52, {'iterator': '$phi52.0', 'pair': '$52for_iter.1', 'indval': '$52for_iter.2', 'pred': '$52for_iter.3'}),), outgoing_phis={'$phi56.1': '$52for_iter.2'}, blockstack=(), active_try_block=None, outgoing_edgepushed={156: ('$phi52.0', '$52for_iter.2'), 56: ('$phi52.0', '$52for_iter.2')})
block_infos State(pc_initial=56 nstack_initial=2):
AdaptBlockInfo(insts=((56, {'value': '$phi56.1'}), (58, {'idx': 0, 'res': '$58load_global.2'}), (68, {'res': '$hypervector_size68.4'}), (70, {'res': '$hypervector_size70.5'}), (72, {'res': '$const72.6'}), (74, {'op': '*', 'lhs': '$hypervector_size70.5', 'rhs': '$const72.6', 'res': '$binop_mul74.7'}), (78, {'func': '$58load_global.2', 'args': ['$hypervector_size68.4', '$binop_mul74.7'], 'kw_names': None, 'res': '$78call.8'}), (86, {'value': '$78call.8', 'res': '$86get_iter.9'})), outgoing_phis={'$phi88.1': '$86get_iter.9'}, blockstack=(), active_try_block=None, outgoing_edgepushed={88: ('$phi56.0', '$86get_iter.9')})
block_infos State(pc_initial=88 nstack_initial=2):
AdaptBlockInfo(insts=((88, {'iterator': '$phi88.1', 'pair': '$88for_iter.2', 'indval': '$88for_iter.3', 'pred': '$88for_iter.4'}),), outgoing_phis={'$phi92.2': '$88for_iter.3'}, blockstack=(), active_try_block=None, outgoing_edgepushed={152: ('$phi88.0', '$phi88.1', '$88for_iter.3'), 92: ('$phi88.0', '$phi88.1', '$88for_iter.3')})
block_infos State(pc_initial=92 nstack_initial=3):
AdaptBlockInfo(insts=((92, {'value': '$phi92.2'}), (94, {'res': '$k94.3'}), (96, {'res': '$const96.4'}), (98, {'op': '//', 'lhs': '$k94.3', 'rhs': '$const96.4', 'res': '$binop_floordiv98.5'}), (102, {'value': '$binop_floordiv98.5'}), (104, {'res': '$k104.6'}), (106, {'res': '$const106.7'}), (108, {'op': '%', 'lhs': '$k104.6', 'rhs': '$const106.7', 'res': '$binop_mod108.8'}), (112, {'value': '$binop_mod108.8'}), (114, {'res': '$X114.9'}), (116, {'res': '$i116.10'}), (118, {'res': '$chunk118.11'}), (120, {'items': ['$i116.10', '$chunk118.11'], 'res': '$120build_tuple.12'}), (126, {'index': '$120build_tuple.12', 'target': '$X114.9', 'res': '$126binary_subscr.13'}), (130, {'res': '$const130.14'}), (132, {'res': '$pos132.15'}), (134, {'op': '<<', 'lhs': '$const130.14', 'rhs': '$pos132.15', 'res': '$binop_lshift134.16'}), (138, {'op': '|=', 'lhs': '$126binary_subscr.13', 'rhs': '$binop_lshift134.16', 'res': '$binop_ior138.17'}), (146, {'target': '$X114.9', 'index': '$120build_tuple.12', 'value': '$binop_ior138.17'}), (150, {})), outgoing_phis={}, blockstack=(), active_try_block=None, outgoing_edgepushed={88: ('$phi92.0', '$phi92.1')})
block_infos State(pc_initial=152 nstack_initial=3):
AdaptBlockInfo(insts=((154, {}),), outgoing_phis={}, blockstack=(), active_try_block=None, outgoing_edgepushed={52: ('$phi152.0',)})
block_infos State(pc_initial=156 nstack_initial=2):
AdaptBlockInfo(insts=((158, {'retval': '$const158.2', 'castval': '$158return_const.3'}),), outgoing_phis={}, blockstack=(), active_try_block=None, outgoing_edgepushed={})
label 0:
    hypervector_size = arg(0, name=hypervector_size) ['hypervector_size']
    X = arg(1, name=X)                       ['X']
    $4load_global.0 = global(range: <class 'range'>) ['$4load_global.0']
    $16load_attr.3 = getattr(value=X, attr=shape) ['$16load_attr.3', 'X']
    $const36.4 = const(int, 0)               ['$const36.4']
    $38binary_subscr.5 = getitem(value=$16load_attr.3, index=$const36.4, fn=<built-in function getitem>) ['$16load_attr.3', '$38binary_subscr.5', '$const36.4']
    $42call.6 = call $4load_global.0($38binary_subscr.5, func=$4load_global.0, args=[Var($38binary_subscr.5, graphs.py:75)], kws=(), vararg=None, varkwarg=None, target=None) ['$38binary_subscr.5', '$42call.6', '$4load_global.0']
    $50get_iter.7 = getiter(value=$42call.6) ['$42call.6', '$50get_iter.7']
    $phi52.0 = $50get_iter.7                 ['$50get_iter.7', '$phi52.0']
    jump 52                                  []
label 52:
    $52for_iter.1 = iternext(value=$phi52.0) ['$52for_iter.1', '$phi52.0']
    $52for_iter.2 = pair_first(value=$52for_iter.1) ['$52for_iter.1', '$52for_iter.2']
    $52for_iter.3 = pair_second(value=$52for_iter.1) ['$52for_iter.1', '$52for_iter.3']
    $phi56.1 = $52for_iter.2                 ['$52for_iter.2', '$phi56.1']
    branch $52for_iter.3, 56, 156            ['$52for_iter.3']
label 56:
    i = $phi56.1                             ['$phi56.1', 'i']
    $58load_global.2 = global(range: <class 'range'>) ['$58load_global.2']
    $const72.6 = const(int, 2)               ['$const72.6']
    $binop_mul74.7 = hypervector_size * $const72.6 ['$binop_mul74.7', '$const72.6', 'hypervector_size']
    $78call.8 = call $58load_global.2(hypervector_size, $binop_mul74.7, func=$58load_global.2, args=[Var(hypervector_size, graphs.py:72), Var($binop_mul74.7, graphs.py:76)], kws=(), vararg=None, varkwarg=None, target=None) ['$58load_global.2', '$78call.8', '$binop_mul74.7', 'hypervector_size']
    $86get_iter.9 = getiter(value=$78call.8) ['$78call.8', '$86get_iter.9']
    $phi88.1 = $86get_iter.9                 ['$86get_iter.9', '$phi88.1']
    jump 88                                  []
label 88:
    $88for_iter.2 = iternext(value=$phi88.1) ['$88for_iter.2', '$phi88.1']
    $88for_iter.3 = pair_first(value=$88for_iter.2) ['$88for_iter.2', '$88for_iter.3']
    $88for_iter.4 = pair_second(value=$88for_iter.2) ['$88for_iter.2', '$88for_iter.4']
    $phi92.2 = $88for_iter.3                 ['$88for_iter.3', '$phi92.2']
    branch $88for_iter.4, 92, 152            ['$88for_iter.4']
label 92:
    k = $phi92.2                             ['$phi92.2', 'k']
    $const96.4 = const(int, 32)              ['$const96.4']
    chunk = k // $const96.4                  ['$const96.4', 'chunk', 'k']
    $const106.7 = const(int, 32)             ['$const106.7']
    pos = k % $const106.7                    ['$const106.7', 'k', 'pos']
    $120build_tuple.12 = build_tuple(items=[Var(i, graphs.py:75), Var(chunk, graphs.py:77)]) ['$120build_tuple.12', 'chunk', 'i']
    $126binary_subscr.13 = getitem(value=X, index=$120build_tuple.12, fn=<built-in function getitem>) ['$120build_tuple.12', '$126binary_subscr.13', 'X']
    $const130.14 = const(int, 1)             ['$const130.14']
    $binop_lshift134.16 = $const130.14 << pos ['$binop_lshift134.16', '$const130.14', 'pos']
    $binop_ior138.17 = inplace_binop(fn=<built-in function ior>, immutable_fn=<built-in function or_>, lhs=$126binary_subscr.13, rhs=$binop_lshift134.16, static_lhs=Undefined, static_rhs=Undefined) ['$126binary_subscr.13', '$binop_ior138.17', '$binop_lshift134.16']
    X[$120build_tuple.12] = $binop_ior138.17 ['$120build_tuple.12', '$binop_ior138.17', 'X']
    jump 88                                  []
label 152:
    jump 52                                  []
label 156:
    $const158.2 = const(NoneType, None)      ['$const158.2']
    $158return_const.3 = cast(value=$const158.2) ['$158return_const.3', '$const158.2']
    return $158return_const.3                ['$158return_const.3']

==== SSA block analysis pass on 0
Running <numba.core.ssa._GatherDefsHandler object at 0x780e9c345d60>
on stmt: hypervector_size = arg(0, name=hypervector_size)
on stmt: X = arg(1, name=X)
on stmt: $4load_global.0 = global(range: <class 'range'>)
on stmt: $16load_attr.3 = getattr(value=X, attr=shape)
on stmt: $const36.4 = const(int, 0)
on stmt: $38binary_subscr.5 = static_getitem(value=$16load_attr.3, index=0, index_var=$const36.4, fn=<built-in function getitem>)
on stmt: $42call.6 = call $4load_global.0($38binary_subscr.5, func=$4load_global.0, args=[Var($38binary_subscr.5, graphs.py:75)], kws=(), vararg=None, varkwarg=None, target=None)
on stmt: $50get_iter.7 = getiter(value=$42call.6)
on stmt: $phi52.0 = $50get_iter.7
on stmt: jump 52
==== SSA block analysis pass on 52
Running <numba.core.ssa._GatherDefsHandler object at 0x780e9c345d60>
on stmt: $52for_iter.1 = iternext(value=$phi52.0)
on stmt: $52for_iter.2 = pair_first(value=$52for_iter.1)
on stmt: $52for_iter.3 = pair_second(value=$52for_iter.1)
on stmt: $phi56.1 = $52for_iter.2
on stmt: branch $52for_iter.3, 56, 156
==== SSA block analysis pass on 56
Running <numba.core.ssa._GatherDefsHandler object at 0x780e9c345d60>
on stmt: i = $phi56.1
on stmt: $58load_global.2 = global(range: <class 'range'>)
on stmt: $const72.6 = const(int, 2)
on stmt: $binop_mul74.7 = hypervector_size * $const72.6
on stmt: $78call.8 = call $58load_global.2(hypervector_size, $binop_mul74.7, func=$58load_global.2, args=[Var(hypervector_size, graphs.py:72), Var($binop_mul74.7, graphs.py:76)], kws=(), vararg=None, varkwarg=None, target=None)
on stmt: $86get_iter.9 = getiter(value=$78call.8)
on stmt: $phi88.1 = $86get_iter.9
on stmt: jump 88
==== SSA block analysis pass on 88
Running <numba.core.ssa._GatherDefsHandler object at 0x780e9c345d60>
on stmt: $88for_iter.2 = iternext(value=$phi88.1)
on stmt: $88for_iter.3 = pair_first(value=$88for_iter.2)
on stmt: $88for_iter.4 = pair_second(value=$88for_iter.2)
on stmt: $phi92.2 = $88for_iter.3
on stmt: branch $88for_iter.4, 92, 152
==== SSA block analysis pass on 92
Running <numba.core.ssa._GatherDefsHandler object at 0x780e9c345d60>
on stmt: k = $phi92.2
on stmt: $const96.4 = const(int, 32)
on stmt: chunk = k // $const96.4
on stmt: $const106.7 = const(int, 32)
on stmt: pos = k % $const106.7
on stmt: $120build_tuple.12 = build_tuple(items=[Var(i, graphs.py:75), Var(chunk, graphs.py:77)])
on stmt: $126binary_subscr.13 = getitem(value=X, index=$120build_tuple.12, fn=<built-in function getitem>)
on stmt: $const130.14 = const(int, 1)
on stmt: $binop_lshift134.16 = $const130.14 << pos
on stmt: $binop_ior138.17 = inplace_binop(fn=<built-in function ior>, immutable_fn=<built-in function or_>, lhs=$126binary_subscr.13, rhs=$binop_lshift134.16, static_lhs=Undefined, static_rhs=Undefined)
on stmt: X[$120build_tuple.12] = $binop_ior138.17
on stmt: jump 88
==== SSA block analysis pass on 152
Running <numba.core.ssa._GatherDefsHandler object at 0x780e9c345d60>
on stmt: jump 52
==== SSA block analysis pass on 156
Running <numba.core.ssa._GatherDefsHandler object at 0x780e9c345d60>
on stmt: $const158.2 = const(NoneType, None)
on stmt: $158return_const.3 = cast(value=$const158.2)
on stmt: return $158return_const.3
defs defaultdict(<class 'list'>,
            {'$120build_tuple.12': [(<numba.core.ir.Assign object at 0x780e9c347ef0>,
                                     92)],
             '$126binary_subscr.13': [(<numba.core.ir.Assign object at 0x780e9c368080>,
                                       92)],
             '$158return_const.3': [(<numba.core.ir.Assign object at 0x780e9c368290>,
                                     156)],
             '$16load_attr.3': [(<numba.core.ir.Assign object at 0x780e9c346540>,
                                 0)],
             '$38binary_subscr.5': [(<numba.core.ir.Assign object at 0x780e9c346030>,
                                     0)],
             '$42call.6': [(<numba.core.ir.Assign object at 0x780e9c3467b0>,
                            0)],
             '$4load_global.0': [(<numba.core.ir.Assign object at 0x780e9c345d00>,
                                  0)],
             '$50get_iter.7': [(<numba.core.ir.Assign object at 0x780e9c346840>,
                                0)],
             '$52for_iter.1': [(<numba.core.ir.Assign object at 0x780e9c3469f0>,
                                52)],
             '$52for_iter.2': [(<numba.core.ir.Assign object at 0x780e9c346a80>,
                                52)],
             '$52for_iter.3': [(<numba.core.ir.Assign object at 0x780e9c346b10>,
                                52)],
             '$58load_global.2': [(<numba.core.ir.Assign object at 0x780e9c346cf0>,
                                   56)],
             '$78call.8': [(<numba.core.ir.Assign object at 0x780e9c3470b0>,
                            56)],
             '$86get_iter.9': [(<numba.core.ir.Assign object at 0x780e9c347140>,
                                56)],
             '$88for_iter.2': [(<numba.core.ir.Assign object at 0x780e9c3472c0>,
                                88)],
             '$88for_iter.3': [(<numba.core.ir.Assign object at 0x780e9c347380>,
                                88)],
             '$88for_iter.4': [(<numba.core.ir.Assign object at 0x780e9c347470>,
                                88)],
             '$binop_ior138.17': [(<numba.core.ir.Assign object at 0x780e9c3684d0>,
                                   92)],
             '$binop_lshift134.16': [(<numba.core.ir.Assign object at 0x780e9c3683b0>,
                                      92)],
             '$binop_mul74.7': [(<numba.core.ir.Assign object at 0x780e9c346fc0>,
                                 56)],
             '$const106.7': [(<numba.core.ir.Assign object at 0x780e9c347cb0>,
                              92)],
             '$const130.14': [(<numba.core.ir.Assign object at 0x780e9c368170>,
                               92)],
             '$const158.2': [(<numba.core.ir.Assign object at 0x780e9c345280>,
                              156)],
             '$const36.4': [(<numba.core.ir.Assign object at 0x780e9c3464b0>,
                             0)],
             '$const72.6': [(<numba.core.ir.Assign object at 0x780e9c346ed0>,
                             56)],
             '$const96.4': [(<numba.core.ir.Assign object at 0x780e9c347890>,
                             92)],
             '$phi52.0': [(<numba.core.ir.Assign object at 0x780e9c346510>, 0)],
             '$phi56.1': [(<numba.core.ir.Assign object at 0x780e9c345490>,
                           52)],
             '$phi88.1': [(<numba.core.ir.Assign object at 0x780e9c346e10>,
                           56)],
             '$phi92.2': [(<numba.core.ir.Assign object at 0x780e9c347500>,
                           88)],
             'X': [(<numba.core.ir.Assign object at 0x780e9c346450>, 0)],
             'chunk': [(<numba.core.ir.Assign object at 0x780e9c3479e0>, 92)],
             'hypervector_size': [(<numba.core.ir.Assign object at 0x780e9c3463c0>,
                                   0)],
             'i': [(<numba.core.ir.Assign object at 0x780e9c346c30>, 56)],
             'k': [(<numba.core.ir.Assign object at 0x780e9c347680>, 92)],
             'pos': [(<numba.core.ir.Assign object at 0x780e9c347e00>, 92)]})
SSA violators <numba.core.utils.OrderedSet object at 0x780e9c345d60>
bytecode dump:
>          0	NOP(arg=None, lineno=121)
           2	RESUME(arg=0, lineno=121)
           4	LOAD_FAST(arg=0, lineno=124)
           6	LOAD_FAST(arg=4, lineno=124)
           8	LOAD_CONST(arg=0, lineno=124)
          10	LOAD_CONST(arg=0, lineno=124)
          12	BUILD_SLICE(arg=2, lineno=124)
          14	BUILD_TUPLE(arg=2, lineno=124)
          16	BINARY_SUBSCR(arg=None, lineno=124)
          20	GET_ITER(arg=None, lineno=124)
>         22	FOR_ITER(arg=71, lineno=124)
          26	STORE_FAST(arg=6, lineno=124)
          28	LOAD_FAST(arg=6, lineno=125)
          30	LOAD_CONST(arg=1, lineno=125)
          32	BINARY_OP(arg=2, lineno=125)
          36	STORE_FAST(arg=7, lineno=125)
          38	LOAD_FAST(arg=6, lineno=126)
          40	LOAD_CONST(arg=1, lineno=126)
          42	BINARY_OP(arg=6, lineno=126)
          46	STORE_FAST(arg=8, lineno=126)
          48	LOAD_FAST(arg=5, lineno=128)
          50	LOAD_FAST(arg=2, lineno=128)
          52	LOAD_FAST(arg=3, lineno=128)
          54	BINARY_OP(arg=0, lineno=128)
          58	LOAD_FAST(arg=7, lineno=128)
          60	BUILD_TUPLE(arg=2, lineno=128)
          62	COPY(arg=2, lineno=128)
          64	COPY(arg=2, lineno=128)
          66	BINARY_SUBSCR(arg=None, lineno=128)
          70	LOAD_CONST(arg=2, lineno=128)
          72	LOAD_FAST(arg=8, lineno=128)
          74	BINARY_OP(arg=3, lineno=128)
          78	BINARY_OP(arg=20, lineno=128)
          82	SWAP(arg=3, lineno=128)
          84	SWAP(arg=2, lineno=128)
          86	STORE_SUBSCR(arg=None, lineno=128)
          90	LOAD_FAST(arg=6, lineno=130)
          92	LOAD_FAST(arg=1, lineno=130)
          94	BINARY_OP(arg=0, lineno=130)
          98	LOAD_CONST(arg=1, lineno=130)
         100	BINARY_OP(arg=2, lineno=130)
         104	STORE_FAST(arg=7, lineno=130)
         106	LOAD_FAST(arg=6, lineno=131)
         108	LOAD_FAST(arg=1, lineno=131)
         110	BINARY_OP(arg=0, lineno=131)
         114	LOAD_CONST(arg=1, lineno=131)
         116	BINARY_OP(arg=6, lineno=131)
         120	STORE_FAST(arg=8, lineno=131)
         122	LOAD_FAST(arg=5, lineno=132)
         124	LOAD_FAST(arg=2, lineno=132)
         126	LOAD_FAST(arg=3, lineno=132)
         128	BINARY_OP(arg=0, lineno=132)
         132	LOAD_FAST(arg=7, lineno=132)
         134	BUILD_TUPLE(arg=2, lineno=132)
         136	COPY(arg=2, lineno=132)
         138	COPY(arg=2, lineno=132)
         140	BINARY_SUBSCR(arg=None, lineno=132)
         144	LOAD_CONST(arg=2, lineno=132)
         146	LOAD_FAST(arg=8, lineno=132)
         148	BINARY_OP(arg=3, lineno=132)
         152	UNARY_INVERT(arg=None, lineno=132)
         154	BINARY_OP(arg=14, lineno=132)
         158	SWAP(arg=3, lineno=132)
         160	SWAP(arg=2, lineno=132)
         162	STORE_SUBSCR(arg=None, lineno=132)
         166	JUMP_BACKWARD(arg=73, lineno=132)
>        168	END_FOR(arg=None, lineno=124)
         170	RETURN_CONST(arg=0, lineno=124)
pending: deque([State(pc_initial=0 nstack_initial=0)])
stack: []
state.pc_initial: State(pc_initial=0 nstack_initial=0)
dispatch pc=0, inst=NOP(arg=None, lineno=121)
stack []
dispatch pc=2, inst=RESUME(arg=0, lineno=121)
stack []
dispatch pc=4, inst=LOAD_FAST(arg=0, lineno=124)
stack []
dispatch pc=6, inst=LOAD_FAST(arg=4, lineno=124)
stack ['$hypervectors4.0']
dispatch pc=8, inst=LOAD_CONST(arg=0, lineno=124)
stack ['$hypervectors4.0', '$symbol6.1']
dispatch pc=10, inst=LOAD_CONST(arg=0, lineno=124)
stack ['$hypervectors4.0', '$symbol6.1', '$const8.2']
dispatch pc=12, inst=BUILD_SLICE(arg=2, lineno=124)
stack ['$hypervectors4.0', '$symbol6.1', '$const8.2', '$const10.3']
dispatch pc=14, inst=BUILD_TUPLE(arg=2, lineno=124)
stack ['$hypervectors4.0', '$symbol6.1', '$12build_slice.5']
dispatch pc=16, inst=BINARY_SUBSCR(arg=None, lineno=124)
stack ['$hypervectors4.0', '$14build_tuple.6']
dispatch pc=20, inst=GET_ITER(arg=None, lineno=124)
stack ['$16binary_subscr.7']
end state. edges=[Edge(pc=22, stack=('$20get_iter.8',), blockstack=(), npush=0)]
pending: deque([State(pc_initial=22 nstack_initial=1)])
stack: ['$phi22.0']
state.pc_initial: State(pc_initial=22 nstack_initial=1)
dispatch pc=22, inst=FOR_ITER(arg=71, lineno=124)
stack ['$phi22.0']
end state. edges=[Edge(pc=168, stack=('$phi22.0', '$22for_iter.2'), blockstack=(), npush=0), Edge(pc=26, stack=('$phi22.0', '$22for_iter.2'), blockstack=(), npush=0)]
pending: deque([State(pc_initial=168 nstack_initial=2), State(pc_initial=26 nstack_initial=2)])
stack: ['$phi168.0', '$phi168.1']
state.pc_initial: State(pc_initial=168 nstack_initial=2)
dispatch pc=168, inst=END_FOR(arg=None, lineno=124)
stack ['$phi168.0', '$phi168.1']
dispatch pc=170, inst=RETURN_CONST(arg=0, lineno=124)
stack []
end state. edges=[]
pending: deque([State(pc_initial=26 nstack_initial=2)])
stack: ['$phi26.0', '$phi26.1']
state.pc_initial: State(pc_initial=26 nstack_initial=2)
dispatch pc=26, inst=STORE_FAST(arg=6, lineno=124)
stack ['$phi26.0', '$phi26.1']
dispatch pc=28, inst=LOAD_FAST(arg=6, lineno=125)
stack ['$phi26.0']
dispatch pc=30, inst=LOAD_CONST(arg=1, lineno=125)
stack ['$phi26.0', '$k28.2']
dispatch pc=32, inst=BINARY_OP(arg=2, lineno=125)
stack ['$phi26.0', '$k28.2', '$const30.3']
dispatch pc=36, inst=STORE_FAST(arg=7, lineno=125)
stack ['$phi26.0', '$binop_floordiv32.4']
dispatch pc=38, inst=LOAD_FAST(arg=6, lineno=126)
stack ['$phi26.0']
dispatch pc=40, inst=LOAD_CONST(arg=1, lineno=126)
stack ['$phi26.0', '$k38.5']
dispatch pc=42, inst=BINARY_OP(arg=6, lineno=126)
stack ['$phi26.0', '$k38.5', '$const40.6']
dispatch pc=46, inst=STORE_FAST(arg=8, lineno=126)
stack ['$phi26.0', '$binop_mod42.7']
dispatch pc=48, inst=LOAD_FAST(arg=5, lineno=128)
stack ['$phi26.0']
dispatch pc=50, inst=LOAD_FAST(arg=2, lineno=128)
stack ['$phi26.0', '$X48.8']
dispatch pc=52, inst=LOAD_FAST(arg=3, lineno=128)
stack ['$phi26.0', '$X48.8', '$graph_index50.9']
dispatch pc=54, inst=BINARY_OP(arg=0, lineno=128)
stack ['$phi26.0', '$X48.8', '$graph_index50.9', '$node52.10']
dispatch pc=58, inst=LOAD_FAST(arg=7, lineno=128)
stack ['$phi26.0', '$X48.8', '$binop_add54.11']
dispatch pc=60, inst=BUILD_TUPLE(arg=2, lineno=128)
stack ['$phi26.0', '$X48.8', '$binop_add54.11', '$chunk58.12']
dispatch pc=62, inst=COPY(arg=2, lineno=128)
stack ['$phi26.0', '$X48.8', '$60build_tuple.13']
dispatch pc=64, inst=COPY(arg=2, lineno=128)
stack ['$phi26.0', '$X48.8', '$60build_tuple.13', '$X48.8']
dispatch pc=66, inst=BINARY_SUBSCR(arg=None, lineno=128)
stack ['$phi26.0', '$X48.8', '$60build_tuple.13', '$X48.8', '$60build_tuple.13']
dispatch pc=70, inst=LOAD_CONST(arg=2, lineno=128)
stack ['$phi26.0', '$X48.8', '$60build_tuple.13', '$66binary_subscr.14']
dispatch pc=72, inst=LOAD_FAST(arg=8, lineno=128)
stack ['$phi26.0', '$X48.8', '$60build_tuple.13', '$66binary_subscr.14', '$const70.15']
dispatch pc=74, inst=BINARY_OP(arg=3, lineno=128)
stack ['$phi26.0', '$X48.8', '$60build_tuple.13', '$66binary_subscr.14', '$const70.15', '$pos72.16']
dispatch pc=78, inst=BINARY_OP(arg=20, lineno=128)
stack ['$phi26.0', '$X48.8', '$60build_tuple.13', '$66binary_subscr.14', '$binop_lshift74.17']
dispatch pc=82, inst=SWAP(arg=3, lineno=128)
stack ['$phi26.0', '$X48.8', '$60build_tuple.13', '$binop_ior78.18']
dispatch pc=84, inst=SWAP(arg=2, lineno=128)
stack ['$phi26.0', '$binop_ior78.18', '$60build_tuple.13', '$X48.8']
dispatch pc=86, inst=STORE_SUBSCR(arg=None, lineno=128)
stack ['$phi26.0', '$binop_ior78.18', '$X48.8', '$60build_tuple.13']
dispatch pc=90, inst=LOAD_FAST(arg=6, lineno=130)
stack ['$phi26.0']
dispatch pc=92, inst=LOAD_FAST(arg=1, lineno=130)
stack ['$phi26.0', '$k90.19']
dispatch pc=94, inst=BINARY_OP(arg=0, lineno=130)
stack ['$phi26.0', '$k90.19', '$hypervector_size92.20']
dispatch pc=98, inst=LOAD_CONST(arg=1, lineno=130)
stack ['$phi26.0', '$binop_add94.21']
dispatch pc=100, inst=BINARY_OP(arg=2, lineno=130)
stack ['$phi26.0', '$binop_add94.21', '$const98.22']
dispatch pc=104, inst=STORE_FAST(arg=7, lineno=130)
stack ['$phi26.0', '$binop_floordiv100.23']
dispatch pc=106, inst=LOAD_FAST(arg=6, lineno=131)
stack ['$phi26.0']
dispatch pc=108, inst=LOAD_FAST(arg=1, lineno=131)
stack ['$phi26.0', '$k106.24']
dispatch pc=110, inst=BINARY_OP(arg=0, lineno=131)
stack ['$phi26.0', '$k106.24', '$hypervector_size108.25']
dispatch pc=114, inst=LOAD_CONST(arg=1, lineno=131)
stack ['$phi26.0', '$binop_add110.26']
dispatch pc=116, inst=BINARY_OP(arg=6, lineno=131)
stack ['$phi26.0', '$binop_add110.26', '$const114.27']
dispatch pc=120, inst=STORE_FAST(arg=8, lineno=131)
stack ['$phi26.0', '$binop_mod116.28']
dispatch pc=122, inst=LOAD_FAST(arg=5, lineno=132)
stack ['$phi26.0']
dispatch pc=124, inst=LOAD_FAST(arg=2, lineno=132)
stack ['$phi26.0', '$X122.29']
dispatch pc=126, inst=LOAD_FAST(arg=3, lineno=132)
stack ['$phi26.0', '$X122.29', '$graph_index124.30']
dispatch pc=128, inst=BINARY_OP(arg=0, lineno=132)
stack ['$phi26.0', '$X122.29', '$graph_index124.30', '$node126.31']
dispatch pc=132, inst=LOAD_FAST(arg=7, lineno=132)
stack ['$phi26.0', '$X122.29', '$binop_add128.32']
dispatch pc=134, inst=BUILD_TUPLE(arg=2, lineno=132)
stack ['$phi26.0', '$X122.29', '$binop_add128.32', '$chunk132.33']
dispatch pc=136, inst=COPY(arg=2, lineno=132)
stack ['$phi26.0', '$X122.29', '$134build_tuple.34']
dispatch pc=138, inst=COPY(arg=2, lineno=132)
stack ['$phi26.0', '$X122.29', '$134build_tuple.34', '$X122.29']
dispatch pc=140, inst=BINARY_SUBSCR(arg=None, lineno=132)
stack ['$phi26.0', '$X122.29', '$134build_tuple.34', '$X122.29', '$134build_tuple.34']
dispatch pc=144, inst=LOAD_CONST(arg=2, lineno=132)
stack ['$phi26.0', '$X122.29', '$134build_tuple.34', '$140binary_subscr.35']
dispatch pc=146, inst=LOAD_FAST(arg=8, lineno=132)
stack ['$phi26.0', '$X122.29', '$134build_tuple.34', '$140binary_subscr.35', '$const144.36']
dispatch pc=148, inst=BINARY_OP(arg=3, lineno=132)
stack ['$phi26.0', '$X122.29', '$134build_tuple.34', '$140binary_subscr.35', '$const144.36', '$pos146.37']
dispatch pc=152, inst=UNARY_INVERT(arg=None, lineno=132)
stack ['$phi26.0', '$X122.29', '$134build_tuple.34', '$140binary_subscr.35', '$binop_lshift148.38']
dispatch pc=154, inst=BINARY_OP(arg=14, lineno=132)
stack ['$phi26.0', '$X122.29', '$134build_tuple.34', '$140binary_subscr.35', '$152unary_invert.39']
dispatch pc=158, inst=SWAP(arg=3, lineno=132)
stack ['$phi26.0', '$X122.29', '$134build_tuple.34', '$binop_iand154.40']
dispatch pc=160, inst=SWAP(arg=2, lineno=132)
stack ['$phi26.0', '$binop_iand154.40', '$134build_tuple.34', '$X122.29']
dispatch pc=162, inst=STORE_SUBSCR(arg=None, lineno=132)
stack ['$phi26.0', '$binop_iand154.40', '$X122.29', '$134build_tuple.34']
dispatch pc=166, inst=JUMP_BACKWARD(arg=73, lineno=132)
stack ['$phi26.0']
end state. edges=[Edge(pc=22, stack=('$phi26.0',), blockstack=(), npush=0)]
pending: deque([State(pc_initial=22 nstack_initial=1)])
-------------------------Prune PHIs-------------------------
Used_phis: defaultdict(<class 'set'>,
            {State(pc_initial=0 nstack_initial=0): set(),
             State(pc_initial=22 nstack_initial=1): {'$phi22.0'},
             State(pc_initial=26 nstack_initial=2): {'$phi26.1'},
             State(pc_initial=168 nstack_initial=2): set()})
defmap: {'$phi168.1': State(pc_initial=22 nstack_initial=1),
 '$phi22.0': State(pc_initial=0 nstack_initial=0),
 '$phi26.1': State(pc_initial=22 nstack_initial=1)}
phismap: defaultdict(<class 'set'>,
            {'$phi168.0': {('$phi22.0', State(pc_initial=22 nstack_initial=1))},
             '$phi168.1': {('$22for_iter.2',
                            State(pc_initial=22 nstack_initial=1))},
             '$phi22.0': {('$20get_iter.8',
                           State(pc_initial=0 nstack_initial=0)),
                          ('$phi26.0', State(pc_initial=26 nstack_initial=2))},
             '$phi26.0': {('$phi22.0', State(pc_initial=22 nstack_initial=1))},
             '$phi26.1': {('$22for_iter.2',
                           State(pc_initial=22 nstack_initial=1))}})
changing phismap: defaultdict(<class 'set'>,
            {'$phi168.0': {('$20get_iter.8',
                            State(pc_initial=0 nstack_initial=0)),
                           ('$phi26.0', State(pc_initial=26 nstack_initial=2))},
             '$phi168.1': {('$22for_iter.2',
                            State(pc_initial=22 nstack_initial=1))},
             '$phi22.0': {('$20get_iter.8',
                           State(pc_initial=0 nstack_initial=0)),
                          ('$phi22.0', State(pc_initial=22 nstack_initial=1))},
             '$phi26.0': {('$20get_iter.8',
                           State(pc_initial=0 nstack_initial=0))},
             '$phi26.1': {('$22for_iter.2',
                           State(pc_initial=22 nstack_initial=1))}})
changing phismap: defaultdict(<class 'set'>,
            {'$phi168.0': {('$20get_iter.8',
                            State(pc_initial=0 nstack_initial=0))},
             '$phi168.1': {('$22for_iter.2',
                            State(pc_initial=22 nstack_initial=1))},
             '$phi22.0': {('$20get_iter.8',
                           State(pc_initial=0 nstack_initial=0))},
             '$phi26.0': {('$20get_iter.8',
                           State(pc_initial=0 nstack_initial=0))},
             '$phi26.1': {('$22for_iter.2',
                           State(pc_initial=22 nstack_initial=1))}})
changing phismap: defaultdict(<class 'set'>,
            {'$phi168.0': {('$20get_iter.8',
                            State(pc_initial=0 nstack_initial=0))},
             '$phi168.1': {('$22for_iter.2',
                            State(pc_initial=22 nstack_initial=1))},
             '$phi22.0': {('$20get_iter.8',
                           State(pc_initial=0 nstack_initial=0))},
             '$phi26.0': {('$20get_iter.8',
                           State(pc_initial=0 nstack_initial=0))},
             '$phi26.1': {('$22for_iter.2',
                           State(pc_initial=22 nstack_initial=1))}})
keep phismap: {'$phi22.0': {('$20get_iter.8', State(pc_initial=0 nstack_initial=0))},
 '$phi26.1': {('$22for_iter.2', State(pc_initial=22 nstack_initial=1))}}
new_out: defaultdict(<class 'dict'>,
            {State(pc_initial=0 nstack_initial=0): {'$phi22.0': '$20get_iter.8'},
             State(pc_initial=22 nstack_initial=1): {'$phi26.1': '$22for_iter.2'}})
----------------------DONE Prune PHIs-----------------------
block_infos State(pc_initial=0 nstack_initial=0):
AdaptBlockInfo(insts=((0, {}), (2, {}), (4, {'res': '$hypervectors4.0'}), (6, {'res': '$symbol6.1'}), (8, {'res': '$const8.2'}), (10, {'res': '$const10.3'}), (12, {'start': '$const8.2', 'stop': '$const10.3', 'step': None, 'res': '$12build_slice.5', 'slicevar': '$12build_slice.4'}), (14, {'items': ['$symbol6.1', '$12build_slice.5'], 'res': '$14build_tuple.6'}), (16, {'index': '$14build_tuple.6', 'target': '$hypervectors4.0', 'res': '$16binary_subscr.7'}), (20, {'value': '$16binary_subscr.7', 'res': '$20get_iter.8'})), outgoing_phis={'$phi22.0': '$20get_iter.8'}, blockstack=(), active_try_block=None, outgoing_edgepushed={22: ('$20get_iter.8',)})
block_infos State(pc_initial=22 nstack_initial=1):
AdaptBlockInfo(insts=((22, {'iterator': '$phi22.0', 'pair': '$22for_iter.1', 'indval': '$22for_iter.2', 'pred': '$22for_iter.3'}),), outgoing_phis={'$phi26.1': '$22for_iter.2'}, blockstack=(), active_try_block=None, outgoing_edgepushed={168: ('$phi22.0', '$22for_iter.2'), 26: ('$phi22.0', '$22for_iter.2')})
block_infos State(pc_initial=26 nstack_initial=2):
AdaptBlockInfo(insts=((26, {'value': '$phi26.1'}), (28, {'res': '$k28.2'}), (30, {'res': '$const30.3'}), (32, {'op': '//', 'lhs': '$k28.2', 'rhs': '$const30.3', 'res': '$binop_floordiv32.4'}), (36, {'value': '$binop_floordiv32.4'}), (38, {'res': '$k38.5'}), (40, {'res': '$const40.6'}), (42, {'op': '%', 'lhs': '$k38.5', 'rhs': '$const40.6', 'res': '$binop_mod42.7'}), (46, {'value': '$binop_mod42.7'}), (48, {'res': '$X48.8'}), (50, {'res': '$graph_index50.9'}), (52, {'res': '$node52.10'}), (54, {'op': '+', 'lhs': '$graph_index50.9', 'rhs': '$node52.10', 'res': '$binop_add54.11'}), (58, {'res': '$chunk58.12'}), (60, {'items': ['$binop_add54.11', '$chunk58.12'], 'res': '$60build_tuple.13'}), (66, {'index': '$60build_tuple.13', 'target': '$X48.8', 'res': '$66binary_subscr.14'}), (70, {'res': '$const70.15'}), (72, {'res': '$pos72.16'}), (74, {'op': '<<', 'lhs': '$const70.15', 'rhs': '$pos72.16', 'res': '$binop_lshift74.17'}), (78, {'op': '|=', 'lhs': '$66binary_subscr.14', 'rhs': '$binop_lshift74.17', 'res': '$binop_ior78.18'}), (86, {'target': '$X48.8', 'index': '$60build_tuple.13', 'value': '$binop_ior78.18'}), (90, {'res': '$k90.19'}), (92, {'res': '$hypervector_size92.20'}), (94, {'op': '+', 'lhs': '$k90.19', 'rhs': '$hypervector_size92.20', 'res': '$binop_add94.21'}), (98, {'res': '$const98.22'}), (100, {'op': '//', 'lhs': '$binop_add94.21', 'rhs': '$const98.22', 'res': '$binop_floordiv100.23'}), (104, {'value': '$binop_floordiv100.23'}), (106, {'res': '$k106.24'}), (108, {'res': '$hypervector_size108.25'}), (110, {'op': '+', 'lhs': '$k106.24', 'rhs': '$hypervector_size108.25', 'res': '$binop_add110.26'}), (114, {'res': '$const114.27'}), (116, {'op': '%', 'lhs': '$binop_add110.26', 'rhs': '$const114.27', 'res': '$binop_mod116.28'}), (120, {'value': '$binop_mod116.28'}), (122, {'res': '$X122.29'}), (124, {'res': '$graph_index124.30'}), (126, {'res': '$node126.31'}), (128, {'op': '+', 'lhs': '$graph_index124.30', 'rhs': '$node126.31', 'res': '$binop_add128.32'}), (132, {'res': '$chunk132.33'}), (134, {'items': ['$binop_add128.32', '$chunk132.33'], 'res': '$134build_tuple.34'}), (140, {'index': '$134build_tuple.34', 'target': '$X122.29', 'res': '$140binary_subscr.35'}), (144, {'res': '$const144.36'}), (146, {'res': '$pos146.37'}), (148, {'op': '<<', 'lhs': '$const144.36', 'rhs': '$pos146.37', 'res': '$binop_lshift148.38'}), (152, {'value': '$binop_lshift148.38', 'res': '$152unary_invert.39'}), (154, {'op': '&=', 'lhs': '$140binary_subscr.35', 'rhs': '$152unary_invert.39', 'res': '$binop_iand154.40'}), (162, {'target': '$X122.29', 'index': '$134build_tuple.34', 'value': '$binop_iand154.40'}), (166, {})), outgoing_phis={}, blockstack=(), active_try_block=None, outgoing_edgepushed={22: ('$phi26.0',)})
block_infos State(pc_initial=168 nstack_initial=2):
AdaptBlockInfo(insts=((170, {'retval': '$const170.2', 'castval': '$170return_const.3'}),), outgoing_phis={}, blockstack=(), active_try_block=None, outgoing_edgepushed={})
label 0:
    hypervectors = arg(0, name=hypervectors) ['hypervectors']
    hypervector_size = arg(1, name=hypervector_size) ['hypervector_size']
    graph_index = arg(2, name=graph_index)   ['graph_index']
    node = arg(3, name=node)                 ['node']
    symbol = arg(4, name=symbol)             ['symbol']
    X = arg(5, name=X)                       ['X']
    $const8.2 = const(NoneType, None)        ['$const8.2']
    $const10.3 = const(NoneType, None)       ['$const10.3']
    $12build_slice.4 = global(slice: <class 'slice'>) ['$12build_slice.4']
    $12build_slice.5 = call $12build_slice.4($const8.2, $const10.3, func=$12build_slice.4, args=(Var($const8.2, graphs.py:124), Var($const10.3, graphs.py:124)), kws=(), vararg=None, varkwarg=None, target=None) ['$12build_slice.4', '$12build_slice.5', '$const10.3', '$const8.2']
    $14build_tuple.6 = build_tuple(items=[Var(symbol, graphs.py:121), Var($12build_slice.5, graphs.py:124)]) ['$12build_slice.5', '$14build_tuple.6', 'symbol']
    $16binary_subscr.7 = getitem(value=hypervectors, index=$14build_tuple.6, fn=<built-in function getitem>) ['$14build_tuple.6', '$16binary_subscr.7', 'hypervectors']
    $20get_iter.8 = getiter(value=$16binary_subscr.7) ['$16binary_subscr.7', '$20get_iter.8']
    $phi22.0 = $20get_iter.8                 ['$20get_iter.8', '$phi22.0']
    jump 22                                  []
label 22:
    $22for_iter.1 = iternext(value=$phi22.0) ['$22for_iter.1', '$phi22.0']
    $22for_iter.2 = pair_first(value=$22for_iter.1) ['$22for_iter.1', '$22for_iter.2']
    $22for_iter.3 = pair_second(value=$22for_iter.1) ['$22for_iter.1', '$22for_iter.3']
    $phi26.1 = $22for_iter.2                 ['$22for_iter.2', '$phi26.1']
    branch $22for_iter.3, 26, 168            ['$22for_iter.3']
label 26:
    k = $phi26.1                             ['$phi26.1', 'k']
    $const30.3 = const(int, 32)              ['$const30.3']
    chunk = k // $const30.3                  ['$const30.3', 'chunk', 'k']
    $const40.6 = const(int, 32)              ['$const40.6']
    pos = k % $const40.6                     ['$const40.6', 'k', 'pos']
    $binop_add54.11 = graph_index + node     ['$binop_add54.11', 'graph_index', 'node']
    $60build_tuple.13 = build_tuple(items=[Var($binop_add54.11, graphs.py:128), Var(chunk, graphs.py:125)]) ['$60build_tuple.13', '$binop_add54.11', 'chunk']
    $66binary_subscr.14 = getitem(value=X, index=$60build_tuple.13, fn=<built-in function getitem>) ['$60build_tuple.13', '$66binary_subscr.14', 'X']
    $const70.15 = const(int, 1)              ['$const70.15']
    $binop_lshift74.17 = $const70.15 << pos  ['$binop_lshift74.17', '$const70.15', 'pos']
    $binop_ior78.18 = inplace_binop(fn=<built-in function ior>, immutable_fn=<built-in function or_>, lhs=$66binary_subscr.14, rhs=$binop_lshift74.17, static_lhs=Undefined, static_rhs=Undefined) ['$66binary_subscr.14', '$binop_ior78.18', '$binop_lshift74.17']
    X[$60build_tuple.13] = $binop_ior78.18   ['$60build_tuple.13', '$binop_ior78.18', 'X']
    $binop_add94.21 = k + hypervector_size   ['$binop_add94.21', 'hypervector_size', 'k']
    $const98.22 = const(int, 32)             ['$const98.22']
    chunk = $binop_add94.21 // $const98.22   ['$binop_add94.21', '$const98.22', 'chunk']
    $binop_add110.26 = k + hypervector_size  ['$binop_add110.26', 'hypervector_size', 'k']
    $const114.27 = const(int, 32)            ['$const114.27']
    pos = $binop_add110.26 % $const114.27    ['$binop_add110.26', '$const114.27', 'pos']
    $binop_add128.32 = graph_index + node    ['$binop_add128.32', 'graph_index', 'node']
    $134build_tuple.34 = build_tuple(items=[Var($binop_add128.32, graphs.py:132), Var(chunk, graphs.py:125)]) ['$134build_tuple.34', '$binop_add128.32', 'chunk']
    $140binary_subscr.35 = getitem(value=X, index=$134build_tuple.34, fn=<built-in function getitem>) ['$134build_tuple.34', '$140binary_subscr.35', 'X']
    $const144.36 = const(int, 1)             ['$const144.36']
    $binop_lshift148.38 = $const144.36 << pos ['$binop_lshift148.38', '$const144.36', 'pos']
    $152unary_invert.39 = unary(fn=<built-in function invert>, value=$binop_lshift148.38) ['$152unary_invert.39', '$binop_lshift148.38']
    $binop_iand154.40 = inplace_binop(fn=<built-in function iand>, immutable_fn=<built-in function and_>, lhs=$140binary_subscr.35, rhs=$152unary_invert.39, static_lhs=Undefined, static_rhs=Undefined) ['$140binary_subscr.35', '$152unary_invert.39', '$binop_iand154.40']
    X[$134build_tuple.34] = $binop_iand154.40 ['$134build_tuple.34', '$binop_iand154.40', 'X']
    jump 22                                  []
label 168:
    $const170.2 = const(NoneType, None)      ['$const170.2']
    $170return_const.3 = cast(value=$const170.2) ['$170return_const.3', '$const170.2']
    return $170return_const.3                ['$170return_const.3']

==== SSA block analysis pass on 0
Running <numba.core.ssa._GatherDefsHandler object at 0x780e9c2bccb0>
on stmt: hypervectors = arg(0, name=hypervectors)
on stmt: hypervector_size = arg(1, name=hypervector_size)
on stmt: graph_index = arg(2, name=graph_index)
on stmt: node = arg(3, name=node)
on stmt: symbol = arg(4, name=symbol)
on stmt: X = arg(5, name=X)
on stmt: $const8.2 = const(NoneType, None)
on stmt: $const10.3 = const(NoneType, None)
on stmt: $12build_slice.4 = global(slice: <class 'slice'>)
on stmt: $12build_slice.5 = call $12build_slice.4($const8.2, $const10.3, func=$12build_slice.4, args=(Var($const8.2, graphs.py:124), Var($const10.3, graphs.py:124)), kws=(), vararg=None, varkwarg=None, target=None)
on stmt: $14build_tuple.6 = build_tuple(items=[Var(symbol, graphs.py:121), Var($12build_slice.5, graphs.py:124)])
on stmt: $16binary_subscr.7 = getitem(value=hypervectors, index=$14build_tuple.6, fn=<built-in function getitem>)
on stmt: $20get_iter.8 = getiter(value=$16binary_subscr.7)
on stmt: $phi22.0 = $20get_iter.8
on stmt: jump 22
==== SSA block analysis pass on 22
Running <numba.core.ssa._GatherDefsHandler object at 0x780e9c2bccb0>
on stmt: $22for_iter.1 = iternext(value=$phi22.0)
on stmt: $22for_iter.2 = pair_first(value=$22for_iter.1)
on stmt: $22for_iter.3 = pair_second(value=$22for_iter.1)
on stmt: $phi26.1 = $22for_iter.2
on stmt: branch $22for_iter.3, 26, 168
==== SSA block analysis pass on 26
Running <numba.core.ssa._GatherDefsHandler object at 0x780e9c2bccb0>
on stmt: k = $phi26.1
on stmt: $const30.3 = const(int, 32)
on stmt: chunk = k // $const30.3
on stmt: $const40.6 = const(int, 32)
on stmt: pos = k % $const40.6
on stmt: $binop_add54.11 = graph_index + node
on stmt: $60build_tuple.13 = build_tuple(items=[Var($binop_add54.11, graphs.py:128), Var(chunk, graphs.py:125)])
on stmt: $66binary_subscr.14 = getitem(value=X, index=$60build_tuple.13, fn=<built-in function getitem>)
on stmt: $const70.15 = const(int, 1)
on stmt: $binop_lshift74.17 = $const70.15 << pos
on stmt: $binop_ior78.18 = inplace_binop(fn=<built-in function ior>, immutable_fn=<built-in function or_>, lhs=$66binary_subscr.14, rhs=$binop_lshift74.17, static_lhs=Undefined, static_rhs=Undefined)
on stmt: X[$60build_tuple.13] = $binop_ior78.18
on stmt: $binop_add94.21 = k + hypervector_size
on stmt: $const98.22 = const(int, 32)
on stmt: chunk = $binop_add94.21 // $const98.22
on stmt: $binop_add110.26 = k + hypervector_size
on stmt: $const114.27 = const(int, 32)
on stmt: pos = $binop_add110.26 % $const114.27
on stmt: $binop_add128.32 = graph_index + node
on stmt: $134build_tuple.34 = build_tuple(items=[Var($binop_add128.32, graphs.py:132), Var(chunk, graphs.py:125)])
on stmt: $140binary_subscr.35 = getitem(value=X, index=$134build_tuple.34, fn=<built-in function getitem>)
on stmt: $const144.36 = const(int, 1)
on stmt: $binop_lshift148.38 = $const144.36 << pos
on stmt: $152unary_invert.39 = unary(fn=<built-in function invert>, value=$binop_lshift148.38)
on stmt: $binop_iand154.40 = inplace_binop(fn=<built-in function iand>, immutable_fn=<built-in function and_>, lhs=$140binary_subscr.35, rhs=$152unary_invert.39, static_lhs=Undefined, static_rhs=Undefined)
on stmt: X[$134build_tuple.34] = $binop_iand154.40
on stmt: jump 22
==== SSA block analysis pass on 168
Running <numba.core.ssa._GatherDefsHandler object at 0x780e9c2bccb0>
on stmt: $const170.2 = const(NoneType, None)
on stmt: $170return_const.3 = cast(value=$const170.2)
on stmt: return $170return_const.3
defs defaultdict(<class 'list'>,
            {'$12build_slice.4': [(<numba.core.ir.Assign object at 0x780e9c2be0c0>,
                                   0)],
             '$12build_slice.5': [(<numba.core.ir.Assign object at 0x780e9c2be1b0>,
                                   0)],
             '$134build_tuple.34': [(<numba.core.ir.Assign object at 0x780e9c2dd430>,
                                     26)],
             '$140binary_subscr.35': [(<numba.core.ir.Assign object at 0x780e9c2dd5b0>,
                                       26)],
             '$14build_tuple.6': [(<numba.core.ir.Assign object at 0x780e9c2be2d0>,
                                   0)],
             '$152unary_invert.39': [(<numba.core.ir.Assign object at 0x780e9c2dda30>,
                                      26)],
             '$16binary_subscr.7': [(<numba.core.ir.Assign object at 0x780e9c2be420>,
                                     0)],
             '$170return_const.3': [(<numba.core.ir.Assign object at 0x780e9c2bf980>,
                                     168)],
             '$20get_iter.8': [(<numba.core.ir.Assign object at 0x780e9c2be540>,
                                0)],
             '$22for_iter.1': [(<numba.core.ir.Assign object at 0x780e9c2be750>,
                                22)],
             '$22for_iter.2': [(<numba.core.ir.Assign object at 0x780e9c2be870>,
                                22)],
             '$22for_iter.3': [(<numba.core.ir.Assign object at 0x780e9c2be990>,
                                22)],
             '$60build_tuple.13': [(<numba.core.ir.Assign object at 0x780e9c2bfad0>,
                                    26)],
             '$66binary_subscr.14': [(<numba.core.ir.Assign object at 0x780e9c2bfc50>,
                                      26)],
             '$binop_add110.26': [(<numba.core.ir.Assign object at 0x780e9c2dcb00>,
                                   26)],
             '$binop_add128.32': [(<numba.core.ir.Assign object at 0x780e9c2dd220>,
                                   26)],
             '$binop_add54.11': [(<numba.core.ir.Assign object at 0x780e9c2bf8c0>,
                                  26)],
             '$binop_add94.21': [(<numba.core.ir.Assign object at 0x780e9c2dc4d0>,
                                  26)],
             '$binop_iand154.40': [(<numba.core.ir.Assign object at 0x780e9c2ddbb0>,
                                    26)],
             '$binop_ior78.18': [(<numba.core.ir.Assign object at 0x780e9c2dc140>,
                                  26)],
             '$binop_lshift148.38': [(<numba.core.ir.Assign object at 0x780e9c2dd910>,
                                      26)],
             '$binop_lshift74.17': [(<numba.core.ir.Assign object at 0x780e9c2bffb0>,
                                     26)],
             '$const10.3': [(<numba.core.ir.Assign object at 0x780e9c2bdfd0>,
                             0)],
             '$const114.27': [(<numba.core.ir.Assign object at 0x780e9c2dcbf0>,
                               26)],
             '$const144.36': [(<numba.core.ir.Assign object at 0x780e9c2dd6a0>,
                               26)],
             '$const170.2': [(<numba.core.ir.Assign object at 0x780e9c2bf560>,
                              168)],
             '$const30.3': [(<numba.core.ir.Assign object at 0x780e9c2bede0>,
                             26)],
             '$const40.6': [(<numba.core.ir.Assign object at 0x780e9c2bf230>,
                             26)],
             '$const70.15': [(<numba.core.ir.Assign object at 0x780e9c2bfd40>,
                              26)],
             '$const8.2': [(<numba.core.ir.Assign object at 0x780e9c2bdeb0>,
                            0)],
             '$const98.22': [(<numba.core.ir.Assign object at 0x780e9c2dc5c0>,
                              26)],
             '$phi22.0': [(<numba.core.ir.Assign object at 0x780e9c2bdd90>, 0)],
             '$phi26.1': [(<numba.core.ir.Assign object at 0x780e9c2bea20>,
                           22)],
             'X': [(<numba.core.ir.Assign object at 0x780e9c2bdb80>, 0)],
             'chunk': [(<numba.core.ir.Assign object at 0x780e9c2bef60>, 26),
                       (<numba.core.ir.Assign object at 0x780e9c2dc740>, 26)],
             'graph_index': [(<numba.core.ir.Assign object at 0x780e9c2bd8b0>,
                              0)],
             'hypervector_size': [(<numba.core.ir.Assign object at 0x780e9c2bd490>,
                                   0)],
             'hypervectors': [(<numba.core.ir.Assign object at 0x780e9c2bd760>,
                               0)],
             'k': [(<numba.core.ir.Assign object at 0x780e9c2bebd0>, 26)],
             'node': [(<numba.core.ir.Assign object at 0x780e9c2bd9a0>, 0)],
             'pos': [(<numba.core.ir.Assign object at 0x780e9c2bf3b0>, 26),
                     (<numba.core.ir.Assign object at 0x780e9c2dcd70>, 26)],
             'symbol': [(<numba.core.ir.Assign object at 0x780e9c2bda90>, 0)]})
SSA violators <numba.core.utils.OrderedSet object at 0x780e9c369850>
Fix SSA violator on var chunk
==== SSA block rewrite pass on 0
Running <numba.core.ssa._FreshVarHandler object at 0x780e9c2bce00>
on stmt: hypervectors = arg(0, name=hypervectors)
on stmt: hypervector_size = arg(1, name=hypervector_size)
on stmt: graph_index = arg(2, name=graph_index)
on stmt: node = arg(3, name=node)
on stmt: symbol = arg(4, name=symbol)
on stmt: X = arg(5, name=X)
on stmt: $const8.2 = const(NoneType, None)
on stmt: $const10.3 = const(NoneType, None)
on stmt: $12build_slice.4 = global(slice: <class 'slice'>)
on stmt: $12build_slice.5 = call $12build_slice.4($const8.2, $const10.3, func=$12build_slice.4, args=(Var($const8.2, graphs.py:124), Var($const10.3, graphs.py:124)), kws=(), vararg=None, varkwarg=None, target=None)
on stmt: $14build_tuple.6 = build_tuple(items=[Var(symbol, graphs.py:121), Var($12build_slice.5, graphs.py:124)])
on stmt: $16binary_subscr.7 = getitem(value=hypervectors, index=$14build_tuple.6, fn=<built-in function getitem>)
on stmt: $20get_iter.8 = getiter(value=$16binary_subscr.7)
on stmt: $phi22.0 = $20get_iter.8
on stmt: jump 22
==== SSA block rewrite pass on 22
Running <numba.core.ssa._FreshVarHandler object at 0x780e9c2bce00>
on stmt: $22for_iter.1 = iternext(value=$phi22.0)
on stmt: $22for_iter.2 = pair_first(value=$22for_iter.1)
on stmt: $22for_iter.3 = pair_second(value=$22for_iter.1)
on stmt: $phi26.1 = $22for_iter.2
on stmt: branch $22for_iter.3, 26, 168
==== SSA block rewrite pass on 26
Running <numba.core.ssa._FreshVarHandler object at 0x780e9c2bce00>
on stmt: k = $phi26.1
on stmt: $const30.3 = const(int, 32)
on stmt: chunk = k // $const30.3
first assign: chunk
replaced with: chunk = k // $const30.3
on stmt: $const40.6 = const(int, 32)
on stmt: pos = k % $const40.6
on stmt: $binop_add54.11 = graph_index + node
on stmt: $60build_tuple.13 = build_tuple(items=[Var($binop_add54.11, graphs.py:128), Var(chunk, graphs.py:125)])
on stmt: $66binary_subscr.14 = getitem(value=X, index=$60build_tuple.13, fn=<built-in function getitem>)
on stmt: $const70.15 = const(int, 1)
on stmt: $binop_lshift74.17 = $const70.15 << pos
on stmt: $binop_ior78.18 = inplace_binop(fn=<built-in function ior>, immutable_fn=<built-in function or_>, lhs=$66binary_subscr.14, rhs=$binop_lshift74.17, static_lhs=Undefined, static_rhs=Undefined)
on stmt: X[$60build_tuple.13] = $binop_ior78.18
on stmt: $binop_add94.21 = k + hypervector_size
on stmt: $const98.22 = const(int, 32)
on stmt: chunk = $binop_add94.21 // $const98.22
replaced with: chunk.1 = $binop_add94.21 // $const98.22
on stmt: $binop_add110.26 = k + hypervector_size
on stmt: $const114.27 = const(int, 32)
on stmt: pos = $binop_add110.26 % $const114.27
on stmt: $binop_add128.32 = graph_index + node
on stmt: $134build_tuple.34 = build_tuple(items=[Var($binop_add128.32, graphs.py:132), Var(chunk, graphs.py:125)])
on stmt: $140binary_subscr.35 = getitem(value=X, index=$134build_tuple.34, fn=<built-in function getitem>)
on stmt: $const144.36 = const(int, 1)
on stmt: $binop_lshift148.38 = $const144.36 << pos
on stmt: $152unary_invert.39 = unary(fn=<built-in function invert>, value=$binop_lshift148.38)
on stmt: $binop_iand154.40 = inplace_binop(fn=<built-in function iand>, immutable_fn=<built-in function and_>, lhs=$140binary_subscr.35, rhs=$152unary_invert.39, static_lhs=Undefined, static_rhs=Undefined)
on stmt: X[$134build_tuple.34] = $binop_iand154.40
on stmt: jump 22
==== SSA block rewrite pass on 168
Running <numba.core.ssa._FreshVarHandler object at 0x780e9c2bce00>
on stmt: $const170.2 = const(NoneType, None)
on stmt: $170return_const.3 = cast(value=$const170.2)
on stmt: return $170return_const.3
Replaced assignments: defaultdict(<class 'list'>,
            {26: [<numba.core.ir.Assign object at 0x780e9c2bd010>,
                  <numba.core.ir.Assign object at 0x780e9c2bce30>]})
==== SSA block rewrite pass on 0
Running <numba.core.ssa._FixSSAVars object at 0x780e9c2bce00>
on stmt: hypervectors = arg(0, name=hypervectors)
on stmt: hypervector_size = arg(1, name=hypervector_size)
on stmt: graph_index = arg(2, name=graph_index)
on stmt: node = arg(3, name=node)
on stmt: symbol = arg(4, name=symbol)
on stmt: X = arg(5, name=X)
on stmt: $const8.2 = const(NoneType, None)
on stmt: $const10.3 = const(NoneType, None)
on stmt: $12build_slice.4 = global(slice: <class 'slice'>)
on stmt: $12build_slice.5 = call $12build_slice.4($const8.2, $const10.3, func=$12build_slice.4, args=(Var($const8.2, graphs.py:124), Var($const10.3, graphs.py:124)), kws=(), vararg=None, varkwarg=None, target=None)
on stmt: $14build_tuple.6 = build_tuple(items=[Var(symbol, graphs.py:121), Var($12build_slice.5, graphs.py:124)])
on stmt: $16binary_subscr.7 = getitem(value=hypervectors, index=$14build_tuple.6, fn=<built-in function getitem>)
on stmt: $20get_iter.8 = getiter(value=$16binary_subscr.7)
on stmt: $phi22.0 = $20get_iter.8
on stmt: jump 22
==== SSA block rewrite pass on 22
Running <numba.core.ssa._FixSSAVars object at 0x780e9c2bce00>
on stmt: $22for_iter.1 = iternext(value=$phi22.0)
on stmt: $22for_iter.2 = pair_first(value=$22for_iter.1)
on stmt: $22for_iter.3 = pair_second(value=$22for_iter.1)
on stmt: $phi26.1 = $22for_iter.2
on stmt: branch $22for_iter.3, 26, 168
==== SSA block rewrite pass on 26
Running <numba.core.ssa._FixSSAVars object at 0x780e9c2bce00>
on stmt: k = $phi26.1
on stmt: $const30.3 = const(int, 32)
on stmt: chunk = k // $const30.3
on stmt: $const40.6 = const(int, 32)
on stmt: pos = k % $const40.6
on stmt: $binop_add54.11 = graph_index + node
on stmt: $60build_tuple.13 = build_tuple(items=[Var($binop_add54.11, graphs.py:128), Var(chunk, graphs.py:125)])
find_def var='chunk' stmt=$60build_tuple.13 = build_tuple(items=[Var($binop_add54.11, graphs.py:128), Var(chunk, graphs.py:125)])
on stmt: $66binary_subscr.14 = getitem(value=X, index=$60build_tuple.13, fn=<built-in function getitem>)
on stmt: $const70.15 = const(int, 1)
on stmt: $binop_lshift74.17 = $const70.15 << pos
on stmt: $binop_ior78.18 = inplace_binop(fn=<built-in function ior>, immutable_fn=<built-in function or_>, lhs=$66binary_subscr.14, rhs=$binop_lshift74.17, static_lhs=Undefined, static_rhs=Undefined)
on stmt: X[$60build_tuple.13] = $binop_ior78.18
on stmt: $binop_add94.21 = k + hypervector_size
on stmt: $const98.22 = const(int, 32)
on stmt: chunk.1 = $binop_add94.21 // $const98.22
on stmt: $binop_add110.26 = k + hypervector_size
on stmt: $const114.27 = const(int, 32)
on stmt: pos = $binop_add110.26 % $const114.27
on stmt: $binop_add128.32 = graph_index + node
on stmt: $134build_tuple.34 = build_tuple(items=[Var($binop_add128.32, graphs.py:132), Var(chunk, graphs.py:125)])
find_def var='chunk' stmt=$134build_tuple.34 = build_tuple(items=[Var($binop_add128.32, graphs.py:132), Var(chunk, graphs.py:125)])
replaced with: $134build_tuple.34 = build_tuple(items=[Var($binop_add128.32, graphs.py:132), Var(chunk.1, graphs.py:130)])
on stmt: $140binary_subscr.35 = getitem(value=X, index=$134build_tuple.34, fn=<built-in function getitem>)
on stmt: $const144.36 = const(int, 1)
on stmt: $binop_lshift148.38 = $const144.36 << pos
on stmt: $152unary_invert.39 = unary(fn=<built-in function invert>, value=$binop_lshift148.38)
on stmt: $binop_iand154.40 = inplace_binop(fn=<built-in function iand>, immutable_fn=<built-in function and_>, lhs=$140binary_subscr.35, rhs=$152unary_invert.39, static_lhs=Undefined, static_rhs=Undefined)
on stmt: X[$134build_tuple.34] = $binop_iand154.40
on stmt: jump 22
==== SSA block rewrite pass on 168
Running <numba.core.ssa._FixSSAVars object at 0x780e9c2bce00>
on stmt: $const170.2 = const(NoneType, None)
on stmt: $170return_const.3 = cast(value=$const170.2)
on stmt: return $170return_const.3
Fix SSA violator on var pos
==== SSA block rewrite pass on 0
Running <numba.core.ssa._FreshVarHandler object at 0x780e9d75ef30>
on stmt: hypervectors = arg(0, name=hypervectors)
on stmt: hypervector_size = arg(1, name=hypervector_size)
on stmt: graph_index = arg(2, name=graph_index)
on stmt: node = arg(3, name=node)
on stmt: symbol = arg(4, name=symbol)
on stmt: X = arg(5, name=X)
on stmt: $const8.2 = const(NoneType, None)
on stmt: $const10.3 = const(NoneType, None)
on stmt: $12build_slice.4 = global(slice: <class 'slice'>)
on stmt: $12build_slice.5 = call $12build_slice.4($const8.2, $const10.3, func=$12build_slice.4, args=(Var($const8.2, graphs.py:124), Var($const10.3, graphs.py:124)), kws=(), vararg=None, varkwarg=None, target=None)
on stmt: $14build_tuple.6 = build_tuple(items=[Var(symbol, graphs.py:121), Var($12build_slice.5, graphs.py:124)])
on stmt: $16binary_subscr.7 = getitem(value=hypervectors, index=$14build_tuple.6, fn=<built-in function getitem>)
on stmt: $20get_iter.8 = getiter(value=$16binary_subscr.7)
on stmt: $phi22.0 = $20get_iter.8
on stmt: jump 22
==== SSA block rewrite pass on 22
Running <numba.core.ssa._FreshVarHandler object at 0x780e9d75ef30>
on stmt: $22for_iter.1 = iternext(value=$phi22.0)
on stmt: $22for_iter.2 = pair_first(value=$22for_iter.1)
on stmt: $22for_iter.3 = pair_second(value=$22for_iter.1)
on stmt: $phi26.1 = $22for_iter.2
on stmt: branch $22for_iter.3, 26, 168
==== SSA block rewrite pass on 26
Running <numba.core.ssa._FreshVarHandler object at 0x780e9d75ef30>
on stmt: k = $phi26.1
on stmt: $const30.3 = const(int, 32)
on stmt: chunk = k // $const30.3
on stmt: $const40.6 = const(int, 32)
on stmt: pos = k % $const40.6
first assign: pos
replaced with: pos = k % $const40.6
on stmt: $binop_add54.11 = graph_index + node
on stmt: $60build_tuple.13 = build_tuple(items=[Var($binop_add54.11, graphs.py:128), Var(chunk, graphs.py:125)])
on stmt: $66binary_subscr.14 = getitem(value=X, index=$60build_tuple.13, fn=<built-in function getitem>)
on stmt: $const70.15 = const(int, 1)
on stmt: $binop_lshift74.17 = $const70.15 << pos
on stmt: $binop_ior78.18 = inplace_binop(fn=<built-in function ior>, immutable_fn=<built-in function or_>, lhs=$66binary_subscr.14, rhs=$binop_lshift74.17, static_lhs=Undefined, static_rhs=Undefined)
on stmt: X[$60build_tuple.13] = $binop_ior78.18
on stmt: $binop_add94.21 = k + hypervector_size
on stmt: $const98.22 = const(int, 32)
on stmt: chunk.1 = $binop_add94.21 // $const98.22
on stmt: $binop_add110.26 = k + hypervector_size
on stmt: $const114.27 = const(int, 32)
on stmt: pos = $binop_add110.26 % $const114.27
replaced with: pos.1 = $binop_add110.26 % $const114.27
on stmt: $binop_add128.32 = graph_index + node
on stmt: $134build_tuple.34 = build_tuple(items=[Var($binop_add128.32, graphs.py:132), Var(chunk.1, graphs.py:130)])
on stmt: $140binary_subscr.35 = getitem(value=X, index=$134build_tuple.34, fn=<built-in function getitem>)
on stmt: $const144.36 = const(int, 1)
on stmt: $binop_lshift148.38 = $const144.36 << pos
on stmt: $152unary_invert.39 = unary(fn=<built-in function invert>, value=$binop_lshift148.38)
on stmt: $binop_iand154.40 = inplace_binop(fn=<built-in function iand>, immutable_fn=<built-in function and_>, lhs=$140binary_subscr.35, rhs=$152unary_invert.39, static_lhs=Undefined, static_rhs=Undefined)
on stmt: X[$134build_tuple.34] = $binop_iand154.40
on stmt: jump 22
==== SSA block rewrite pass on 168
Running <numba.core.ssa._FreshVarHandler object at 0x780e9d75ef30>
on stmt: $const170.2 = const(NoneType, None)
on stmt: $170return_const.3 = cast(value=$const170.2)
on stmt: return $170return_const.3
Replaced assignments: defaultdict(<class 'list'>,
            {26: [<numba.core.ir.Assign object at 0x780e9c2bd130>,
                  <numba.core.ir.Assign object at 0x780e9c345010>]})
==== SSA block rewrite pass on 0
Running <numba.core.ssa._FixSSAVars object at 0x780e9c1f4140>
on stmt: hypervectors = arg(0, name=hypervectors)
on stmt: hypervector_size = arg(1, name=hypervector_size)
on stmt: graph_index = arg(2, name=graph_index)
on stmt: node = arg(3, name=node)
on stmt: symbol = arg(4, name=symbol)
on stmt: X = arg(5, name=X)
on stmt: $const8.2 = const(NoneType, None)
on stmt: $const10.3 = const(NoneType, None)
on stmt: $12build_slice.4 = global(slice: <class 'slice'>)
on stmt: $12build_slice.5 = call $12build_slice.4($const8.2, $const10.3, func=$12build_slice.4, args=(Var($const8.2, graphs.py:124), Var($const10.3, graphs.py:124)), kws=(), vararg=None, varkwarg=None, target=None)
on stmt: $14build_tuple.6 = build_tuple(items=[Var(symbol, graphs.py:121), Var($12build_slice.5, graphs.py:124)])
on stmt: $16binary_subscr.7 = getitem(value=hypervectors, index=$14build_tuple.6, fn=<built-in function getitem>)
on stmt: $20get_iter.8 = getiter(value=$16binary_subscr.7)
on stmt: $phi22.0 = $20get_iter.8
on stmt: jump 22
==== SSA block rewrite pass on 22
Running <numba.core.ssa._FixSSAVars object at 0x780e9c1f4140>
on stmt: $22for_iter.1 = iternext(value=$phi22.0)
on stmt: $22for_iter.2 = pair_first(value=$22for_iter.1)
on stmt: $22for_iter.3 = pair_second(value=$22for_iter.1)
on stmt: $phi26.1 = $22for_iter.2
on stmt: branch $22for_iter.3, 26, 168
==== SSA block rewrite pass on 26
Running <numba.core.ssa._FixSSAVars object at 0x780e9c1f4140>
on stmt: k = $phi26.1
on stmt: $const30.3 = const(int, 32)
on stmt: chunk = k // $const30.3
on stmt: $const40.6 = const(int, 32)
on stmt: pos = k % $const40.6
on stmt: $binop_add54.11 = graph_index + node
on stmt: $60build_tuple.13 = build_tuple(items=[Var($binop_add54.11, graphs.py:128), Var(chunk, graphs.py:125)])
on stmt: $66binary_subscr.14 = getitem(value=X, index=$60build_tuple.13, fn=<built-in function getitem>)
on stmt: $const70.15 = const(int, 1)
on stmt: $binop_lshift74.17 = $const70.15 << pos
find_def var='pos' stmt=$binop_lshift74.17 = $const70.15 << pos
on stmt: $binop_ior78.18 = inplace_binop(fn=<built-in function ior>, immutable_fn=<built-in function or_>, lhs=$66binary_subscr.14, rhs=$binop_lshift74.17, static_lhs=Undefined, static_rhs=Undefined)
on stmt: X[$60build_tuple.13] = $binop_ior78.18
on stmt: $binop_add94.21 = k + hypervector_size
on stmt: $const98.22 = const(int, 32)
on stmt: chunk.1 = $binop_add94.21 // $const98.22
on stmt: $binop_add110.26 = k + hypervector_size
on stmt: $const114.27 = const(int, 32)
on stmt: pos.1 = $binop_add110.26 % $const114.27
on stmt: $binop_add128.32 = graph_index + node
on stmt: $134build_tuple.34 = build_tuple(items=[Var($binop_add128.32, graphs.py:132), Var(chunk.1, graphs.py:130)])
on stmt: $140binary_subscr.35 = getitem(value=X, index=$134build_tuple.34, fn=<built-in function getitem>)
on stmt: $const144.36 = const(int, 1)
on stmt: $binop_lshift148.38 = $const144.36 << pos
find_def var='pos' stmt=$binop_lshift148.38 = $const144.36 << pos
replaced with: $binop_lshift148.38 = $const144.36 << pos.1
on stmt: $152unary_invert.39 = unary(fn=<built-in function invert>, value=$binop_lshift148.38)
on stmt: $binop_iand154.40 = inplace_binop(fn=<built-in function iand>, immutable_fn=<built-in function and_>, lhs=$140binary_subscr.35, rhs=$152unary_invert.39, static_lhs=Undefined, static_rhs=Undefined)
on stmt: X[$134build_tuple.34] = $binop_iand154.40
on stmt: jump 22
==== SSA block rewrite pass on 168
Running <numba.core.ssa._FixSSAVars object at 0x780e9c1f4140>
on stmt: $const170.2 = const(NoneType, None)
on stmt: $170return_const.3 = cast(value=$const170.2)
on stmt: return $170return_const.3
Creating test data
Epoch#1 -- Accuracy train: 0.603 -- Accuracy test: 0.623 
Epoch#2 -- Accuracy train: 0.6325555555555555 -- Accuracy test: 0.63 
Epoch#3 -- Accuracy train: 0.4368888888888889 -- Accuracy test: 0.406 
Epoch#4 -- Accuracy train: 0.6288888888888889 -- Accuracy test: 0.657 
Epoch#5 -- Accuracy train: 0.6585555555555556 -- Accuracy test: 0.636 
Epoch#6 -- Accuracy train: 0.6495555555555556 -- Accuracy test: 0.64 
Epoch#7 -- Accuracy train: 0.6438888888888888 -- Accuracy test: 0.649 
Epoch#8 -- Accuracy train: 0.6688888888888889 -- Accuracy test: 0.687 
Epoch#9 -- Accuracy train: 0.6634444444444444 -- Accuracy test: 0.635 
Epoch#10 -- Accuracy train: 0.6593333333333333 -- Accuracy test: 0.649 
Epoch#11 -- Accuracy train: 0.6683333333333333 -- Accuracy test: 0.65 
Epoch#12 -- Accuracy train: 0.6505555555555556 -- Accuracy test: 0.653 
Epoch#13 -- Accuracy train: 0.6793333333333333 -- Accuracy test: 0.67 
Epoch#14 -- Accuracy train: 0.6532222222222223 -- Accuracy test: 0.655 
Epoch#15 -- Accuracy train: 0.6785555555555556 -- Accuracy test: 0.654 
Epoch#16 -- Accuracy train: 0.63 -- Accuracy test: 0.625 
Epoch#17 -- Accuracy train: 0.6613333333333333 -- Accuracy test: 0.653 
Epoch#18 -- Accuracy train: 0.6691111111111111 -- Accuracy test: 0.686 
Epoch#19 -- Accuracy train: 0.6563333333333333 -- Accuracy test: 0.676 
Epoch#20 -- Accuracy train: 0.6367777777777778 -- Accuracy test: 0.637 
Epoch#21 -- Accuracy train: 0.6682222222222223 -- Accuracy test: 0.67 
Epoch#22 -- Accuracy train: 0.6733333333333333 -- Accuracy test: 0.678 
Epoch#23 -- Accuracy train: 0.6764444444444444 -- Accuracy test: 0.669 
Epoch#24 -- Accuracy train: 0.6373333333333333 -- Accuracy test: 0.642 
Epoch#25 -- Accuracy train: 0.6482222222222223 -- Accuracy test: 0.649 
Epoch#26 -- Accuracy train: 0.664 -- Accuracy test: 0.649 
Epoch#27 -- Accuracy train: 0.658 -- Accuracy test: 0.657 
Epoch#28 -- Accuracy train: 0.6743333333333333 -- Accuracy test: 0.679 
Epoch#29 -- Accuracy train: 0.6611111111111111 -- Accuracy test: 0.661 
Epoch#30 -- Accuracy train: 0.6624444444444444 -- Accuracy test: 0.699 
Epoch#31 -- Accuracy train: 0.6557777777777778 -- Accuracy test: 0.67 
Epoch#32 -- Accuracy train: 0.67 -- Accuracy test: 0.677 
Epoch#33 -- Accuracy train: 0.6716666666666666 -- Accuracy test: 0.679 
Epoch#34 -- Accuracy train: 0.6783333333333333 -- Accuracy test: 0.671 
Epoch#35 -- Accuracy train: 0.6517777777777778 -- Accuracy test: 0.645 
Epoch#36 -- Accuracy train: 0.6702222222222223 -- Accuracy test: 0.671 
Epoch#37 -- Accuracy train: 0.6805555555555556 -- Accuracy test: 0.685 
Epoch#38 -- Accuracy train: 0.6773333333333333 -- Accuracy test: 0.67 
Epoch#39 -- Accuracy train: 0.6712222222222223 -- Accuracy test: 0.679 
Epoch#40 -- Accuracy train: 0.6545555555555556 -- Accuracy test: 0.655 
Epoch#41 -- Accuracy train: 0.6418888888888888 -- Accuracy test: 0.633 
Epoch#42 -- Accuracy train: 0.6695555555555556 -- Accuracy test: 0.681 
Epoch#43 -- Accuracy train: 0.677 -- Accuracy test: 0.666 
Epoch#44 -- Accuracy train: 0.6715555555555556 -- Accuracy test: 0.668 
Epoch#45 -- Accuracy train: 0.6587777777777778 -- Accuracy test: 0.679 
Epoch#46 -- Accuracy train: 0.6794444444444444 -- Accuracy test: 0.682 
Epoch#47 -- Accuracy train: 0.6654444444444444 -- Accuracy test: 0.691 
Epoch#48 -- Accuracy train: 0.6458888888888888 -- Accuracy test: 0.63 
Epoch#49 -- Accuracy train: 0.6358888888888888 -- Accuracy test: 0.613 
Epoch#50 -- Accuracy train: 0.6841111111111111 -- Accuracy test: 0.708 
Epoch#51 -- Accuracy train: 0.6743333333333333 -- Accuracy test: 0.685 
Epoch#52 -- Accuracy train: 0.6653333333333333 -- Accuracy test: 0.658 
Epoch#53 -- Accuracy train: 0.6712222222222223 -- Accuracy test: 0.65 
Epoch#54 -- Accuracy train: 0.6305555555555555 -- Accuracy test: 0.606 
Epoch#55 -- Accuracy train: 0.669 -- Accuracy test: 0.662 
Epoch#56 -- Accuracy train: 0.636 -- Accuracy test: 0.648 
Epoch#57 -- Accuracy train: 0.6593333333333333 -- Accuracy test: 0.634 
Epoch#58 -- Accuracy train: 0.6576666666666666 -- Accuracy test: 0.64 
Epoch#59 -- Accuracy train: 0.6018888888888889 -- Accuracy test: 0.617 
Epoch#60 -- Accuracy train: 0.615 -- Accuracy test: 0.604 
Epoch#61 -- Accuracy train: 0.654 -- Accuracy test: 0.636 
Epoch#62 -- Accuracy train: 0.6608888888888889 -- Accuracy test: 0.663 
Epoch#63 -- Accuracy train: 0.6008888888888889 -- Accuracy test: 0.611 
Epoch#64 -- Accuracy train: 0.6191111111111111 -- Accuracy test: 0.638 
Epoch#65 -- Accuracy train: 0.6482222222222223 -- Accuracy test: 0.669 
Epoch#66 -- Accuracy train: 0.6294444444444445 -- Accuracy test: 0.647 
Epoch#67 -- Accuracy train: 0.6313333333333333 -- Accuracy test: 0.656 
Epoch#68 -- Accuracy train: 0.6592222222222223 -- Accuracy test: 0.678 
Epoch#69 -- Accuracy train: 0.6685555555555556 -- Accuracy test: 0.692 
Epoch#70 -- Accuracy train: 0.6745555555555556 -- Accuracy test: 0.666 
Epoch#71 -- Accuracy train: 0.6782222222222222 -- Accuracy test: 0.687 
Epoch#72 -- Accuracy train: 0.6716666666666666 -- Accuracy test: 0.677 
Epoch#73 -- Accuracy train: 0.6534444444444445 -- Accuracy test: 0.651 
Epoch#74 -- Accuracy train: 0.6696666666666666 -- Accuracy test: 0.676 
Epoch#75 -- Accuracy train: 0.6108888888888889 -- Accuracy test: 0.61 
Epoch#76 -- Accuracy train: 0.6452222222222223 -- Accuracy test: 0.632 
Epoch#77 -- Accuracy train: 0.677 -- Accuracy test: 0.683 
Epoch#78 -- Accuracy train: 0.669 -- Accuracy test: 0.65 
Epoch#79 -- Accuracy train: 0.6736666666666666 -- Accuracy test: 0.666 
Epoch#80 -- Accuracy train: 0.6694444444444444 -- Accuracy test: 0.675 
Epoch#81 -- Accuracy train: 0.6596666666666666 -- Accuracy test: 0.657 
Epoch#82 -- Accuracy train: 0.6718888888888889 -- Accuracy test: 0.679 
Epoch#83 -- Accuracy train: 0.6652222222222223 -- Accuracy test: 0.663 
Epoch#84 -- Accuracy train: 0.6292222222222222 -- Accuracy test: 0.614 
Epoch#85 -- Accuracy train: 0.6763333333333333 -- Accuracy test: 0.669 
Epoch#86 -- Accuracy train: 0.6876666666666666 -- Accuracy test: 0.695 
Epoch#87 -- Accuracy train: 0.6726666666666666 -- Accuracy test: 0.654 
Epoch#88 -- Accuracy train: 0.6681111111111111 -- Accuracy test: 0.678 
Epoch#89 -- Accuracy train: 0.6734444444444444 -- Accuracy test: 0.679 
Epoch#90 -- Accuracy train: 0.6872222222222222 -- Accuracy test: 0.694 
Epoch#91 -- Accuracy train: 0.6816666666666666 -- Accuracy test: 0.674 
Epoch#92 -- Accuracy train: 0.6741111111111111 -- Accuracy test: 0.672 
Epoch#93 -- Accuracy train: 0.6866666666666666 -- Accuracy test: 0.687 
Epoch#94 -- Accuracy train: 0.6922222222222222 -- Accuracy test: 0.673 
Epoch#95 -- Accuracy train: 0.6647777777777778 -- Accuracy test: 0.666 
Epoch#96 -- Accuracy train: 0.6894444444444444 -- Accuracy test: 0.708 
Epoch#97 -- Accuracy train: 0.6625555555555556 -- Accuracy test: 0.657 
Epoch#98 -- Accuracy train: 0.6884444444444444 -- Accuracy test: 0.679 
Epoch#99 -- Accuracy train: 0.6637777777777778 -- Accuracy test: 0.671 
Epoch#100 -- Accuracy train: 0.673 -- Accuracy test: 0.665 
Epoch#101 -- Accuracy train: 0.6845555555555556 -- Accuracy test: 0.664 
Epoch#102 -- Accuracy train: 0.6924444444444444 -- Accuracy test: 0.687 
Epoch#103 -- Accuracy train: 0.6673333333333333 -- Accuracy test: 0.67 
Epoch#104 -- Accuracy train: 0.6638888888888889 -- Accuracy test: 0.657 
Epoch#105 -- Accuracy train: 0.6541111111111111 -- Accuracy test: 0.639 
Epoch#106 -- Accuracy train: 0.6956666666666667 -- Accuracy test: 0.69 
Epoch#107 -- Accuracy train: 0.6674444444444444 -- Accuracy test: 0.674 
Epoch#108 -- Accuracy train: 0.6655555555555556 -- Accuracy test: 0.668 
Epoch#109 -- Accuracy train: 0.703 -- Accuracy test: 0.699 
Epoch#110 -- Accuracy train: 0.6902222222222222 -- Accuracy test: 0.699 
Epoch#111 -- Accuracy train: 0.6566666666666666 -- Accuracy test: 0.664 
Epoch#112 -- Accuracy train: 0.6615555555555556 -- Accuracy test: 0.658 
Epoch#113 -- Accuracy train: 0.6392222222222222 -- Accuracy test: 0.628 
Epoch#114 -- Accuracy train: 0.6633333333333333 -- Accuracy test: 0.656 
Epoch#115 -- Accuracy train: 0.6628888888888889 -- Accuracy test: 0.647 
Epoch#116 -- Accuracy train: 0.6722222222222223 -- Accuracy test: 0.662 
Epoch#117 -- Accuracy train: 0.6472222222222223 -- Accuracy test: 0.655 
Epoch#118 -- Accuracy train: 0.6661111111111111 -- Accuracy test: 0.646 
Epoch#119 -- Accuracy train: 0.6581111111111111 -- Accuracy test: 0.633 
Epoch#120 -- Accuracy train: 0.6357777777777778 -- Accuracy test: 0.649 
Epoch#121 -- Accuracy train: 0.6938888888888889 -- Accuracy test: 0.696 
Epoch#122 -- Accuracy train: 0.6514444444444445 -- Accuracy test: 0.624 
Epoch#123 -- Accuracy train: 0.6738888888888889 -- Accuracy test: 0.673 
Epoch#124 -- Accuracy train: 0.6785555555555556 -- Accuracy test: 0.645 
Epoch#125 -- Accuracy train: 0.685 -- Accuracy test: 0.672 
Epoch#126 -- Accuracy train: 0.6646666666666666 -- Accuracy test: 0.659 
Epoch#127 -- Accuracy train: 0.6668888888888889 -- Accuracy test: 0.665 
Epoch#128 -- Accuracy train: 0.6291111111111111 -- Accuracy test: 0.604 
Epoch#129 -- Accuracy train: 0.6551111111111111 -- Accuracy test: 0.648 
Epoch#130 -- Accuracy train: 0.6816666666666666 -- Accuracy test: 0.682 
Epoch#131 -- Accuracy train: 0.69 -- Accuracy test: 0.694 
Epoch#132 -- Accuracy train: 0.657 -- Accuracy test: 0.67 
Epoch#133 -- Accuracy train: 0.6677777777777778 -- Accuracy test: 0.686 
Epoch#134 -- Accuracy train: 0.665 -- Accuracy test: 0.681 
Epoch#135 -- Accuracy train: 0.6605555555555556 -- Accuracy test: 0.643 
Epoch#136 -- Accuracy train: 0.6906666666666667 -- Accuracy test: 0.7 
Epoch#137 -- Accuracy train: 0.6846666666666666 -- Accuracy test: 0.684 
Epoch#138 -- Accuracy train: 0.6802222222222222 -- Accuracy test: 0.679 
Epoch#139 -- Accuracy train: 0.6752222222222222 -- Accuracy test: 0.672 
Epoch#140 -- Accuracy train: 0.6848888888888889 -- Accuracy test: 0.699 
Epoch#141 -- Accuracy train: 0.6797777777777778 -- Accuracy test: 0.67 
Epoch#142 -- Accuracy train: 0.6121111111111112 -- Accuracy test: 0.636 
Epoch#143 -- Accuracy train: 0.6441111111111111 -- Accuracy test: 0.663 
Epoch#144 -- Accuracy train: 0.6664444444444444 -- Accuracy test: 0.678 
Epoch#145 -- Accuracy train: 0.6513333333333333 -- Accuracy test: 0.653 
Epoch#146 -- Accuracy train: 0.6702222222222223 -- Accuracy test: 0.679 
Epoch#147 -- Accuracy train: 0.6195555555555555 -- Accuracy test: 0.636 
Epoch#148 -- Accuracy train: 0.6595555555555556 -- Accuracy test: 0.648 
Epoch#149 -- Accuracy train: 0.6646666666666666 -- Accuracy test: 0.673 
Epoch#150 -- Accuracy train: 0.5876666666666667 -- Accuracy test: 0.612 
Time: 1547.9819014072418
Clause #0 W:(70 -80) x183 AND x508 AND NOT x9 AND NOT x64 AND NOT x358
Number of literals: 5
Clause #1 W:(34 33) x42 AND NOT x201 AND NOT x301 AND NOT x316 AND NOT x376 AND NOT x394 AND NOT x422
Number of literals: 7
Clause #2 W:(148 145) NOT x8 AND NOT x16 AND NOT x59 AND NOT x246 AND NOT x361 AND NOT x383 AND NOT x417 AND NOT x435
Number of literals: 8
Clause #3 W:(181 -130) NOT x192 AND NOT x315 AND NOT x365 AND NOT x489
Number of literals: 4
Clause #4 W:(-144 147) NOT x42 AND NOT x72 AND NOT x183 AND NOT x482
Number of literals: 4
Clause #5 W:(-52 51) x42 AND x508 AND NOT x9 AND NOT x69 AND NOT x149 AND NOT x421 AND NOT x422
Number of literals: 7
Clause #6 W:(191 -49) x8 AND x325 AND NOT x42 AND NOT x69 AND NOT x156 AND NOT x174 AND NOT x217 AND NOT x299 AND NOT x497 AND NOT x508
Number of literals: 10
Clause #7 W:(-82 -72) NOT x111 AND NOT x113 AND NOT x216 AND NOT x335 AND NOT x361 AND NOT x434
Number of literals: 6
Clause #8 W:(40 -117) x8 AND x9 AND NOT x42 AND NOT x283 AND NOT x339 AND NOT x497
Number of literals: 6
Clause #9 W:(-77 1) x8 AND x9 AND NOT x38 AND NOT x182 AND NOT x187 AND NOT x231 AND NOT x390
Number of literals: 7
Clause #10 W:(-125 58) x8 AND NOT x38 AND NOT x248 AND NOT x305
Number of literals: 4
Clause #11 W:(8 85) x9 AND NOT x215 AND NOT x297 AND NOT x322 AND NOT x377 AND NOT x422
Number of literals: 6
Clause #12 W:(60 -74) NOT x22 AND NOT x121 AND NOT x353 AND NOT x363 AND NOT x435 AND NOT x464 AND NOT x487 AND NOT x494
Number of literals: 8
Clause #13 W:(125 24) NOT x5 AND NOT x8 AND NOT x9 AND NOT x135 AND NOT x146 AND NOT x221 AND NOT x361
Number of literals: 7
Clause #14 W:(17 0) x8 AND x9 AND x20 AND NOT x184 AND NOT x256 AND NOT x309 AND NOT x430 AND NOT x482
Number of literals: 8
Clause #15 W:(-133 16) x42 AND x508 AND NOT x45 AND NOT x127 AND NOT x202 AND NOT x277 AND NOT x324
Number of literals: 7
Clause #16 W:(145 -254) x8 AND x9 AND NOT x39 AND NOT x75 AND NOT x114 AND NOT x126 AND NOT x290 AND NOT x350 AND NOT x395 AND NOT x431
Number of literals: 10
Clause #17 W:(-93 56) x8 AND x9 AND x361 AND NOT x349 AND NOT x466
Number of literals: 5
Clause #18 W:(2 7) NOT x4 AND NOT x77 AND NOT x254 AND NOT x338 AND NOT x360
Number of literals: 5
Clause #19 W:(-31 42) x27
Number of literals: 1
Clause #20 W:(-103 34) x8 AND x9 AND NOT x114 AND NOT x267 AND NOT x477
Number of literals: 5
Clause #21 W:(50 93) x9 AND NOT x14 AND NOT x98 AND NOT x128 AND NOT x285 AND NOT x372 AND NOT x411 AND NOT x425 AND NOT x480 AND NOT x500
Number of literals: 10
Clause #22 W:(92 21) x13
Number of literals: 1
Clause #23 W:(-63 0) NOT x4 AND NOT x59 AND NOT x161 AND NOT x265
Number of literals: 4
Clause #24 W:(-129 -35) x9 AND x18
Number of literals: 2
Clause #25 W:(8 52) x2 AND x8
Number of literals: 2
Clause #26 W:(35 209) x8 AND x9 AND NOT x56 AND NOT x211 AND NOT x227 AND NOT x236 AND NOT x433 AND NOT x460
Number of literals: 8
Clause #27 W:(-16 0) x8 AND NOT x409 AND NOT x497
Number of literals: 3
Clause #28 W:(32 133) x9 AND NOT x170 AND NOT x306 AND NOT x313 AND NOT x407 AND NOT x474 AND NOT x498
Number of literals: 7
Clause #29 W:(-76 -69) NOT x32 AND NOT x77 AND NOT x180 AND NOT x222 AND NOT x277 AND NOT x423 AND NOT x427 AND NOT x494
Number of literals: 8
Clause #30 W:(-48 34) x8 AND NOT x318
Number of literals: 2
Clause #31 W:(49 8) x8 AND x9
Number of literals: 2
Clause #32 W:(-92 -21) NOT x53 AND NOT x102 AND NOT x180 AND NOT x187 AND NOT x198 AND NOT x242 AND NOT x320
Number of literals: 7
Clause #33 W:(-87 -14) x7 AND x8 AND x9 AND NOT x55 AND NOT x59 AND NOT x75 AND NOT x217 AND NOT x239 AND NOT x268 AND NOT x311 AND NOT x350 AND NOT x373 AND NOT x378 AND NOT x410 AND NOT x485 AND NOT x493
Number of literals: 16
Clause #34 W:(-10 133) x9 AND NOT x62 AND NOT x63 AND NOT x185 AND NOT x217 AND NOT x230 AND NOT x271 AND NOT x286 AND NOT x497
Number of literals: 9
Clause #35 W:(-52 59) NOT x66 AND NOT x218 AND NOT x341 AND NOT x395
Number of literals: 4
Clause #36 W:(-25 -80) x8 AND x9 AND NOT x49 AND NOT x93 AND NOT x107 AND NOT x197 AND NOT x205 AND NOT x363 AND NOT x456 AND NOT x460
Number of literals: 10
Clause #37 W:(-52 -28) x8 AND x9 AND NOT x62 AND NOT x119 AND NOT x233 AND NOT x372 AND NOT x429
Number of literals: 7
Clause #38 W:(54 -50) NOT x72 AND NOT x197 AND NOT x302 AND NOT x458 AND NOT x466
Number of literals: 5
Clause #39 W:(-112 -8) x8 AND x9 AND NOT x327
Number of literals: 3
Clause #40 W:(-31 -53) x8 AND x325 AND NOT x28 AND NOT x107 AND NOT x189 AND NOT x316 AND NOT x372 AND NOT x397 AND NOT x399
Number of literals: 9
Clause #41 W:(-235 7) x9 AND NOT x14 AND NOT x18 AND NOT x85 AND NOT x400 AND NOT x444
Number of literals: 6
Clause #42 W:(73 -3) x508 AND NOT x185 AND NOT x202 AND NOT x247 AND NOT x315 AND NOT x404 AND NOT x450 AND NOT x504
Number of literals: 8
Clause #43 W:(-116 -25) NOT x41 AND NOT x42 AND NOT x311 AND NOT x374 AND NOT x395 AND NOT x399 AND NOT x432
Number of literals: 7
Clause #44 W:(-157 95) x9 AND NOT x142 AND NOT x338 AND NOT x440
Number of literals: 4
Clause #45 W:(24 109) NOT x46 AND NOT x202 AND NOT x291 AND NOT x355 AND NOT x368 AND NOT x471
Number of literals: 6
Clause #46 W:(51 80) x8 AND x9 AND NOT x238 AND NOT x386 AND NOT x455
Number of literals: 5
Clause #47 W:(46 -15) x8 AND x9 AND NOT x69 AND NOT x167 AND NOT x268 AND NOT x307
Number of literals: 6
Clause #48 W:(53 -133) x8 AND x9 AND x325 AND NOT x425
Number of literals: 4
Clause #49 W:(73 -33) x8 AND x9 AND NOT x146 AND NOT x221 AND NOT x344 AND NOT x423 AND NOT x434
Number of literals: 7
Clause #50 W:(170 27) x8 AND x9 AND NOT x88 AND NOT x89 AND NOT x299 AND NOT x353 AND NOT x396 AND NOT x493
Number of literals: 8
Clause #51 W:(79 -116) x8 AND x9 AND NOT x63 AND NOT x156 AND NOT x271 AND NOT x319 AND NOT x462
Number of literals: 7
Clause #52 W:(-10 -149) 
Number of literals: 0
Clause #53 W:(3 7) x8 AND x9 AND NOT x305 AND NOT x407
Number of literals: 4
Clause #54 W:(49 2) NOT x230 AND NOT x286 AND NOT x341 AND NOT x490
Number of literals: 4
Clause #55 W:(8 -11) x6
Number of literals: 1
Clause #56 W:(70 -2) NOT x87 AND NOT x139 AND NOT x206 AND NOT x276 AND NOT x397
Number of literals: 5
Clause #57 W:(-41 -2) x9 AND NOT x23 AND NOT x99
Number of literals: 3
Clause #58 W:(89 224) NOT x0 AND NOT x88 AND NOT x186 AND NOT x213 AND NOT x214
Number of literals: 5
Clause #59 W:(3 -14) NOT x77 AND NOT x116 AND NOT x223 AND NOT x285 AND NOT x303 AND NOT x314 AND NOT x411 AND NOT x440 AND NOT x505
Number of literals: 9
Clause #60 W:(23 34) NOT x95 AND NOT x272 AND NOT x511
Number of literals: 3
Clause #61 W:(11 45) NOT x270 AND NOT x438 AND NOT x463 AND NOT x477
Number of literals: 4
Clause #62 W:(54 -35) NOT x37 AND NOT x99 AND NOT x108 AND NOT x113 AND NOT x121 AND NOT x132 AND NOT x166 AND NOT x188 AND NOT x217 AND NOT x369
Number of literals: 10
Clause #63 W:(-152 -132) NOT x46 AND NOT x55 AND NOT x176 AND NOT x196 AND NOT x258 AND NOT x324 AND NOT x465
Number of literals: 7
Clause #64 W:(109 76) NOT x257 AND NOT x266 AND NOT x305 AND NOT x344 AND NOT x433 AND NOT x437 AND NOT x496
Number of literals: 7
Clause #65 W:(-1 42) NOT x198 AND NOT x321 AND NOT x345
Number of literals: 3
Clause #66 W:(-48 -1) x5 AND x8 AND x9 AND NOT x38 AND NOT x142 AND NOT x246 AND NOT x392 AND NOT x444 AND NOT x493
Number of literals: 9
Clause #67 W:(84 21) NOT x61 AND NOT x196 AND NOT x249 AND NOT x375 AND NOT x418 AND NOT x433
Number of literals: 6
Clause #68 W:(-54 138) x9 AND NOT x271 AND NOT x281 AND NOT x379 AND NOT x407 AND NOT x460 AND NOT x486
Number of literals: 7
Clause #69 W:(-96 12) x8 AND x9 AND NOT x30 AND NOT x174 AND NOT x220 AND NOT x304 AND NOT x420
Number of literals: 7
Clause #70 W:(-79 -27) x8 AND x9 AND NOT x179 AND NOT x224 AND NOT x491
Number of literals: 5
Clause #71 W:(169 26) x8 AND x9 AND NOT x32 AND NOT x142 AND NOT x187 AND NOT x193 AND NOT x252 AND NOT x390 AND NOT x400 AND NOT x450 AND NOT x475 AND NOT x501
Number of literals: 12
Clause #72 W:(109 -116) x8 AND x361 AND NOT x42 AND NOT x251 AND NOT x313 AND NOT x356 AND NOT x394
Number of literals: 7
Clause #73 W:(-75 -80) NOT x21 AND NOT x302 AND NOT x325 AND NOT x350 AND NOT x362 AND NOT x384 AND NOT x416
Number of literals: 7
Clause #74 W:(-69 116) NOT x1 AND NOT x2 AND NOT x91 AND NOT x290 AND NOT x496
Number of literals: 5
Clause #75 W:(50 163) x8 AND x9 AND NOT x1 AND NOT x163 AND NOT x447
Number of literals: 5
Clause #76 W:(116 30) x8 AND x9 AND NOT x17 AND NOT x150 AND NOT x221 AND NOT x302 AND NOT x305 AND NOT x491
Number of literals: 8
Clause #77 W:(42 -29) x8 AND NOT x113 AND NOT x259 AND NOT x357 AND NOT x495
Number of literals: 5
Clause #78 W:(-117 -123) x42 AND x508 AND NOT x9 AND NOT x69 AND NOT x103 AND NOT x274
Number of literals: 6
Clause #79 W:(-37 -60) x8 AND NOT x91 AND NOT x105 AND NOT x218 AND NOT x410 AND NOT x427
Number of literals: 6
Clause #80 W:(133 -135) NOT x208 AND NOT x329 AND NOT x499
Number of literals: 3
Clause #81 W:(148 94) NOT x42 AND NOT x115 AND NOT x155 AND NOT x222 AND NOT x363 AND NOT x414 AND NOT x434
Number of literals: 7
Clause #82 W:(-26 102) x8 AND NOT x61 AND NOT x100 AND NOT x115 AND NOT x246 AND NOT x322
Number of literals: 6
Clause #83 W:(-80 143) x8 AND x9 AND NOT x333 AND NOT x435 AND NOT x468 AND NOT x511
Number of literals: 6
Clause #84 W:(-97 13) x8 AND NOT x2 AND NOT x167 AND NOT x168 AND NOT x258 AND NOT x369 AND NOT x382 AND NOT x447
Number of literals: 8
Clause #85 W:(41 17) x8 AND x9 AND NOT x106 AND NOT x134 AND NOT x344
Number of literals: 5
Clause #86 W:(60 -21) NOT x13 AND NOT x79 AND NOT x105 AND NOT x119 AND NOT x142 AND NOT x253 AND NOT x363 AND NOT x483
Number of literals: 8
Clause #87 W:(3 -3) x8 AND x9 AND NOT x222 AND NOT x367 AND NOT x451
Number of literals: 5
Clause #88 W:(-149 -59) x8 AND x9 AND NOT x74 AND NOT x97 AND NOT x224 AND NOT x260 AND NOT x389 AND NOT x420 AND NOT x466 AND NOT x494
Number of literals: 10
Clause #89 W:(-1 18) NOT x6 AND NOT x165 AND NOT x200 AND NOT x235 AND NOT x259 AND NOT x389 AND NOT x434
Number of literals: 7
Clause #90 W:(-45 -120) NOT x47 AND NOT x86 AND NOT x343 AND NOT x444
Number of literals: 4
Clause #91 W:(88 -13) NOT x74 AND NOT x107 AND NOT x297 AND NOT x321 AND NOT x322 AND NOT x359 AND NOT x412 AND NOT x437
Number of literals: 8
Clause #92 W:(-72 -94) NOT x59 AND NOT x192 AND NOT x293 AND NOT x419
Number of literals: 4
Clause #93 W:(208 -18) x8 AND x9 AND NOT x41 AND NOT x129 AND NOT x152 AND NOT x493
Number of literals: 6
Clause #94 W:(86 77) 
Number of literals: 0
Clause #95 W:(33 64) NOT x327
Number of literals: 1
Clause #96 W:(25 -42) x183 AND NOT x90 AND NOT x304
Number of literals: 3
Clause #97 W:(-30 -86) NOT x17 AND NOT x45 AND NOT x82 AND NOT x137 AND NOT x338 AND NOT x414
Number of literals: 6
Clause #98 W:(66 42) NOT x88 AND NOT x95 AND NOT x159 AND NOT x289 AND NOT x325
Number of literals: 5
Clause #99 W:(21 102) x508 AND NOT x146 AND NOT x208 AND NOT x346
Number of literals: 4
Clause #100 W:(-3 142) NOT x50 AND NOT x153 AND NOT x341 AND NOT x412
Number of literals: 4
Clause #101 W:(-37 0) NOT x12 AND NOT x24 AND NOT x172 AND NOT x268 AND NOT x417
Number of literals: 5
Clause #102 W:(164 12) NOT x24 AND NOT x105 AND NOT x338
Number of literals: 3
Clause #103 W:(55 -109) NOT x172 AND NOT x215 AND NOT x480 AND NOT x491
Number of literals: 4
Clause #104 W:(-58 -87) x42 AND x508 AND NOT x74 AND NOT x172 AND NOT x325 AND NOT x401
Number of literals: 6
Clause #105 W:(13 50) NOT x297
Number of literals: 1
Clause #106 W:(125 -109) NOT x423
Number of literals: 1
Clause #107 W:(-9 135) NOT x42 AND NOT x508
Number of literals: 2
Clause #108 W:(-105 9) NOT x3 AND NOT x112 AND NOT x150 AND NOT x380 AND NOT x425 AND NOT x441
Number of literals: 6
Clause #109 W:(-192 214) x183 AND NOT x8 AND NOT x72 AND NOT x169 AND NOT x236 AND NOT x431 AND NOT x466
Number of literals: 7
Clause #110 W:(170 -141) NOT x28 AND NOT x48 AND NOT x65 AND NOT x129 AND NOT x293
Number of literals: 5
Clause #111 W:(15 -150) NOT x106 AND NOT x445
Number of literals: 2
Clause #112 W:(82 57) x8 AND x325 AND NOT x13 AND NOT x19 AND NOT x62 AND NOT x116 AND NOT x289
Number of literals: 7
Clause #113 W:(48 -90) NOT x4 AND NOT x207 AND NOT x217 AND NOT x272 AND NOT x409
Number of literals: 5
Clause #114 W:(-75 -18) NOT x18 AND NOT x42 AND NOT x61 AND NOT x183 AND NOT x271 AND NOT x295 AND NOT x451 AND NOT x482 AND NOT x488
Number of literals: 9
Clause #115 W:(-10 -48) NOT x31 AND NOT x76 AND NOT x298 AND NOT x502
Number of literals: 4
Clause #116 W:(-57 -34) x508 AND NOT x57 AND NOT x247 AND NOT x361 AND NOT x461 AND NOT x511
Number of literals: 6
Clause #117 W:(-93 -72) NOT x174 AND NOT x203 AND NOT x300 AND NOT x373 AND NOT x491
Number of literals: 5
Clause #118 W:(147 -127) NOT x45
Number of literals: 1
Clause #119 W:(-125 105) NOT x42 AND NOT x183 AND NOT x185 AND NOT x508
Number of literals: 4
Clause #120 W:(29 29) NOT x90 AND NOT x110 AND NOT x357 AND NOT x359
Number of literals: 4
Clause #121 W:(14 53) x361 AND NOT x90 AND NOT x142 AND NOT x220 AND NOT x235 AND NOT x245 AND NOT x282 AND NOT x456 AND NOT x471 AND NOT x477 AND NOT x491
Number of literals: 11
Clause #122 W:(-13 -51) NOT x16 AND NOT x22 AND NOT x58 AND NOT x77 AND NOT x143 AND NOT x252 AND NOT x363 AND NOT x395
Number of literals: 8
Clause #123 W:(-46 -21) x8 AND x9 AND x361 AND NOT x71 AND NOT x78 AND NOT x272 AND NOT x416
Number of literals: 7
Clause #124 W:(81 -28) NOT x51 AND NOT x65 AND NOT x144 AND NOT x287
Number of literals: 4
Clause #125 W:(67 118) NOT x57 AND NOT x69 AND NOT x251 AND NOT x287 AND NOT x466
Number of literals: 5
Clause #126 W:(-31 85) NOT x81 AND NOT x141 AND NOT x186 AND NOT x269 AND NOT x309
Number of literals: 5
Clause #127 W:(72 48) x508 AND NOT x54 AND NOT x163 AND NOT x250 AND NOT x251 AND NOT x255 AND NOT x262 AND NOT x405
Number of literals: 8
Clause #128 W:(7 7) NOT x232 AND NOT x430 AND NOT x436
Number of literals: 3
Clause #129 W:(45 105) NOT x8 AND NOT x9 AND NOT x29 AND NOT x114 AND NOT x149 AND NOT x289 AND NOT x325 AND NOT x340
Number of literals: 8
Clause #130 W:(65 140) NOT x38 AND NOT x341
Number of literals: 2
Clause #131 W:(10 41) NOT x0 AND NOT x31 AND NOT x311 AND NOT x492
Number of literals: 4
Clause #132 W:(23 112) NOT x128 AND NOT x152 AND NOT x154
Number of literals: 3
Clause #133 W:(81 20) NOT x24
Number of literals: 1
Clause #134 W:(-63 -120) x508 AND NOT x261 AND NOT x262 AND NOT x291 AND NOT x325
Number of literals: 5
Clause #135 W:(17 17) x42 AND x482 AND x508 AND NOT x8 AND NOT x9 AND NOT x325 AND NOT x466
Number of literals: 7
Clause #136 W:(43 8) NOT x40 AND NOT x118 AND NOT x140 AND NOT x232 AND NOT x251 AND NOT x328
Number of literals: 6
Clause #137 W:(-78 -44) NOT x10 AND NOT x131 AND NOT x228 AND NOT x402 AND NOT x455
Number of literals: 5
Clause #138 W:(-96 55) x325 AND NOT x42 AND NOT x69 AND NOT x158 AND NOT x179 AND NOT x253 AND NOT x320 AND NOT x458
Number of literals: 8
Clause #139 W:(-5 2) NOT x75 AND NOT x80 AND NOT x210 AND NOT x281 AND NOT x283 AND NOT x302 AND NOT x325
Number of literals: 7
Clause #140 W:(72 -155) NOT x96 AND NOT x118 AND NOT x177 AND NOT x465
Number of literals: 4
Clause #141 W:(-130 -119) x325 AND NOT x73 AND NOT x161 AND NOT x181 AND NOT x255 AND NOT x350 AND NOT x394
Number of literals: 7
Clause #142 W:(-164 70) x183 AND x482 AND NOT x86 AND NOT x165 AND NOT x204 AND NOT x498
Number of literals: 6
Clause #143 W:(72 -39) NOT x306 AND NOT x325
Number of literals: 2
Clause #144 W:(-9 10) NOT x8 AND NOT x9 AND NOT x96 AND NOT x151 AND NOT x170 AND NOT x325
Number of literals: 6
Clause #145 W:(30 -63) NOT x112 AND NOT x325 AND NOT x361 AND NOT x428 AND NOT x459
Number of literals: 5
Clause #146 W:(112 -86) NOT x23 AND NOT x36 AND NOT x325 AND NOT x327 AND NOT x455 AND NOT x470
Number of literals: 6
Clause #147 W:(-6 0) NOT x55 AND NOT x57 AND NOT x72 AND NOT x475
Number of literals: 4
Clause #148 W:(98 -35) NOT x82 AND NOT x197 AND NOT x302 AND NOT x324 AND NOT x386 AND NOT x490
Number of literals: 6
Clause #149 W:(36 -118) x482 AND NOT x8
Number of literals: 2
Clause #150 W:(50 9) NOT x67 AND NOT x137 AND NOT x225 AND NOT x320 AND NOT x465
Number of literals: 5
Clause #151 W:(-50 18) x42 AND x482 AND NOT x8 AND NOT x14 AND NOT x133 AND NOT x174 AND NOT x297 AND NOT x373 AND NOT x385
Number of literals: 9
Clause #152 W:(14 112) x183 AND NOT x190 AND NOT x281 AND NOT x405
Number of literals: 4
Clause #153 W:(-16 -2) NOT x42 AND NOT x48 AND NOT x145 AND NOT x146 AND NOT x183 AND NOT x240 AND NOT x420 AND NOT x482 AND NOT x508
Number of literals: 9
Clause #154 W:(-87 12) NOT x60 AND NOT x120 AND NOT x163 AND NOT x286 AND NOT x301 AND NOT x319 AND NOT x418 AND NOT x420
Number of literals: 8
Clause #155 W:(-90 -140) NOT x51 AND NOT x96 AND NOT x196 AND NOT x261 AND NOT x397
Number of literals: 5
Clause #156 W:(-183 72) x8 AND x9 AND NOT x85 AND NOT x146 AND NOT x364 AND NOT x374 AND NOT x466
Number of literals: 7
Clause #157 W:(-27 140) NOT x15 AND NOT x67 AND NOT x138 AND NOT x192 AND NOT x270 AND NOT x396 AND NOT x498 AND NOT x501
Number of literals: 8
Clause #158 W:(323 -58) NOT x135 AND NOT x184 AND NOT x193
Number of literals: 3
Clause #159 W:(165 126) NOT x16 AND NOT x282 AND NOT x345 AND NOT x399 AND NOT x471 AND NOT x493
Number of literals: 6
Clause #160 W:(-238 283) x8 AND x9 AND NOT x66 AND NOT x183 AND NOT x225 AND NOT x400 AND NOT x482 AND NOT x508
Number of literals: 8
Clause #161 W:(16 -44) x482 AND x508 AND NOT x298 AND NOT x419 AND NOT x475 AND NOT x486
Number of literals: 6
Clause #162 W:(-68 45) NOT x30 AND NOT x128 AND NOT x361 AND NOT x404 AND NOT x458
Number of literals: 5
Clause #163 W:(-4 -65) 
Number of literals: 0
Clause #164 W:(-42 -90) x42 AND x183 AND x508 AND NOT x8 AND NOT x112 AND NOT x170 AND NOT x192 AND NOT x259 AND NOT x282 AND NOT x364
Number of literals: 10
Clause #165 W:(-79 -69) NOT x23 AND NOT x189 AND NOT x343 AND NOT x413 AND NOT x420
Number of literals: 5
Clause #166 W:(-95 -28) NOT x372 AND NOT x374 AND NOT x463
Number of literals: 3
Clause #167 W:(47 -113) NOT x228 AND NOT x233 AND NOT x333 AND NOT x403
Number of literals: 4
Clause #168 W:(-35 -107) NOT x268 AND NOT x318 AND NOT x462
Number of literals: 3
Clause #169 W:(-28 -107) NOT x52
Number of literals: 1
Clause #170 W:(154 -28) NOT x5 AND NOT x117 AND NOT x317 AND NOT x327 AND NOT x450 AND NOT x482 AND NOT x498
Number of literals: 7
Clause #171 W:(-145 20) NOT x46 AND NOT x99 AND NOT x183 AND NOT x223
Number of literals: 4
Clause #172 W:(-120 -116) x69 AND NOT x24 AND NOT x328 AND NOT x390 AND NOT x393 AND NOT x438
Number of literals: 6
Clause #173 W:(-96 55) x183 AND x482 AND NOT x1 AND NOT x8 AND NOT x116 AND NOT x247
Number of literals: 6
Clause #174 W:(-40 -132) NOT x38 AND NOT x78 AND NOT x198 AND NOT x252 AND NOT x307 AND NOT x348 AND NOT x424 AND NOT x508
Number of literals: 8
Clause #175 W:(2 -123) NOT x19 AND NOT x68 AND NOT x142 AND NOT x252 AND NOT x306
Number of literals: 5
Clause #176 W:(-8 -66) x42 AND NOT x8 AND NOT x14 AND NOT x121 AND NOT x325 AND NOT x439
Number of literals: 6
Clause #177 W:(-129 182) x42 AND x508 AND NOT x307 AND NOT x349 AND NOT x459 AND NOT x484 AND NOT x489
Number of literals: 7
Clause #178 W:(-21 9) NOT x8 AND NOT x108 AND NOT x435 AND NOT x484
Number of literals: 4
Clause #179 W:(-77 7) NOT x165 AND NOT x302 AND NOT x401 AND NOT x482 AND NOT x508
Number of literals: 5
Clause #180 W:(-21 -62) NOT x267 AND NOT x404 AND NOT x448 AND NOT x470
Number of literals: 4
Clause #181 W:(65 -26) NOT x1 AND NOT x8 AND NOT x85 AND NOT x172 AND NOT x325 AND NOT x430
Number of literals: 6
Clause #182 W:(-85 98) NOT x11 AND NOT x53 AND NOT x349
Number of literals: 3
Clause #183 W:(-125 103) NOT x34 AND NOT x277 AND NOT x279 AND NOT x335 AND NOT x352 AND NOT x452
Number of literals: 6
Clause #184 W:(44 5) x42 AND x482 AND NOT x8 AND NOT x69 AND NOT x302
Number of literals: 5
Clause #185 W:(-208 -122) NOT x28 AND NOT x57
Number of literals: 2
Clause #186 W:(-11 -83) NOT x331 AND NOT x359 AND NOT x435
Number of literals: 3
Clause #187 W:(241 -170) NOT x284 AND NOT x298 AND NOT x299 AND NOT x437 AND NOT x505
Number of literals: 5
Clause #188 W:(29 57) NOT x469
Number of literals: 1
Clause #189 W:(22 -90) NOT x148 AND NOT x239 AND NOT x263 AND NOT x468
Number of literals: 4
Clause #190 W:(114 42) x508 AND NOT x8 AND NOT x34 AND NOT x69 AND NOT x220 AND NOT x264 AND NOT x326
Number of literals: 7
Clause #191 W:(57 -98) NOT x83 AND NOT x256 AND NOT x303
Number of literals: 3
Clause #192 W:(-16 -28) NOT x53 AND NOT x81 AND NOT x98 AND NOT x116 AND NOT x279 AND NOT x316 AND NOT x318 AND NOT x362 AND NOT x381
Number of literals: 9
Clause #193 W:(-106 140) x8 AND x325 AND NOT x354 AND NOT x452 AND NOT x456 AND NOT x508
Number of literals: 6
Clause #194 W:(37 4) NOT x103 AND NOT x227 AND NOT x394 AND NOT x478
Number of literals: 4
Clause #195 W:(7 -97) NOT x157 AND NOT x164 AND NOT x234 AND NOT x433 AND NOT x464 AND NOT x478 AND NOT x482
Number of literals: 7
Clause #196 W:(139 25) NOT x19 AND NOT x20 AND NOT x260 AND NOT x492
Number of literals: 4
Clause #197 W:(-156 12) x482 AND NOT x78 AND NOT x92 AND NOT x151 AND NOT x213 AND NOT x233 AND NOT x248 AND NOT x254 AND NOT x307 AND NOT x325 AND NOT x419 AND NOT x445
Number of literals: 12
Clause #198 W:(-112 26) NOT x210 AND NOT x266 AND NOT x277 AND NOT x397
Number of literals: 4
Clause #199 W:(-152 204) x8 AND x9 AND NOT x60 AND NOT x285 AND NOT x354 AND NOT x363 AND NOT x482
Number of literals: 7
results: Results(training_time_s=1547.9819014072418, inference_time_s=0.21022915840148926, memory_usage_mb=447.07421875, accuracy=0.612, precision=0.6528032024793389, recall=0.612, f1_score=0.4924448211122293)
confusion matrix: [[23, 379], [9, 589]]
reporting runs/2024-12-17T22:13:29/results.toml
reporting runs/2024-12-17T22:13:29/confusion_matrix.csv
reporting runs/2024-12-17T22:13:29/weights.csv
