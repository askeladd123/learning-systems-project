creating new run in runs/2024-12-18T10:37:24
reporting parameters in runs/2024-12-18T10:37:24/params.toml, values:
{'epochs': 100, 'number_of_clauses': 100, 't': 200, 's': 1.856078489544451, 'depth': 5, 'hypervector_size': 1024, 'hypervector_bits': 4, 'message_size': 256, 'message_bits': 1, 'double_hashing': True, 'max_included_literals': 32}
loading dataset from /home/ask/skole-learning-systems/attempt1/data/9x9_medium.csv
hashing dataset
saving dataset report to runs/2024-12-18T10:37:24/dataset.toml, content:
{'filename': '/home/ask/skole-learning-systems/attempt1/data/9x9_medium.csv', 'hash-blake2b': '890c4290fe333d809afccbce690e86f2361831e715feec14a02ec63e1cbd9351f4dc6a1fe73815345cc06dbea56d9f4eb6a110c33463f89e03daf36e8a7cace1', 'dimensions': 9, 'rows': 10000}
X_train shape: (9000,)
X_test shape: (1000,)
Creating training data
bytecode dump:
>          0	NOP(arg=None, lineno=72)
           2	RESUME(arg=0, lineno=72)
           4	LOAD_GLOBAL(arg=1, lineno=75)
          14	LOAD_FAST(arg=1, lineno=75)
          16	LOAD_ATTR(arg=2, lineno=75)
          36	LOAD_CONST(arg=1, lineno=75)
          38	BINARY_SUBSCR(arg=None, lineno=75)
          42	CALL(arg=1, lineno=75)
          50	GET_ITER(arg=None, lineno=75)
>         52	FOR_ITER(arg=50, lineno=75)
          56	STORE_FAST(arg=2, lineno=75)
          58	LOAD_GLOBAL(arg=1, lineno=76)
          68	LOAD_FAST(arg=0, lineno=76)
          70	LOAD_FAST(arg=0, lineno=76)
          72	LOAD_CONST(arg=2, lineno=76)
          74	BINARY_OP(arg=5, lineno=76)
          78	CALL(arg=2, lineno=76)
          86	GET_ITER(arg=None, lineno=76)
>         88	FOR_ITER(arg=30, lineno=76)
          92	STORE_FAST(arg=3, lineno=76)
          94	LOAD_FAST(arg=3, lineno=77)
          96	LOAD_CONST(arg=3, lineno=77)
          98	BINARY_OP(arg=2, lineno=77)
         102	STORE_FAST(arg=4, lineno=77)
         104	LOAD_FAST(arg=3, lineno=78)
         106	LOAD_CONST(arg=3, lineno=78)
         108	BINARY_OP(arg=6, lineno=78)
         112	STORE_FAST(arg=5, lineno=78)
         114	LOAD_FAST(arg=1, lineno=79)
         116	LOAD_FAST(arg=2, lineno=79)
         118	LOAD_FAST(arg=4, lineno=79)
         120	BUILD_TUPLE(arg=2, lineno=79)
         122	COPY(arg=2, lineno=79)
         124	COPY(arg=2, lineno=79)
         126	BINARY_SUBSCR(arg=None, lineno=79)
         130	LOAD_CONST(arg=4, lineno=79)
         132	LOAD_FAST(arg=5, lineno=79)
         134	BINARY_OP(arg=3, lineno=79)
         138	BINARY_OP(arg=20, lineno=79)
         142	SWAP(arg=3, lineno=79)
         144	SWAP(arg=2, lineno=79)
         146	STORE_SUBSCR(arg=None, lineno=79)
         150	JUMP_BACKWARD(arg=32, lineno=79)
>        152	END_FOR(arg=None, lineno=76)
         154	JUMP_BACKWARD(arg=52, lineno=76)
>        156	END_FOR(arg=None, lineno=75)
         158	RETURN_CONST(arg=0, lineno=75)
pending: deque([State(pc_initial=0 nstack_initial=0)])
stack: []
state.pc_initial: State(pc_initial=0 nstack_initial=0)
dispatch pc=0, inst=NOP(arg=None, lineno=72)
stack []
dispatch pc=2, inst=RESUME(arg=0, lineno=72)
stack []
dispatch pc=4, inst=LOAD_GLOBAL(arg=1, lineno=75)
stack []
dispatch pc=14, inst=LOAD_FAST(arg=1, lineno=75)
stack ['$null$4.1', '$4load_global.0']
dispatch pc=16, inst=LOAD_ATTR(arg=2, lineno=75)
stack ['$null$4.1', '$4load_global.0', '$X14.2']
dispatch pc=36, inst=LOAD_CONST(arg=1, lineno=75)
stack ['$null$4.1', '$4load_global.0', '$16load_attr.3']
dispatch pc=38, inst=BINARY_SUBSCR(arg=None, lineno=75)
stack ['$null$4.1', '$4load_global.0', '$16load_attr.3', '$const36.4']
dispatch pc=42, inst=CALL(arg=1, lineno=75)
stack ['$null$4.1', '$4load_global.0', '$38binary_subscr.5']
dispatch pc=50, inst=GET_ITER(arg=None, lineno=75)
stack ['$42call.6']
end state. edges=[Edge(pc=52, stack=('$50get_iter.7',), blockstack=(), npush=0)]
pending: deque([State(pc_initial=52 nstack_initial=1)])
stack: ['$phi52.0']
state.pc_initial: State(pc_initial=52 nstack_initial=1)
dispatch pc=52, inst=FOR_ITER(arg=50, lineno=75)
stack ['$phi52.0']
end state. edges=[Edge(pc=156, stack=('$phi52.0', '$52for_iter.2'), blockstack=(), npush=0), Edge(pc=56, stack=('$phi52.0', '$52for_iter.2'), blockstack=(), npush=0)]
pending: deque([State(pc_initial=156 nstack_initial=2), State(pc_initial=56 nstack_initial=2)])
stack: ['$phi156.0', '$phi156.1']
state.pc_initial: State(pc_initial=156 nstack_initial=2)
dispatch pc=156, inst=END_FOR(arg=None, lineno=75)
stack ['$phi156.0', '$phi156.1']
dispatch pc=158, inst=RETURN_CONST(arg=0, lineno=75)
stack []
end state. edges=[]
pending: deque([State(pc_initial=56 nstack_initial=2)])
stack: ['$phi56.0', '$phi56.1']
state.pc_initial: State(pc_initial=56 nstack_initial=2)
dispatch pc=56, inst=STORE_FAST(arg=2, lineno=75)
stack ['$phi56.0', '$phi56.1']
dispatch pc=58, inst=LOAD_GLOBAL(arg=1, lineno=76)
stack ['$phi56.0']
dispatch pc=68, inst=LOAD_FAST(arg=0, lineno=76)
stack ['$phi56.0', '$null$58.3', '$58load_global.2']
dispatch pc=70, inst=LOAD_FAST(arg=0, lineno=76)
stack ['$phi56.0', '$null$58.3', '$58load_global.2', '$hypervector_size68.4']
dispatch pc=72, inst=LOAD_CONST(arg=2, lineno=76)
stack ['$phi56.0', '$null$58.3', '$58load_global.2', '$hypervector_size68.4', '$hypervector_size70.5']
dispatch pc=74, inst=BINARY_OP(arg=5, lineno=76)
stack ['$phi56.0', '$null$58.3', '$58load_global.2', '$hypervector_size68.4', '$hypervector_size70.5', '$const72.6']
dispatch pc=78, inst=CALL(arg=2, lineno=76)
stack ['$phi56.0', '$null$58.3', '$58load_global.2', '$hypervector_size68.4', '$binop_mul74.7']
dispatch pc=86, inst=GET_ITER(arg=None, lineno=76)
stack ['$phi56.0', '$78call.8']
end state. edges=[Edge(pc=88, stack=('$phi56.0', '$86get_iter.9'), blockstack=(), npush=0)]
pending: deque([State(pc_initial=88 nstack_initial=2)])
stack: ['$phi88.0', '$phi88.1']
state.pc_initial: State(pc_initial=88 nstack_initial=2)
dispatch pc=88, inst=FOR_ITER(arg=30, lineno=76)
stack ['$phi88.0', '$phi88.1']
end state. edges=[Edge(pc=152, stack=('$phi88.0', '$phi88.1', '$88for_iter.3'), blockstack=(), npush=0), Edge(pc=92, stack=('$phi88.0', '$phi88.1', '$88for_iter.3'), blockstack=(), npush=0)]
pending: deque([State(pc_initial=152 nstack_initial=3), State(pc_initial=92 nstack_initial=3)])
stack: ['$phi152.0', '$phi152.1', '$phi152.2']
state.pc_initial: State(pc_initial=152 nstack_initial=3)
dispatch pc=152, inst=END_FOR(arg=None, lineno=76)
stack ['$phi152.0', '$phi152.1', '$phi152.2']
dispatch pc=154, inst=JUMP_BACKWARD(arg=52, lineno=76)
stack ['$phi152.0']
end state. edges=[Edge(pc=52, stack=('$phi152.0',), blockstack=(), npush=0)]
pending: deque([State(pc_initial=92 nstack_initial=3), State(pc_initial=52 nstack_initial=1)])
stack: ['$phi92.0', '$phi92.1', '$phi92.2']
state.pc_initial: State(pc_initial=92 nstack_initial=3)
dispatch pc=92, inst=STORE_FAST(arg=3, lineno=76)
stack ['$phi92.0', '$phi92.1', '$phi92.2']
dispatch pc=94, inst=LOAD_FAST(arg=3, lineno=77)
stack ['$phi92.0', '$phi92.1']
dispatch pc=96, inst=LOAD_CONST(arg=3, lineno=77)
stack ['$phi92.0', '$phi92.1', '$k94.3']
dispatch pc=98, inst=BINARY_OP(arg=2, lineno=77)
stack ['$phi92.0', '$phi92.1', '$k94.3', '$const96.4']
dispatch pc=102, inst=STORE_FAST(arg=4, lineno=77)
stack ['$phi92.0', '$phi92.1', '$binop_floordiv98.5']
dispatch pc=104, inst=LOAD_FAST(arg=3, lineno=78)
stack ['$phi92.0', '$phi92.1']
dispatch pc=106, inst=LOAD_CONST(arg=3, lineno=78)
stack ['$phi92.0', '$phi92.1', '$k104.6']
dispatch pc=108, inst=BINARY_OP(arg=6, lineno=78)
stack ['$phi92.0', '$phi92.1', '$k104.6', '$const106.7']
dispatch pc=112, inst=STORE_FAST(arg=5, lineno=78)
stack ['$phi92.0', '$phi92.1', '$binop_mod108.8']
dispatch pc=114, inst=LOAD_FAST(arg=1, lineno=79)
stack ['$phi92.0', '$phi92.1']
dispatch pc=116, inst=LOAD_FAST(arg=2, lineno=79)
stack ['$phi92.0', '$phi92.1', '$X114.9']
dispatch pc=118, inst=LOAD_FAST(arg=4, lineno=79)
stack ['$phi92.0', '$phi92.1', '$X114.9', '$i116.10']
dispatch pc=120, inst=BUILD_TUPLE(arg=2, lineno=79)
stack ['$phi92.0', '$phi92.1', '$X114.9', '$i116.10', '$chunk118.11']
dispatch pc=122, inst=COPY(arg=2, lineno=79)
stack ['$phi92.0', '$phi92.1', '$X114.9', '$120build_tuple.12']
dispatch pc=124, inst=COPY(arg=2, lineno=79)
stack ['$phi92.0', '$phi92.1', '$X114.9', '$120build_tuple.12', '$X114.9']
dispatch pc=126, inst=BINARY_SUBSCR(arg=None, lineno=79)
stack ['$phi92.0', '$phi92.1', '$X114.9', '$120build_tuple.12', '$X114.9', '$120build_tuple.12']
dispatch pc=130, inst=LOAD_CONST(arg=4, lineno=79)
stack ['$phi92.0', '$phi92.1', '$X114.9', '$120build_tuple.12', '$126binary_subscr.13']
dispatch pc=132, inst=LOAD_FAST(arg=5, lineno=79)
stack ['$phi92.0', '$phi92.1', '$X114.9', '$120build_tuple.12', '$126binary_subscr.13', '$const130.14']
dispatch pc=134, inst=BINARY_OP(arg=3, lineno=79)
stack ['$phi92.0', '$phi92.1', '$X114.9', '$120build_tuple.12', '$126binary_subscr.13', '$const130.14', '$pos132.15']
dispatch pc=138, inst=BINARY_OP(arg=20, lineno=79)
stack ['$phi92.0', '$phi92.1', '$X114.9', '$120build_tuple.12', '$126binary_subscr.13', '$binop_lshift134.16']
dispatch pc=142, inst=SWAP(arg=3, lineno=79)
stack ['$phi92.0', '$phi92.1', '$X114.9', '$120build_tuple.12', '$binop_ior138.17']
dispatch pc=144, inst=SWAP(arg=2, lineno=79)
stack ['$phi92.0', '$phi92.1', '$binop_ior138.17', '$120build_tuple.12', '$X114.9']
dispatch pc=146, inst=STORE_SUBSCR(arg=None, lineno=79)
stack ['$phi92.0', '$phi92.1', '$binop_ior138.17', '$X114.9', '$120build_tuple.12']
dispatch pc=150, inst=JUMP_BACKWARD(arg=32, lineno=79)
stack ['$phi92.0', '$phi92.1']
end state. edges=[Edge(pc=88, stack=('$phi92.0', '$phi92.1'), blockstack=(), npush=0)]
pending: deque([State(pc_initial=52 nstack_initial=1), State(pc_initial=88 nstack_initial=2)])
pending: deque([State(pc_initial=88 nstack_initial=2)])
-------------------------Prune PHIs-------------------------
Used_phis: defaultdict(<class 'set'>,
            {State(pc_initial=0 nstack_initial=0): set(),
             State(pc_initial=52 nstack_initial=1): {'$phi52.0'},
             State(pc_initial=56 nstack_initial=2): {'$phi56.1'},
             State(pc_initial=88 nstack_initial=2): {'$phi88.1'},
             State(pc_initial=92 nstack_initial=3): {'$phi92.2'},
             State(pc_initial=152 nstack_initial=3): set(),
             State(pc_initial=156 nstack_initial=2): set()})
defmap: {'$phi152.2': State(pc_initial=88 nstack_initial=2),
 '$phi156.1': State(pc_initial=52 nstack_initial=1),
 '$phi52.0': State(pc_initial=0 nstack_initial=0),
 '$phi56.1': State(pc_initial=52 nstack_initial=1),
 '$phi88.1': State(pc_initial=56 nstack_initial=2),
 '$phi92.2': State(pc_initial=88 nstack_initial=2)}
phismap: defaultdict(<class 'set'>,
            {'$phi152.0': {('$phi88.0', State(pc_initial=88 nstack_initial=2))},
             '$phi152.1': {('$phi88.1', State(pc_initial=88 nstack_initial=2))},
             '$phi152.2': {('$88for_iter.3',
                            State(pc_initial=88 nstack_initial=2))},
             '$phi156.0': {('$phi52.0', State(pc_initial=52 nstack_initial=1))},
             '$phi156.1': {('$52for_iter.2',
                            State(pc_initial=52 nstack_initial=1))},
             '$phi52.0': {('$50get_iter.7',
                           State(pc_initial=0 nstack_initial=0)),
                          ('$phi152.0',
                           State(pc_initial=152 nstack_initial=3))},
             '$phi56.0': {('$phi52.0', State(pc_initial=52 nstack_initial=1))},
             '$phi56.1': {('$52for_iter.2',
                           State(pc_initial=52 nstack_initial=1))},
             '$phi88.0': {('$phi56.0', State(pc_initial=56 nstack_initial=2)),
                          ('$phi92.0', State(pc_initial=92 nstack_initial=3))},
             '$phi88.1': {('$86get_iter.9',
                           State(pc_initial=56 nstack_initial=2)),
                          ('$phi92.1', State(pc_initial=92 nstack_initial=3))},
             '$phi92.0': {('$phi88.0', State(pc_initial=88 nstack_initial=2))},
             '$phi92.1': {('$phi88.1', State(pc_initial=88 nstack_initial=2))},
             '$phi92.2': {('$88for_iter.3',
                           State(pc_initial=88 nstack_initial=2))}})
changing phismap: defaultdict(<class 'set'>,
            {'$phi152.0': {('$phi56.0', State(pc_initial=56 nstack_initial=2)),
                           ('$phi92.0', State(pc_initial=92 nstack_initial=3))},
             '$phi152.1': {('$86get_iter.9',
                            State(pc_initial=56 nstack_initial=2)),
                           ('$phi92.1', State(pc_initial=92 nstack_initial=3))},
             '$phi152.2': {('$88for_iter.3',
                            State(pc_initial=88 nstack_initial=2))},
             '$phi156.0': {('$50get_iter.7',
                            State(pc_initial=0 nstack_initial=0)),
                           ('$phi152.0',
                            State(pc_initial=152 nstack_initial=3))},
             '$phi156.1': {('$52for_iter.2',
                            State(pc_initial=52 nstack_initial=1))},
             '$phi52.0': {('$50get_iter.7',
                           State(pc_initial=0 nstack_initial=0)),
                          ('$phi56.0', State(pc_initial=56 nstack_initial=2)),
                          ('$phi92.0', State(pc_initial=92 nstack_initial=3))},
             '$phi56.0': {('$50get_iter.7',
                           State(pc_initial=0 nstack_initial=0)),
                          ('$phi56.0', State(pc_initial=56 nstack_initial=2)),
                          ('$phi92.0', State(pc_initial=92 nstack_initial=3))},
             '$phi56.1': {('$52for_iter.2',
                           State(pc_initial=52 nstack_initial=1))},
             '$phi88.0': {('$50get_iter.7',
                           State(pc_initial=0 nstack_initial=0)),
                          ('$phi88.0', State(pc_initial=88 nstack_initial=2))},
             '$phi88.1': {('$86get_iter.9',
                           State(pc_initial=56 nstack_initial=2)),
                          ('$phi88.1', State(pc_initial=88 nstack_initial=2))},
             '$phi92.0': {('$50get_iter.7',
                           State(pc_initial=0 nstack_initial=0))},
             '$phi92.1': {('$86get_iter.9',
                           State(pc_initial=56 nstack_initial=2))},
             '$phi92.2': {('$88for_iter.3',
                           State(pc_initial=88 nstack_initial=2))}})
changing phismap: defaultdict(<class 'set'>,
            {'$phi152.0': {('$50get_iter.7',
                            State(pc_initial=0 nstack_initial=0))},
             '$phi152.1': {('$86get_iter.9',
                            State(pc_initial=56 nstack_initial=2))},
             '$phi152.2': {('$88for_iter.3',
                            State(pc_initial=88 nstack_initial=2))},
             '$phi156.0': {('$50get_iter.7',
                            State(pc_initial=0 nstack_initial=0))},
             '$phi156.1': {('$52for_iter.2',
                            State(pc_initial=52 nstack_initial=1))},
             '$phi52.0': {('$50get_iter.7',
                           State(pc_initial=0 nstack_initial=0))},
             '$phi56.0': {('$50get_iter.7',
                           State(pc_initial=0 nstack_initial=0))},
             '$phi56.1': {('$52for_iter.2',
                           State(pc_initial=52 nstack_initial=1))},
             '$phi88.0': {('$50get_iter.7',
                           State(pc_initial=0 nstack_initial=0))},
             '$phi88.1': {('$86get_iter.9',
                           State(pc_initial=56 nstack_initial=2))},
             '$phi92.0': {('$50get_iter.7',
                           State(pc_initial=0 nstack_initial=0))},
             '$phi92.1': {('$86get_iter.9',
                           State(pc_initial=56 nstack_initial=2))},
             '$phi92.2': {('$88for_iter.3',
                           State(pc_initial=88 nstack_initial=2))}})
changing phismap: defaultdict(<class 'set'>,
            {'$phi152.0': {('$50get_iter.7',
                            State(pc_initial=0 nstack_initial=0))},
             '$phi152.1': {('$86get_iter.9',
                            State(pc_initial=56 nstack_initial=2))},
             '$phi152.2': {('$88for_iter.3',
                            State(pc_initial=88 nstack_initial=2))},
             '$phi156.0': {('$50get_iter.7',
                            State(pc_initial=0 nstack_initial=0))},
             '$phi156.1': {('$52for_iter.2',
                            State(pc_initial=52 nstack_initial=1))},
             '$phi52.0': {('$50get_iter.7',
                           State(pc_initial=0 nstack_initial=0))},
             '$phi56.0': {('$50get_iter.7',
                           State(pc_initial=0 nstack_initial=0))},
             '$phi56.1': {('$52for_iter.2',
                           State(pc_initial=52 nstack_initial=1))},
             '$phi88.0': {('$50get_iter.7',
                           State(pc_initial=0 nstack_initial=0))},
             '$phi88.1': {('$86get_iter.9',
                           State(pc_initial=56 nstack_initial=2))},
             '$phi92.0': {('$50get_iter.7',
                           State(pc_initial=0 nstack_initial=0))},
             '$phi92.1': {('$86get_iter.9',
                           State(pc_initial=56 nstack_initial=2))},
             '$phi92.2': {('$88for_iter.3',
                           State(pc_initial=88 nstack_initial=2))}})
keep phismap: {'$phi52.0': {('$50get_iter.7', State(pc_initial=0 nstack_initial=0))},
 '$phi56.1': {('$52for_iter.2', State(pc_initial=52 nstack_initial=1))},
 '$phi88.1': {('$86get_iter.9', State(pc_initial=56 nstack_initial=2))},
 '$phi92.2': {('$88for_iter.3', State(pc_initial=88 nstack_initial=2))}}
new_out: defaultdict(<class 'dict'>,
            {State(pc_initial=0 nstack_initial=0): {'$phi52.0': '$50get_iter.7'},
             State(pc_initial=52 nstack_initial=1): {'$phi56.1': '$52for_iter.2'},
             State(pc_initial=56 nstack_initial=2): {'$phi88.1': '$86get_iter.9'},
             State(pc_initial=88 nstack_initial=2): {'$phi92.2': '$88for_iter.3'}})
----------------------DONE Prune PHIs-----------------------
block_infos State(pc_initial=0 nstack_initial=0):
AdaptBlockInfo(insts=((0, {}), (2, {}), (4, {'idx': 0, 'res': '$4load_global.0'}), (14, {'res': '$X14.2'}), (16, {'item': '$X14.2', 'res': '$16load_attr.3'}), (36, {'res': '$const36.4'}), (38, {'index': '$const36.4', 'target': '$16load_attr.3', 'res': '$38binary_subscr.5'}), (42, {'func': '$4load_global.0', 'args': ['$38binary_subscr.5'], 'kw_names': None, 'res': '$42call.6'}), (50, {'value': '$42call.6', 'res': '$50get_iter.7'})), outgoing_phis={'$phi52.0': '$50get_iter.7'}, blockstack=(), active_try_block=None, outgoing_edgepushed={52: ('$50get_iter.7',)})
block_infos State(pc_initial=52 nstack_initial=1):
AdaptBlockInfo(insts=((52, {'iterator': '$phi52.0', 'pair': '$52for_iter.1', 'indval': '$52for_iter.2', 'pred': '$52for_iter.3'}),), outgoing_phis={'$phi56.1': '$52for_iter.2'}, blockstack=(), active_try_block=None, outgoing_edgepushed={156: ('$phi52.0', '$52for_iter.2'), 56: ('$phi52.0', '$52for_iter.2')})
block_infos State(pc_initial=56 nstack_initial=2):
AdaptBlockInfo(insts=((56, {'value': '$phi56.1'}), (58, {'idx': 0, 'res': '$58load_global.2'}), (68, {'res': '$hypervector_size68.4'}), (70, {'res': '$hypervector_size70.5'}), (72, {'res': '$const72.6'}), (74, {'op': '*', 'lhs': '$hypervector_size70.5', 'rhs': '$const72.6', 'res': '$binop_mul74.7'}), (78, {'func': '$58load_global.2', 'args': ['$hypervector_size68.4', '$binop_mul74.7'], 'kw_names': None, 'res': '$78call.8'}), (86, {'value': '$78call.8', 'res': '$86get_iter.9'})), outgoing_phis={'$phi88.1': '$86get_iter.9'}, blockstack=(), active_try_block=None, outgoing_edgepushed={88: ('$phi56.0', '$86get_iter.9')})
block_infos State(pc_initial=88 nstack_initial=2):
AdaptBlockInfo(insts=((88, {'iterator': '$phi88.1', 'pair': '$88for_iter.2', 'indval': '$88for_iter.3', 'pred': '$88for_iter.4'}),), outgoing_phis={'$phi92.2': '$88for_iter.3'}, blockstack=(), active_try_block=None, outgoing_edgepushed={152: ('$phi88.0', '$phi88.1', '$88for_iter.3'), 92: ('$phi88.0', '$phi88.1', '$88for_iter.3')})
block_infos State(pc_initial=92 nstack_initial=3):
AdaptBlockInfo(insts=((92, {'value': '$phi92.2'}), (94, {'res': '$k94.3'}), (96, {'res': '$const96.4'}), (98, {'op': '//', 'lhs': '$k94.3', 'rhs': '$const96.4', 'res': '$binop_floordiv98.5'}), (102, {'value': '$binop_floordiv98.5'}), (104, {'res': '$k104.6'}), (106, {'res': '$const106.7'}), (108, {'op': '%', 'lhs': '$k104.6', 'rhs': '$const106.7', 'res': '$binop_mod108.8'}), (112, {'value': '$binop_mod108.8'}), (114, {'res': '$X114.9'}), (116, {'res': '$i116.10'}), (118, {'res': '$chunk118.11'}), (120, {'items': ['$i116.10', '$chunk118.11'], 'res': '$120build_tuple.12'}), (126, {'index': '$120build_tuple.12', 'target': '$X114.9', 'res': '$126binary_subscr.13'}), (130, {'res': '$const130.14'}), (132, {'res': '$pos132.15'}), (134, {'op': '<<', 'lhs': '$const130.14', 'rhs': '$pos132.15', 'res': '$binop_lshift134.16'}), (138, {'op': '|=', 'lhs': '$126binary_subscr.13', 'rhs': '$binop_lshift134.16', 'res': '$binop_ior138.17'}), (146, {'target': '$X114.9', 'index': '$120build_tuple.12', 'value': '$binop_ior138.17'}), (150, {})), outgoing_phis={}, blockstack=(), active_try_block=None, outgoing_edgepushed={88: ('$phi92.0', '$phi92.1')})
block_infos State(pc_initial=152 nstack_initial=3):
AdaptBlockInfo(insts=((154, {}),), outgoing_phis={}, blockstack=(), active_try_block=None, outgoing_edgepushed={52: ('$phi152.0',)})
block_infos State(pc_initial=156 nstack_initial=2):
AdaptBlockInfo(insts=((158, {'retval': '$const158.2', 'castval': '$158return_const.3'}),), outgoing_phis={}, blockstack=(), active_try_block=None, outgoing_edgepushed={})
label 0:
    hypervector_size = arg(0, name=hypervector_size) ['hypervector_size']
    X = arg(1, name=X)                       ['X']
    $4load_global.0 = global(range: <class 'range'>) ['$4load_global.0']
    $16load_attr.3 = getattr(value=X, attr=shape) ['$16load_attr.3', 'X']
    $const36.4 = const(int, 0)               ['$const36.4']
    $38binary_subscr.5 = getitem(value=$16load_attr.3, index=$const36.4, fn=<built-in function getitem>) ['$16load_attr.3', '$38binary_subscr.5', '$const36.4']
    $42call.6 = call $4load_global.0($38binary_subscr.5, func=$4load_global.0, args=[Var($38binary_subscr.5, graphs.py:75)], kws=(), vararg=None, varkwarg=None, target=None) ['$38binary_subscr.5', '$42call.6', '$4load_global.0']
    $50get_iter.7 = getiter(value=$42call.6) ['$42call.6', '$50get_iter.7']
    $phi52.0 = $50get_iter.7                 ['$50get_iter.7', '$phi52.0']
    jump 52                                  []
label 52:
    $52for_iter.1 = iternext(value=$phi52.0) ['$52for_iter.1', '$phi52.0']
    $52for_iter.2 = pair_first(value=$52for_iter.1) ['$52for_iter.1', '$52for_iter.2']
    $52for_iter.3 = pair_second(value=$52for_iter.1) ['$52for_iter.1', '$52for_iter.3']
    $phi56.1 = $52for_iter.2                 ['$52for_iter.2', '$phi56.1']
    branch $52for_iter.3, 56, 156            ['$52for_iter.3']
label 56:
    i = $phi56.1                             ['$phi56.1', 'i']
    $58load_global.2 = global(range: <class 'range'>) ['$58load_global.2']
    $const72.6 = const(int, 2)               ['$const72.6']
    $binop_mul74.7 = hypervector_size * $const72.6 ['$binop_mul74.7', '$const72.6', 'hypervector_size']
    $78call.8 = call $58load_global.2(hypervector_size, $binop_mul74.7, func=$58load_global.2, args=[Var(hypervector_size, graphs.py:72), Var($binop_mul74.7, graphs.py:76)], kws=(), vararg=None, varkwarg=None, target=None) ['$58load_global.2', '$78call.8', '$binop_mul74.7', 'hypervector_size']
    $86get_iter.9 = getiter(value=$78call.8) ['$78call.8', '$86get_iter.9']
    $phi88.1 = $86get_iter.9                 ['$86get_iter.9', '$phi88.1']
    jump 88                                  []
label 88:
    $88for_iter.2 = iternext(value=$phi88.1) ['$88for_iter.2', '$phi88.1']
    $88for_iter.3 = pair_first(value=$88for_iter.2) ['$88for_iter.2', '$88for_iter.3']
    $88for_iter.4 = pair_second(value=$88for_iter.2) ['$88for_iter.2', '$88for_iter.4']
    $phi92.2 = $88for_iter.3                 ['$88for_iter.3', '$phi92.2']
    branch $88for_iter.4, 92, 152            ['$88for_iter.4']
label 92:
    k = $phi92.2                             ['$phi92.2', 'k']
    $const96.4 = const(int, 32)              ['$const96.4']
    chunk = k // $const96.4                  ['$const96.4', 'chunk', 'k']
    $const106.7 = const(int, 32)             ['$const106.7']
    pos = k % $const106.7                    ['$const106.7', 'k', 'pos']
    $120build_tuple.12 = build_tuple(items=[Var(i, graphs.py:75), Var(chunk, graphs.py:77)]) ['$120build_tuple.12', 'chunk', 'i']
    $126binary_subscr.13 = getitem(value=X, index=$120build_tuple.12, fn=<built-in function getitem>) ['$120build_tuple.12', '$126binary_subscr.13', 'X']
    $const130.14 = const(int, 1)             ['$const130.14']
    $binop_lshift134.16 = $const130.14 << pos ['$binop_lshift134.16', '$const130.14', 'pos']
    $binop_ior138.17 = inplace_binop(fn=<built-in function ior>, immutable_fn=<built-in function or_>, lhs=$126binary_subscr.13, rhs=$binop_lshift134.16, static_lhs=Undefined, static_rhs=Undefined) ['$126binary_subscr.13', '$binop_ior138.17', '$binop_lshift134.16']
    X[$120build_tuple.12] = $binop_ior138.17 ['$120build_tuple.12', '$binop_ior138.17', 'X']
    jump 88                                  []
label 152:
    jump 52                                  []
label 156:
    $const158.2 = const(NoneType, None)      ['$const158.2']
    $158return_const.3 = cast(value=$const158.2) ['$158return_const.3', '$const158.2']
    return $158return_const.3                ['$158return_const.3']

==== SSA block analysis pass on 0
Running <numba.core.ssa._GatherDefsHandler object at 0x790c60373da0>
on stmt: hypervector_size = arg(0, name=hypervector_size)
on stmt: X = arg(1, name=X)
on stmt: $4load_global.0 = global(range: <class 'range'>)
on stmt: $16load_attr.3 = getattr(value=X, attr=shape)
on stmt: $const36.4 = const(int, 0)
on stmt: $38binary_subscr.5 = static_getitem(value=$16load_attr.3, index=0, index_var=$const36.4, fn=<built-in function getitem>)
on stmt: $42call.6 = call $4load_global.0($38binary_subscr.5, func=$4load_global.0, args=[Var($38binary_subscr.5, graphs.py:75)], kws=(), vararg=None, varkwarg=None, target=None)
on stmt: $50get_iter.7 = getiter(value=$42call.6)
on stmt: $phi52.0 = $50get_iter.7
on stmt: jump 52
==== SSA block analysis pass on 52
Running <numba.core.ssa._GatherDefsHandler object at 0x790c60373da0>
on stmt: $52for_iter.1 = iternext(value=$phi52.0)
on stmt: $52for_iter.2 = pair_first(value=$52for_iter.1)
on stmt: $52for_iter.3 = pair_second(value=$52for_iter.1)
on stmt: $phi56.1 = $52for_iter.2
on stmt: branch $52for_iter.3, 56, 156
==== SSA block analysis pass on 56
Running <numba.core.ssa._GatherDefsHandler object at 0x790c60373da0>
on stmt: i = $phi56.1
on stmt: $58load_global.2 = global(range: <class 'range'>)
on stmt: $const72.6 = const(int, 2)
on stmt: $binop_mul74.7 = hypervector_size * $const72.6
on stmt: $78call.8 = call $58load_global.2(hypervector_size, $binop_mul74.7, func=$58load_global.2, args=[Var(hypervector_size, graphs.py:72), Var($binop_mul74.7, graphs.py:76)], kws=(), vararg=None, varkwarg=None, target=None)
on stmt: $86get_iter.9 = getiter(value=$78call.8)
on stmt: $phi88.1 = $86get_iter.9
on stmt: jump 88
==== SSA block analysis pass on 88
Running <numba.core.ssa._GatherDefsHandler object at 0x790c60373da0>
on stmt: $88for_iter.2 = iternext(value=$phi88.1)
on stmt: $88for_iter.3 = pair_first(value=$88for_iter.2)
on stmt: $88for_iter.4 = pair_second(value=$88for_iter.2)
on stmt: $phi92.2 = $88for_iter.3
on stmt: branch $88for_iter.4, 92, 152
==== SSA block analysis pass on 92
Running <numba.core.ssa._GatherDefsHandler object at 0x790c60373da0>
on stmt: k = $phi92.2
on stmt: $const96.4 = const(int, 32)
on stmt: chunk = k // $const96.4
on stmt: $const106.7 = const(int, 32)
on stmt: pos = k % $const106.7
on stmt: $120build_tuple.12 = build_tuple(items=[Var(i, graphs.py:75), Var(chunk, graphs.py:77)])
on stmt: $126binary_subscr.13 = getitem(value=X, index=$120build_tuple.12, fn=<built-in function getitem>)
on stmt: $const130.14 = const(int, 1)
on stmt: $binop_lshift134.16 = $const130.14 << pos
on stmt: $binop_ior138.17 = inplace_binop(fn=<built-in function ior>, immutable_fn=<built-in function or_>, lhs=$126binary_subscr.13, rhs=$binop_lshift134.16, static_lhs=Undefined, static_rhs=Undefined)
on stmt: X[$120build_tuple.12] = $binop_ior138.17
on stmt: jump 88
==== SSA block analysis pass on 152
Running <numba.core.ssa._GatherDefsHandler object at 0x790c60373da0>
on stmt: jump 52
==== SSA block analysis pass on 156
Running <numba.core.ssa._GatherDefsHandler object at 0x790c60373da0>
on stmt: $const158.2 = const(NoneType, None)
on stmt: $158return_const.3 = cast(value=$const158.2)
on stmt: return $158return_const.3
defs defaultdict(<class 'list'>,
            {'$120build_tuple.12': [(<numba.core.ir.Assign object at 0x790c6038e3c0>,
                                     92)],
             '$126binary_subscr.13': [(<numba.core.ir.Assign object at 0x790c6038e510>,
                                       92)],
             '$158return_const.3': [(<numba.core.ir.Assign object at 0x790c6038d400>,
                                     156)],
             '$16load_attr.3': [(<numba.core.ir.Assign object at 0x790c6038c680>,
                                 0)],
             '$38binary_subscr.5': [(<numba.core.ir.Assign object at 0x790c60373770>,
                                     0)],
             '$42call.6': [(<numba.core.ir.Assign object at 0x790c6038c9e0>,
                            0)],
             '$4load_global.0': [(<numba.core.ir.Assign object at 0x790c6038c5c0>,
                                  0)],
             '$50get_iter.7': [(<numba.core.ir.Assign object at 0x790c6038ca40>,
                                0)],
             '$52for_iter.1': [(<numba.core.ir.Assign object at 0x790c6038cbf0>,
                                52)],
             '$52for_iter.2': [(<numba.core.ir.Assign object at 0x790c6038cc80>,
                                52)],
             '$52for_iter.3': [(<numba.core.ir.Assign object at 0x790c6038cd10>,
                                52)],
             '$58load_global.2': [(<numba.core.ir.Assign object at 0x790c6038cf20>,
                                   56)],
             '$78call.8': [(<numba.core.ir.Assign object at 0x790c6038d2e0>,
                            56)],
             '$86get_iter.9': [(<numba.core.ir.Assign object at 0x790c6038d370>,
                                56)],
             '$88for_iter.2': [(<numba.core.ir.Assign object at 0x790c6038d4f0>,
                                88)],
             '$88for_iter.3': [(<numba.core.ir.Assign object at 0x790c6038d5b0>,
                                88)],
             '$88for_iter.4': [(<numba.core.ir.Assign object at 0x790c6038d6a0>,
                                88)],
             '$binop_ior138.17': [(<numba.core.ir.Assign object at 0x790c6038e960>,
                                   92)],
             '$binop_lshift134.16': [(<numba.core.ir.Assign object at 0x790c6038e840>,
                                      92)],
             '$binop_mul74.7': [(<numba.core.ir.Assign object at 0x790c6038d1f0>,
                                 56)],
             '$const106.7': [(<numba.core.ir.Assign object at 0x790c6038dee0>,
                              92)],
             '$const130.14': [(<numba.core.ir.Assign object at 0x790c6038e600>,
                               92)],
             '$const158.2': [(<numba.core.ir.Assign object at 0x790c6038e1e0>,
                              156)],
             '$const36.4': [(<numba.core.ir.Assign object at 0x790c6038c500>,
                             0)],
             '$const72.6': [(<numba.core.ir.Assign object at 0x790c6038d100>,
                             56)],
             '$const96.4': [(<numba.core.ir.Assign object at 0x790c6038dac0>,
                             92)],
             '$phi52.0': [(<numba.core.ir.Assign object at 0x790c6038c200>, 0)],
             '$phi56.1': [(<numba.core.ir.Assign object at 0x790c6038cb60>,
                           52)],
             '$phi88.1': [(<numba.core.ir.Assign object at 0x790c6038d040>,
                           56)],
             '$phi92.2': [(<numba.core.ir.Assign object at 0x790c6038d730>,
                           88)],
             'X': [(<numba.core.ir.Assign object at 0x790c6038c050>, 0)],
             'chunk': [(<numba.core.ir.Assign object at 0x790c6038dc10>, 92)],
             'hypervector_size': [(<numba.core.ir.Assign object at 0x790c6038c140>,
                                   0)],
             'i': [(<numba.core.ir.Assign object at 0x790c6038ce60>, 56)],
             'k': [(<numba.core.ir.Assign object at 0x790c6038d8b0>, 92)],
             'pos': [(<numba.core.ir.Assign object at 0x790c6038e030>, 92)]})
SSA violators <numba.core.utils.OrderedSet object at 0x790c60373da0>
bytecode dump:
>          0	NOP(arg=None, lineno=121)
           2	RESUME(arg=0, lineno=121)
           4	LOAD_FAST(arg=0, lineno=124)
           6	LOAD_FAST(arg=4, lineno=124)
           8	LOAD_CONST(arg=0, lineno=124)
          10	LOAD_CONST(arg=0, lineno=124)
          12	BUILD_SLICE(arg=2, lineno=124)
          14	BUILD_TUPLE(arg=2, lineno=124)
          16	BINARY_SUBSCR(arg=None, lineno=124)
          20	GET_ITER(arg=None, lineno=124)
>         22	FOR_ITER(arg=71, lineno=124)
          26	STORE_FAST(arg=6, lineno=124)
          28	LOAD_FAST(arg=6, lineno=125)
          30	LOAD_CONST(arg=1, lineno=125)
          32	BINARY_OP(arg=2, lineno=125)
          36	STORE_FAST(arg=7, lineno=125)
          38	LOAD_FAST(arg=6, lineno=126)
          40	LOAD_CONST(arg=1, lineno=126)
          42	BINARY_OP(arg=6, lineno=126)
          46	STORE_FAST(arg=8, lineno=126)
          48	LOAD_FAST(arg=5, lineno=128)
          50	LOAD_FAST(arg=2, lineno=128)
          52	LOAD_FAST(arg=3, lineno=128)
          54	BINARY_OP(arg=0, lineno=128)
          58	LOAD_FAST(arg=7, lineno=128)
          60	BUILD_TUPLE(arg=2, lineno=128)
          62	COPY(arg=2, lineno=128)
          64	COPY(arg=2, lineno=128)
          66	BINARY_SUBSCR(arg=None, lineno=128)
          70	LOAD_CONST(arg=2, lineno=128)
          72	LOAD_FAST(arg=8, lineno=128)
          74	BINARY_OP(arg=3, lineno=128)
          78	BINARY_OP(arg=20, lineno=128)
          82	SWAP(arg=3, lineno=128)
          84	SWAP(arg=2, lineno=128)
          86	STORE_SUBSCR(arg=None, lineno=128)
          90	LOAD_FAST(arg=6, lineno=130)
          92	LOAD_FAST(arg=1, lineno=130)
          94	BINARY_OP(arg=0, lineno=130)
          98	LOAD_CONST(arg=1, lineno=130)
         100	BINARY_OP(arg=2, lineno=130)
         104	STORE_FAST(arg=7, lineno=130)
         106	LOAD_FAST(arg=6, lineno=131)
         108	LOAD_FAST(arg=1, lineno=131)
         110	BINARY_OP(arg=0, lineno=131)
         114	LOAD_CONST(arg=1, lineno=131)
         116	BINARY_OP(arg=6, lineno=131)
         120	STORE_FAST(arg=8, lineno=131)
         122	LOAD_FAST(arg=5, lineno=132)
         124	LOAD_FAST(arg=2, lineno=132)
         126	LOAD_FAST(arg=3, lineno=132)
         128	BINARY_OP(arg=0, lineno=132)
         132	LOAD_FAST(arg=7, lineno=132)
         134	BUILD_TUPLE(arg=2, lineno=132)
         136	COPY(arg=2, lineno=132)
         138	COPY(arg=2, lineno=132)
         140	BINARY_SUBSCR(arg=None, lineno=132)
         144	LOAD_CONST(arg=2, lineno=132)
         146	LOAD_FAST(arg=8, lineno=132)
         148	BINARY_OP(arg=3, lineno=132)
         152	UNARY_INVERT(arg=None, lineno=132)
         154	BINARY_OP(arg=14, lineno=132)
         158	SWAP(arg=3, lineno=132)
         160	SWAP(arg=2, lineno=132)
         162	STORE_SUBSCR(arg=None, lineno=132)
         166	JUMP_BACKWARD(arg=73, lineno=132)
>        168	END_FOR(arg=None, lineno=124)
         170	RETURN_CONST(arg=0, lineno=124)
pending: deque([State(pc_initial=0 nstack_initial=0)])
stack: []
state.pc_initial: State(pc_initial=0 nstack_initial=0)
dispatch pc=0, inst=NOP(arg=None, lineno=121)
stack []
dispatch pc=2, inst=RESUME(arg=0, lineno=121)
stack []
dispatch pc=4, inst=LOAD_FAST(arg=0, lineno=124)
stack []
dispatch pc=6, inst=LOAD_FAST(arg=4, lineno=124)
stack ['$hypervectors4.0']
dispatch pc=8, inst=LOAD_CONST(arg=0, lineno=124)
stack ['$hypervectors4.0', '$symbol6.1']
dispatch pc=10, inst=LOAD_CONST(arg=0, lineno=124)
stack ['$hypervectors4.0', '$symbol6.1', '$const8.2']
dispatch pc=12, inst=BUILD_SLICE(arg=2, lineno=124)
stack ['$hypervectors4.0', '$symbol6.1', '$const8.2', '$const10.3']
dispatch pc=14, inst=BUILD_TUPLE(arg=2, lineno=124)
stack ['$hypervectors4.0', '$symbol6.1', '$12build_slice.5']
dispatch pc=16, inst=BINARY_SUBSCR(arg=None, lineno=124)
stack ['$hypervectors4.0', '$14build_tuple.6']
dispatch pc=20, inst=GET_ITER(arg=None, lineno=124)
stack ['$16binary_subscr.7']
end state. edges=[Edge(pc=22, stack=('$20get_iter.8',), blockstack=(), npush=0)]
pending: deque([State(pc_initial=22 nstack_initial=1)])
stack: ['$phi22.0']
state.pc_initial: State(pc_initial=22 nstack_initial=1)
dispatch pc=22, inst=FOR_ITER(arg=71, lineno=124)
stack ['$phi22.0']
end state. edges=[Edge(pc=168, stack=('$phi22.0', '$22for_iter.2'), blockstack=(), npush=0), Edge(pc=26, stack=('$phi22.0', '$22for_iter.2'), blockstack=(), npush=0)]
pending: deque([State(pc_initial=168 nstack_initial=2), State(pc_initial=26 nstack_initial=2)])
stack: ['$phi168.0', '$phi168.1']
state.pc_initial: State(pc_initial=168 nstack_initial=2)
dispatch pc=168, inst=END_FOR(arg=None, lineno=124)
stack ['$phi168.0', '$phi168.1']
dispatch pc=170, inst=RETURN_CONST(arg=0, lineno=124)
stack []
end state. edges=[]
pending: deque([State(pc_initial=26 nstack_initial=2)])
stack: ['$phi26.0', '$phi26.1']
state.pc_initial: State(pc_initial=26 nstack_initial=2)
dispatch pc=26, inst=STORE_FAST(arg=6, lineno=124)
stack ['$phi26.0', '$phi26.1']
dispatch pc=28, inst=LOAD_FAST(arg=6, lineno=125)
stack ['$phi26.0']
dispatch pc=30, inst=LOAD_CONST(arg=1, lineno=125)
stack ['$phi26.0', '$k28.2']
dispatch pc=32, inst=BINARY_OP(arg=2, lineno=125)
stack ['$phi26.0', '$k28.2', '$const30.3']
dispatch pc=36, inst=STORE_FAST(arg=7, lineno=125)
stack ['$phi26.0', '$binop_floordiv32.4']
dispatch pc=38, inst=LOAD_FAST(arg=6, lineno=126)
stack ['$phi26.0']
dispatch pc=40, inst=LOAD_CONST(arg=1, lineno=126)
stack ['$phi26.0', '$k38.5']
dispatch pc=42, inst=BINARY_OP(arg=6, lineno=126)
stack ['$phi26.0', '$k38.5', '$const40.6']
dispatch pc=46, inst=STORE_FAST(arg=8, lineno=126)
stack ['$phi26.0', '$binop_mod42.7']
dispatch pc=48, inst=LOAD_FAST(arg=5, lineno=128)
stack ['$phi26.0']
dispatch pc=50, inst=LOAD_FAST(arg=2, lineno=128)
stack ['$phi26.0', '$X48.8']
dispatch pc=52, inst=LOAD_FAST(arg=3, lineno=128)
stack ['$phi26.0', '$X48.8', '$graph_index50.9']
dispatch pc=54, inst=BINARY_OP(arg=0, lineno=128)
stack ['$phi26.0', '$X48.8', '$graph_index50.9', '$node52.10']
dispatch pc=58, inst=LOAD_FAST(arg=7, lineno=128)
stack ['$phi26.0', '$X48.8', '$binop_add54.11']
dispatch pc=60, inst=BUILD_TUPLE(arg=2, lineno=128)
stack ['$phi26.0', '$X48.8', '$binop_add54.11', '$chunk58.12']
dispatch pc=62, inst=COPY(arg=2, lineno=128)
stack ['$phi26.0', '$X48.8', '$60build_tuple.13']
dispatch pc=64, inst=COPY(arg=2, lineno=128)
stack ['$phi26.0', '$X48.8', '$60build_tuple.13', '$X48.8']
dispatch pc=66, inst=BINARY_SUBSCR(arg=None, lineno=128)
stack ['$phi26.0', '$X48.8', '$60build_tuple.13', '$X48.8', '$60build_tuple.13']
dispatch pc=70, inst=LOAD_CONST(arg=2, lineno=128)
stack ['$phi26.0', '$X48.8', '$60build_tuple.13', '$66binary_subscr.14']
dispatch pc=72, inst=LOAD_FAST(arg=8, lineno=128)
stack ['$phi26.0', '$X48.8', '$60build_tuple.13', '$66binary_subscr.14', '$const70.15']
dispatch pc=74, inst=BINARY_OP(arg=3, lineno=128)
stack ['$phi26.0', '$X48.8', '$60build_tuple.13', '$66binary_subscr.14', '$const70.15', '$pos72.16']
dispatch pc=78, inst=BINARY_OP(arg=20, lineno=128)
stack ['$phi26.0', '$X48.8', '$60build_tuple.13', '$66binary_subscr.14', '$binop_lshift74.17']
dispatch pc=82, inst=SWAP(arg=3, lineno=128)
stack ['$phi26.0', '$X48.8', '$60build_tuple.13', '$binop_ior78.18']
dispatch pc=84, inst=SWAP(arg=2, lineno=128)
stack ['$phi26.0', '$binop_ior78.18', '$60build_tuple.13', '$X48.8']
dispatch pc=86, inst=STORE_SUBSCR(arg=None, lineno=128)
stack ['$phi26.0', '$binop_ior78.18', '$X48.8', '$60build_tuple.13']
dispatch pc=90, inst=LOAD_FAST(arg=6, lineno=130)
stack ['$phi26.0']
dispatch pc=92, inst=LOAD_FAST(arg=1, lineno=130)
stack ['$phi26.0', '$k90.19']
dispatch pc=94, inst=BINARY_OP(arg=0, lineno=130)
stack ['$phi26.0', '$k90.19', '$hypervector_size92.20']
dispatch pc=98, inst=LOAD_CONST(arg=1, lineno=130)
stack ['$phi26.0', '$binop_add94.21']
dispatch pc=100, inst=BINARY_OP(arg=2, lineno=130)
stack ['$phi26.0', '$binop_add94.21', '$const98.22']
dispatch pc=104, inst=STORE_FAST(arg=7, lineno=130)
stack ['$phi26.0', '$binop_floordiv100.23']
dispatch pc=106, inst=LOAD_FAST(arg=6, lineno=131)
stack ['$phi26.0']
dispatch pc=108, inst=LOAD_FAST(arg=1, lineno=131)
stack ['$phi26.0', '$k106.24']
dispatch pc=110, inst=BINARY_OP(arg=0, lineno=131)
stack ['$phi26.0', '$k106.24', '$hypervector_size108.25']
dispatch pc=114, inst=LOAD_CONST(arg=1, lineno=131)
stack ['$phi26.0', '$binop_add110.26']
dispatch pc=116, inst=BINARY_OP(arg=6, lineno=131)
stack ['$phi26.0', '$binop_add110.26', '$const114.27']
dispatch pc=120, inst=STORE_FAST(arg=8, lineno=131)
stack ['$phi26.0', '$binop_mod116.28']
dispatch pc=122, inst=LOAD_FAST(arg=5, lineno=132)
stack ['$phi26.0']
dispatch pc=124, inst=LOAD_FAST(arg=2, lineno=132)
stack ['$phi26.0', '$X122.29']
dispatch pc=126, inst=LOAD_FAST(arg=3, lineno=132)
stack ['$phi26.0', '$X122.29', '$graph_index124.30']
dispatch pc=128, inst=BINARY_OP(arg=0, lineno=132)
stack ['$phi26.0', '$X122.29', '$graph_index124.30', '$node126.31']
dispatch pc=132, inst=LOAD_FAST(arg=7, lineno=132)
stack ['$phi26.0', '$X122.29', '$binop_add128.32']
dispatch pc=134, inst=BUILD_TUPLE(arg=2, lineno=132)
stack ['$phi26.0', '$X122.29', '$binop_add128.32', '$chunk132.33']
dispatch pc=136, inst=COPY(arg=2, lineno=132)
stack ['$phi26.0', '$X122.29', '$134build_tuple.34']
dispatch pc=138, inst=COPY(arg=2, lineno=132)
stack ['$phi26.0', '$X122.29', '$134build_tuple.34', '$X122.29']
dispatch pc=140, inst=BINARY_SUBSCR(arg=None, lineno=132)
stack ['$phi26.0', '$X122.29', '$134build_tuple.34', '$X122.29', '$134build_tuple.34']
dispatch pc=144, inst=LOAD_CONST(arg=2, lineno=132)
stack ['$phi26.0', '$X122.29', '$134build_tuple.34', '$140binary_subscr.35']
dispatch pc=146, inst=LOAD_FAST(arg=8, lineno=132)
stack ['$phi26.0', '$X122.29', '$134build_tuple.34', '$140binary_subscr.35', '$const144.36']
dispatch pc=148, inst=BINARY_OP(arg=3, lineno=132)
stack ['$phi26.0', '$X122.29', '$134build_tuple.34', '$140binary_subscr.35', '$const144.36', '$pos146.37']
dispatch pc=152, inst=UNARY_INVERT(arg=None, lineno=132)
stack ['$phi26.0', '$X122.29', '$134build_tuple.34', '$140binary_subscr.35', '$binop_lshift148.38']
dispatch pc=154, inst=BINARY_OP(arg=14, lineno=132)
stack ['$phi26.0', '$X122.29', '$134build_tuple.34', '$140binary_subscr.35', '$152unary_invert.39']
dispatch pc=158, inst=SWAP(arg=3, lineno=132)
stack ['$phi26.0', '$X122.29', '$134build_tuple.34', '$binop_iand154.40']
dispatch pc=160, inst=SWAP(arg=2, lineno=132)
stack ['$phi26.0', '$binop_iand154.40', '$134build_tuple.34', '$X122.29']
dispatch pc=162, inst=STORE_SUBSCR(arg=None, lineno=132)
stack ['$phi26.0', '$binop_iand154.40', '$X122.29', '$134build_tuple.34']
dispatch pc=166, inst=JUMP_BACKWARD(arg=73, lineno=132)
stack ['$phi26.0']
end state. edges=[Edge(pc=22, stack=('$phi26.0',), blockstack=(), npush=0)]
pending: deque([State(pc_initial=22 nstack_initial=1)])
-------------------------Prune PHIs-------------------------
Used_phis: defaultdict(<class 'set'>,
            {State(pc_initial=0 nstack_initial=0): set(),
             State(pc_initial=22 nstack_initial=1): {'$phi22.0'},
             State(pc_initial=26 nstack_initial=2): {'$phi26.1'},
             State(pc_initial=168 nstack_initial=2): set()})
defmap: {'$phi168.1': State(pc_initial=22 nstack_initial=1),
 '$phi22.0': State(pc_initial=0 nstack_initial=0),
 '$phi26.1': State(pc_initial=22 nstack_initial=1)}
phismap: defaultdict(<class 'set'>,
            {'$phi168.0': {('$phi22.0', State(pc_initial=22 nstack_initial=1))},
             '$phi168.1': {('$22for_iter.2',
                            State(pc_initial=22 nstack_initial=1))},
             '$phi22.0': {('$20get_iter.8',
                           State(pc_initial=0 nstack_initial=0)),
                          ('$phi26.0', State(pc_initial=26 nstack_initial=2))},
             '$phi26.0': {('$phi22.0', State(pc_initial=22 nstack_initial=1))},
             '$phi26.1': {('$22for_iter.2',
                           State(pc_initial=22 nstack_initial=1))}})
changing phismap: defaultdict(<class 'set'>,
            {'$phi168.0': {('$20get_iter.8',
                            State(pc_initial=0 nstack_initial=0)),
                           ('$phi26.0', State(pc_initial=26 nstack_initial=2))},
             '$phi168.1': {('$22for_iter.2',
                            State(pc_initial=22 nstack_initial=1))},
             '$phi22.0': {('$20get_iter.8',
                           State(pc_initial=0 nstack_initial=0)),
                          ('$phi22.0', State(pc_initial=22 nstack_initial=1))},
             '$phi26.0': {('$20get_iter.8',
                           State(pc_initial=0 nstack_initial=0))},
             '$phi26.1': {('$22for_iter.2',
                           State(pc_initial=22 nstack_initial=1))}})
changing phismap: defaultdict(<class 'set'>,
            {'$phi168.0': {('$20get_iter.8',
                            State(pc_initial=0 nstack_initial=0))},
             '$phi168.1': {('$22for_iter.2',
                            State(pc_initial=22 nstack_initial=1))},
             '$phi22.0': {('$20get_iter.8',
                           State(pc_initial=0 nstack_initial=0))},
             '$phi26.0': {('$20get_iter.8',
                           State(pc_initial=0 nstack_initial=0))},
             '$phi26.1': {('$22for_iter.2',
                           State(pc_initial=22 nstack_initial=1))}})
changing phismap: defaultdict(<class 'set'>,
            {'$phi168.0': {('$20get_iter.8',
                            State(pc_initial=0 nstack_initial=0))},
             '$phi168.1': {('$22for_iter.2',
                            State(pc_initial=22 nstack_initial=1))},
             '$phi22.0': {('$20get_iter.8',
                           State(pc_initial=0 nstack_initial=0))},
             '$phi26.0': {('$20get_iter.8',
                           State(pc_initial=0 nstack_initial=0))},
             '$phi26.1': {('$22for_iter.2',
                           State(pc_initial=22 nstack_initial=1))}})
keep phismap: {'$phi22.0': {('$20get_iter.8', State(pc_initial=0 nstack_initial=0))},
 '$phi26.1': {('$22for_iter.2', State(pc_initial=22 nstack_initial=1))}}
new_out: defaultdict(<class 'dict'>,
            {State(pc_initial=0 nstack_initial=0): {'$phi22.0': '$20get_iter.8'},
             State(pc_initial=22 nstack_initial=1): {'$phi26.1': '$22for_iter.2'}})
----------------------DONE Prune PHIs-----------------------
block_infos State(pc_initial=0 nstack_initial=0):
AdaptBlockInfo(insts=((0, {}), (2, {}), (4, {'res': '$hypervectors4.0'}), (6, {'res': '$symbol6.1'}), (8, {'res': '$const8.2'}), (10, {'res': '$const10.3'}), (12, {'start': '$const8.2', 'stop': '$const10.3', 'step': None, 'res': '$12build_slice.5', 'slicevar': '$12build_slice.4'}), (14, {'items': ['$symbol6.1', '$12build_slice.5'], 'res': '$14build_tuple.6'}), (16, {'index': '$14build_tuple.6', 'target': '$hypervectors4.0', 'res': '$16binary_subscr.7'}), (20, {'value': '$16binary_subscr.7', 'res': '$20get_iter.8'})), outgoing_phis={'$phi22.0': '$20get_iter.8'}, blockstack=(), active_try_block=None, outgoing_edgepushed={22: ('$20get_iter.8',)})
block_infos State(pc_initial=22 nstack_initial=1):
AdaptBlockInfo(insts=((22, {'iterator': '$phi22.0', 'pair': '$22for_iter.1', 'indval': '$22for_iter.2', 'pred': '$22for_iter.3'}),), outgoing_phis={'$phi26.1': '$22for_iter.2'}, blockstack=(), active_try_block=None, outgoing_edgepushed={168: ('$phi22.0', '$22for_iter.2'), 26: ('$phi22.0', '$22for_iter.2')})
block_infos State(pc_initial=26 nstack_initial=2):
AdaptBlockInfo(insts=((26, {'value': '$phi26.1'}), (28, {'res': '$k28.2'}), (30, {'res': '$const30.3'}), (32, {'op': '//', 'lhs': '$k28.2', 'rhs': '$const30.3', 'res': '$binop_floordiv32.4'}), (36, {'value': '$binop_floordiv32.4'}), (38, {'res': '$k38.5'}), (40, {'res': '$const40.6'}), (42, {'op': '%', 'lhs': '$k38.5', 'rhs': '$const40.6', 'res': '$binop_mod42.7'}), (46, {'value': '$binop_mod42.7'}), (48, {'res': '$X48.8'}), (50, {'res': '$graph_index50.9'}), (52, {'res': '$node52.10'}), (54, {'op': '+', 'lhs': '$graph_index50.9', 'rhs': '$node52.10', 'res': '$binop_add54.11'}), (58, {'res': '$chunk58.12'}), (60, {'items': ['$binop_add54.11', '$chunk58.12'], 'res': '$60build_tuple.13'}), (66, {'index': '$60build_tuple.13', 'target': '$X48.8', 'res': '$66binary_subscr.14'}), (70, {'res': '$const70.15'}), (72, {'res': '$pos72.16'}), (74, {'op': '<<', 'lhs': '$const70.15', 'rhs': '$pos72.16', 'res': '$binop_lshift74.17'}), (78, {'op': '|=', 'lhs': '$66binary_subscr.14', 'rhs': '$binop_lshift74.17', 'res': '$binop_ior78.18'}), (86, {'target': '$X48.8', 'index': '$60build_tuple.13', 'value': '$binop_ior78.18'}), (90, {'res': '$k90.19'}), (92, {'res': '$hypervector_size92.20'}), (94, {'op': '+', 'lhs': '$k90.19', 'rhs': '$hypervector_size92.20', 'res': '$binop_add94.21'}), (98, {'res': '$const98.22'}), (100, {'op': '//', 'lhs': '$binop_add94.21', 'rhs': '$const98.22', 'res': '$binop_floordiv100.23'}), (104, {'value': '$binop_floordiv100.23'}), (106, {'res': '$k106.24'}), (108, {'res': '$hypervector_size108.25'}), (110, {'op': '+', 'lhs': '$k106.24', 'rhs': '$hypervector_size108.25', 'res': '$binop_add110.26'}), (114, {'res': '$const114.27'}), (116, {'op': '%', 'lhs': '$binop_add110.26', 'rhs': '$const114.27', 'res': '$binop_mod116.28'}), (120, {'value': '$binop_mod116.28'}), (122, {'res': '$X122.29'}), (124, {'res': '$graph_index124.30'}), (126, {'res': '$node126.31'}), (128, {'op': '+', 'lhs': '$graph_index124.30', 'rhs': '$node126.31', 'res': '$binop_add128.32'}), (132, {'res': '$chunk132.33'}), (134, {'items': ['$binop_add128.32', '$chunk132.33'], 'res': '$134build_tuple.34'}), (140, {'index': '$134build_tuple.34', 'target': '$X122.29', 'res': '$140binary_subscr.35'}), (144, {'res': '$const144.36'}), (146, {'res': '$pos146.37'}), (148, {'op': '<<', 'lhs': '$const144.36', 'rhs': '$pos146.37', 'res': '$binop_lshift148.38'}), (152, {'value': '$binop_lshift148.38', 'res': '$152unary_invert.39'}), (154, {'op': '&=', 'lhs': '$140binary_subscr.35', 'rhs': '$152unary_invert.39', 'res': '$binop_iand154.40'}), (162, {'target': '$X122.29', 'index': '$134build_tuple.34', 'value': '$binop_iand154.40'}), (166, {})), outgoing_phis={}, blockstack=(), active_try_block=None, outgoing_edgepushed={22: ('$phi26.0',)})
block_infos State(pc_initial=168 nstack_initial=2):
AdaptBlockInfo(insts=((170, {'retval': '$const170.2', 'castval': '$170return_const.3'}),), outgoing_phis={}, blockstack=(), active_try_block=None, outgoing_edgepushed={})
label 0:
    hypervectors = arg(0, name=hypervectors) ['hypervectors']
    hypervector_size = arg(1, name=hypervector_size) ['hypervector_size']
    graph_index = arg(2, name=graph_index)   ['graph_index']
    node = arg(3, name=node)                 ['node']
    symbol = arg(4, name=symbol)             ['symbol']
    X = arg(5, name=X)                       ['X']
    $const8.2 = const(NoneType, None)        ['$const8.2']
    $const10.3 = const(NoneType, None)       ['$const10.3']
    $12build_slice.4 = global(slice: <class 'slice'>) ['$12build_slice.4']
    $12build_slice.5 = call $12build_slice.4($const8.2, $const10.3, func=$12build_slice.4, args=(Var($const8.2, graphs.py:124), Var($const10.3, graphs.py:124)), kws=(), vararg=None, varkwarg=None, target=None) ['$12build_slice.4', '$12build_slice.5', '$const10.3', '$const8.2']
    $14build_tuple.6 = build_tuple(items=[Var(symbol, graphs.py:121), Var($12build_slice.5, graphs.py:124)]) ['$12build_slice.5', '$14build_tuple.6', 'symbol']
    $16binary_subscr.7 = getitem(value=hypervectors, index=$14build_tuple.6, fn=<built-in function getitem>) ['$14build_tuple.6', '$16binary_subscr.7', 'hypervectors']
    $20get_iter.8 = getiter(value=$16binary_subscr.7) ['$16binary_subscr.7', '$20get_iter.8']
    $phi22.0 = $20get_iter.8                 ['$20get_iter.8', '$phi22.0']
    jump 22                                  []
label 22:
    $22for_iter.1 = iternext(value=$phi22.0) ['$22for_iter.1', '$phi22.0']
    $22for_iter.2 = pair_first(value=$22for_iter.1) ['$22for_iter.1', '$22for_iter.2']
    $22for_iter.3 = pair_second(value=$22for_iter.1) ['$22for_iter.1', '$22for_iter.3']
    $phi26.1 = $22for_iter.2                 ['$22for_iter.2', '$phi26.1']
    branch $22for_iter.3, 26, 168            ['$22for_iter.3']
label 26:
    k = $phi26.1                             ['$phi26.1', 'k']
    $const30.3 = const(int, 32)              ['$const30.3']
    chunk = k // $const30.3                  ['$const30.3', 'chunk', 'k']
    $const40.6 = const(int, 32)              ['$const40.6']
    pos = k % $const40.6                     ['$const40.6', 'k', 'pos']
    $binop_add54.11 = graph_index + node     ['$binop_add54.11', 'graph_index', 'node']
    $60build_tuple.13 = build_tuple(items=[Var($binop_add54.11, graphs.py:128), Var(chunk, graphs.py:125)]) ['$60build_tuple.13', '$binop_add54.11', 'chunk']
    $66binary_subscr.14 = getitem(value=X, index=$60build_tuple.13, fn=<built-in function getitem>) ['$60build_tuple.13', '$66binary_subscr.14', 'X']
    $const70.15 = const(int, 1)              ['$const70.15']
    $binop_lshift74.17 = $const70.15 << pos  ['$binop_lshift74.17', '$const70.15', 'pos']
    $binop_ior78.18 = inplace_binop(fn=<built-in function ior>, immutable_fn=<built-in function or_>, lhs=$66binary_subscr.14, rhs=$binop_lshift74.17, static_lhs=Undefined, static_rhs=Undefined) ['$66binary_subscr.14', '$binop_ior78.18', '$binop_lshift74.17']
    X[$60build_tuple.13] = $binop_ior78.18   ['$60build_tuple.13', '$binop_ior78.18', 'X']
    $binop_add94.21 = k + hypervector_size   ['$binop_add94.21', 'hypervector_size', 'k']
    $const98.22 = const(int, 32)             ['$const98.22']
    chunk = $binop_add94.21 // $const98.22   ['$binop_add94.21', '$const98.22', 'chunk']
    $binop_add110.26 = k + hypervector_size  ['$binop_add110.26', 'hypervector_size', 'k']
    $const114.27 = const(int, 32)            ['$const114.27']
    pos = $binop_add110.26 % $const114.27    ['$binop_add110.26', '$const114.27', 'pos']
    $binop_add128.32 = graph_index + node    ['$binop_add128.32', 'graph_index', 'node']
    $134build_tuple.34 = build_tuple(items=[Var($binop_add128.32, graphs.py:132), Var(chunk, graphs.py:125)]) ['$134build_tuple.34', '$binop_add128.32', 'chunk']
    $140binary_subscr.35 = getitem(value=X, index=$134build_tuple.34, fn=<built-in function getitem>) ['$134build_tuple.34', '$140binary_subscr.35', 'X']
    $const144.36 = const(int, 1)             ['$const144.36']
    $binop_lshift148.38 = $const144.36 << pos ['$binop_lshift148.38', '$const144.36', 'pos']
    $152unary_invert.39 = unary(fn=<built-in function invert>, value=$binop_lshift148.38) ['$152unary_invert.39', '$binop_lshift148.38']
    $binop_iand154.40 = inplace_binop(fn=<built-in function iand>, immutable_fn=<built-in function and_>, lhs=$140binary_subscr.35, rhs=$152unary_invert.39, static_lhs=Undefined, static_rhs=Undefined) ['$140binary_subscr.35', '$152unary_invert.39', '$binop_iand154.40']
    X[$134build_tuple.34] = $binop_iand154.40 ['$134build_tuple.34', '$binop_iand154.40', 'X']
    jump 22                                  []
label 168:
    $const170.2 = const(NoneType, None)      ['$const170.2']
    $170return_const.3 = cast(value=$const170.2) ['$170return_const.3', '$const170.2']
    return $170return_const.3                ['$170return_const.3']

==== SSA block analysis pass on 0
Running <numba.core.ssa._GatherDefsHandler object at 0x790c602f2f90>
on stmt: hypervectors = arg(0, name=hypervectors)
on stmt: hypervector_size = arg(1, name=hypervector_size)
on stmt: graph_index = arg(2, name=graph_index)
on stmt: node = arg(3, name=node)
on stmt: symbol = arg(4, name=symbol)
on stmt: X = arg(5, name=X)
on stmt: $const8.2 = const(NoneType, None)
on stmt: $const10.3 = const(NoneType, None)
on stmt: $12build_slice.4 = global(slice: <class 'slice'>)
on stmt: $12build_slice.5 = call $12build_slice.4($const8.2, $const10.3, func=$12build_slice.4, args=(Var($const8.2, graphs.py:124), Var($const10.3, graphs.py:124)), kws=(), vararg=None, varkwarg=None, target=None)
on stmt: $14build_tuple.6 = build_tuple(items=[Var(symbol, graphs.py:121), Var($12build_slice.5, graphs.py:124)])
on stmt: $16binary_subscr.7 = getitem(value=hypervectors, index=$14build_tuple.6, fn=<built-in function getitem>)
on stmt: $20get_iter.8 = getiter(value=$16binary_subscr.7)
on stmt: $phi22.0 = $20get_iter.8
on stmt: jump 22
==== SSA block analysis pass on 22
Running <numba.core.ssa._GatherDefsHandler object at 0x790c602f2f90>
on stmt: $22for_iter.1 = iternext(value=$phi22.0)
on stmt: $22for_iter.2 = pair_first(value=$22for_iter.1)
on stmt: $22for_iter.3 = pair_second(value=$22for_iter.1)
on stmt: $phi26.1 = $22for_iter.2
on stmt: branch $22for_iter.3, 26, 168
==== SSA block analysis pass on 26
Running <numba.core.ssa._GatherDefsHandler object at 0x790c602f2f90>
on stmt: k = $phi26.1
on stmt: $const30.3 = const(int, 32)
on stmt: chunk = k // $const30.3
on stmt: $const40.6 = const(int, 32)
on stmt: pos = k % $const40.6
on stmt: $binop_add54.11 = graph_index + node
on stmt: $60build_tuple.13 = build_tuple(items=[Var($binop_add54.11, graphs.py:128), Var(chunk, graphs.py:125)])
on stmt: $66binary_subscr.14 = getitem(value=X, index=$60build_tuple.13, fn=<built-in function getitem>)
on stmt: $const70.15 = const(int, 1)
on stmt: $binop_lshift74.17 = $const70.15 << pos
on stmt: $binop_ior78.18 = inplace_binop(fn=<built-in function ior>, immutable_fn=<built-in function or_>, lhs=$66binary_subscr.14, rhs=$binop_lshift74.17, static_lhs=Undefined, static_rhs=Undefined)
on stmt: X[$60build_tuple.13] = $binop_ior78.18
on stmt: $binop_add94.21 = k + hypervector_size
on stmt: $const98.22 = const(int, 32)
on stmt: chunk = $binop_add94.21 // $const98.22
on stmt: $binop_add110.26 = k + hypervector_size
on stmt: $const114.27 = const(int, 32)
on stmt: pos = $binop_add110.26 % $const114.27
on stmt: $binop_add128.32 = graph_index + node
on stmt: $134build_tuple.34 = build_tuple(items=[Var($binop_add128.32, graphs.py:132), Var(chunk, graphs.py:125)])
on stmt: $140binary_subscr.35 = getitem(value=X, index=$134build_tuple.34, fn=<built-in function getitem>)
on stmt: $const144.36 = const(int, 1)
on stmt: $binop_lshift148.38 = $const144.36 << pos
on stmt: $152unary_invert.39 = unary(fn=<built-in function invert>, value=$binop_lshift148.38)
on stmt: $binop_iand154.40 = inplace_binop(fn=<built-in function iand>, immutable_fn=<built-in function and_>, lhs=$140binary_subscr.35, rhs=$152unary_invert.39, static_lhs=Undefined, static_rhs=Undefined)
on stmt: X[$134build_tuple.34] = $binop_iand154.40
on stmt: jump 22
==== SSA block analysis pass on 168
Running <numba.core.ssa._GatherDefsHandler object at 0x790c602f2f90>
on stmt: $const170.2 = const(NoneType, None)
on stmt: $170return_const.3 = cast(value=$const170.2)
on stmt: return $170return_const.3
defs defaultdict(<class 'list'>,
            {'$12build_slice.4': [(<numba.core.ir.Assign object at 0x790c60318260>,
                                   0)],
             '$12build_slice.5': [(<numba.core.ir.Assign object at 0x790c60318350>,
                                   0)],
             '$134build_tuple.34': [(<numba.core.ir.Assign object at 0x790c6031b590>,
                                     26)],
             '$140binary_subscr.35': [(<numba.core.ir.Assign object at 0x790c6031b710>,
                                       26)],
             '$14build_tuple.6': [(<numba.core.ir.Assign object at 0x790c60318470>,
                                   0)],
             '$152unary_invert.39': [(<numba.core.ir.Assign object at 0x790c6031bb90>,
                                      26)],
             '$16binary_subscr.7': [(<numba.core.ir.Assign object at 0x790c603185c0>,
                                     0)],
             '$170return_const.3': [(<numba.core.ir.Assign object at 0x790c60319b20>,
                                     168)],
             '$20get_iter.8': [(<numba.core.ir.Assign object at 0x790c603186e0>,
                                0)],
             '$22for_iter.1': [(<numba.core.ir.Assign object at 0x790c603188f0>,
                                22)],
             '$22for_iter.2': [(<numba.core.ir.Assign object at 0x790c60318a10>,
                                22)],
             '$22for_iter.3': [(<numba.core.ir.Assign object at 0x790c60318b30>,
                                22)],
             '$60build_tuple.13': [(<numba.core.ir.Assign object at 0x790c60319c70>,
                                    26)],
             '$66binary_subscr.14': [(<numba.core.ir.Assign object at 0x790c60319df0>,
                                      26)],
             '$binop_add110.26': [(<numba.core.ir.Assign object at 0x790c6031ac60>,
                                   26)],
             '$binop_add128.32': [(<numba.core.ir.Assign object at 0x790c6031b380>,
                                   26)],
             '$binop_add54.11': [(<numba.core.ir.Assign object at 0x790c60319a60>,
                                  26)],
             '$binop_add94.21': [(<numba.core.ir.Assign object at 0x790c6031a630>,
                                  26)],
             '$binop_iand154.40': [(<numba.core.ir.Assign object at 0x790c6031bd10>,
                                    26)],
             '$binop_ior78.18': [(<numba.core.ir.Assign object at 0x790c6031a2a0>,
                                  26)],
             '$binop_lshift148.38': [(<numba.core.ir.Assign object at 0x790c6031ba70>,
                                      26)],
             '$binop_lshift74.17': [(<numba.core.ir.Assign object at 0x790c6031a150>,
                                     26)],
             '$const10.3': [(<numba.core.ir.Assign object at 0x790c60318140>,
                             0)],
             '$const114.27': [(<numba.core.ir.Assign object at 0x790c6031ad50>,
                               26)],
             '$const144.36': [(<numba.core.ir.Assign object at 0x790c6031b800>,
                               26)],
             '$const170.2': [(<numba.core.ir.Assign object at 0x790c60319700>,
                              168)],
             '$const30.3': [(<numba.core.ir.Assign object at 0x790c60318f80>,
                             26)],
             '$const40.6': [(<numba.core.ir.Assign object at 0x790c603193d0>,
                             26)],
             '$const70.15': [(<numba.core.ir.Assign object at 0x790c60319ee0>,
                              26)],
             '$const8.2': [(<numba.core.ir.Assign object at 0x790c602f3fe0>,
                            0)],
             '$const98.22': [(<numba.core.ir.Assign object at 0x790c6031a720>,
                              26)],
             '$phi22.0': [(<numba.core.ir.Assign object at 0x790c602f3ec0>, 0)],
             '$phi26.1': [(<numba.core.ir.Assign object at 0x790c60318bc0>,
                           22)],
             'X': [(<numba.core.ir.Assign object at 0x790c602f3cb0>, 0)],
             'chunk': [(<numba.core.ir.Assign object at 0x790c60319100>, 26),
                       (<numba.core.ir.Assign object at 0x790c6031a8a0>, 26)],
             'graph_index': [(<numba.core.ir.Assign object at 0x790c602f39e0>,
                              0)],
             'hypervector_size': [(<numba.core.ir.Assign object at 0x790c602f3110>,
                                   0)],
             'hypervectors': [(<numba.core.ir.Assign object at 0x790c602f3860>,
                               0)],
             'k': [(<numba.core.ir.Assign object at 0x790c60318d70>, 26)],
             'node': [(<numba.core.ir.Assign object at 0x790c602f3ad0>, 0)],
             'pos': [(<numba.core.ir.Assign object at 0x790c60319550>, 26),
                     (<numba.core.ir.Assign object at 0x790c6031aed0>, 26)],
             'symbol': [(<numba.core.ir.Assign object at 0x790c602f3bc0>, 0)]})
SSA violators <numba.core.utils.OrderedSet object at 0x790c602f2f90>
Fix SSA violator on var chunk
==== SSA block rewrite pass on 0
Running <numba.core.ssa._FreshVarHandler object at 0x790c602f3230>
on stmt: hypervectors = arg(0, name=hypervectors)
on stmt: hypervector_size = arg(1, name=hypervector_size)
on stmt: graph_index = arg(2, name=graph_index)
on stmt: node = arg(3, name=node)
on stmt: symbol = arg(4, name=symbol)
on stmt: X = arg(5, name=X)
on stmt: $const8.2 = const(NoneType, None)
on stmt: $const10.3 = const(NoneType, None)
on stmt: $12build_slice.4 = global(slice: <class 'slice'>)
on stmt: $12build_slice.5 = call $12build_slice.4($const8.2, $const10.3, func=$12build_slice.4, args=(Var($const8.2, graphs.py:124), Var($const10.3, graphs.py:124)), kws=(), vararg=None, varkwarg=None, target=None)
on stmt: $14build_tuple.6 = build_tuple(items=[Var(symbol, graphs.py:121), Var($12build_slice.5, graphs.py:124)])
on stmt: $16binary_subscr.7 = getitem(value=hypervectors, index=$14build_tuple.6, fn=<built-in function getitem>)
on stmt: $20get_iter.8 = getiter(value=$16binary_subscr.7)
on stmt: $phi22.0 = $20get_iter.8
on stmt: jump 22
==== SSA block rewrite pass on 22
Running <numba.core.ssa._FreshVarHandler object at 0x790c602f3230>
on stmt: $22for_iter.1 = iternext(value=$phi22.0)
on stmt: $22for_iter.2 = pair_first(value=$22for_iter.1)
on stmt: $22for_iter.3 = pair_second(value=$22for_iter.1)
on stmt: $phi26.1 = $22for_iter.2
on stmt: branch $22for_iter.3, 26, 168
==== SSA block rewrite pass on 26
Running <numba.core.ssa._FreshVarHandler object at 0x790c602f3230>
on stmt: k = $phi26.1
on stmt: $const30.3 = const(int, 32)
on stmt: chunk = k // $const30.3
first assign: chunk
replaced with: chunk = k // $const30.3
on stmt: $const40.6 = const(int, 32)
on stmt: pos = k % $const40.6
on stmt: $binop_add54.11 = graph_index + node
on stmt: $60build_tuple.13 = build_tuple(items=[Var($binop_add54.11, graphs.py:128), Var(chunk, graphs.py:125)])
on stmt: $66binary_subscr.14 = getitem(value=X, index=$60build_tuple.13, fn=<built-in function getitem>)
on stmt: $const70.15 = const(int, 1)
on stmt: $binop_lshift74.17 = $const70.15 << pos
on stmt: $binop_ior78.18 = inplace_binop(fn=<built-in function ior>, immutable_fn=<built-in function or_>, lhs=$66binary_subscr.14, rhs=$binop_lshift74.17, static_lhs=Undefined, static_rhs=Undefined)
on stmt: X[$60build_tuple.13] = $binop_ior78.18
on stmt: $binop_add94.21 = k + hypervector_size
on stmt: $const98.22 = const(int, 32)
on stmt: chunk = $binop_add94.21 // $const98.22
replaced with: chunk.1 = $binop_add94.21 // $const98.22
on stmt: $binop_add110.26 = k + hypervector_size
on stmt: $const114.27 = const(int, 32)
on stmt: pos = $binop_add110.26 % $const114.27
on stmt: $binop_add128.32 = graph_index + node
on stmt: $134build_tuple.34 = build_tuple(items=[Var($binop_add128.32, graphs.py:132), Var(chunk, graphs.py:125)])
on stmt: $140binary_subscr.35 = getitem(value=X, index=$134build_tuple.34, fn=<built-in function getitem>)
on stmt: $const144.36 = const(int, 1)
on stmt: $binop_lshift148.38 = $const144.36 << pos
on stmt: $152unary_invert.39 = unary(fn=<built-in function invert>, value=$binop_lshift148.38)
on stmt: $binop_iand154.40 = inplace_binop(fn=<built-in function iand>, immutable_fn=<built-in function and_>, lhs=$140binary_subscr.35, rhs=$152unary_invert.39, static_lhs=Undefined, static_rhs=Undefined)
on stmt: X[$134build_tuple.34] = $binop_iand154.40
on stmt: jump 22
==== SSA block rewrite pass on 168
Running <numba.core.ssa._FreshVarHandler object at 0x790c602f3230>
on stmt: $const170.2 = const(NoneType, None)
on stmt: $170return_const.3 = cast(value=$const170.2)
on stmt: return $170return_const.3
Replaced assignments: defaultdict(<class 'list'>,
            {26: [<numba.core.ir.Assign object at 0x790c602f3710>,
                  <numba.core.ir.Assign object at 0x790c604514c0>]})
==== SSA block rewrite pass on 0
Running <numba.core.ssa._FixSSAVars object at 0x790c602f3230>
on stmt: hypervectors = arg(0, name=hypervectors)
on stmt: hypervector_size = arg(1, name=hypervector_size)
on stmt: graph_index = arg(2, name=graph_index)
on stmt: node = arg(3, name=node)
on stmt: symbol = arg(4, name=symbol)
on stmt: X = arg(5, name=X)
on stmt: $const8.2 = const(NoneType, None)
on stmt: $const10.3 = const(NoneType, None)
on stmt: $12build_slice.4 = global(slice: <class 'slice'>)
on stmt: $12build_slice.5 = call $12build_slice.4($const8.2, $const10.3, func=$12build_slice.4, args=(Var($const8.2, graphs.py:124), Var($const10.3, graphs.py:124)), kws=(), vararg=None, varkwarg=None, target=None)
on stmt: $14build_tuple.6 = build_tuple(items=[Var(symbol, graphs.py:121), Var($12build_slice.5, graphs.py:124)])
on stmt: $16binary_subscr.7 = getitem(value=hypervectors, index=$14build_tuple.6, fn=<built-in function getitem>)
on stmt: $20get_iter.8 = getiter(value=$16binary_subscr.7)
on stmt: $phi22.0 = $20get_iter.8
on stmt: jump 22
==== SSA block rewrite pass on 22
Running <numba.core.ssa._FixSSAVars object at 0x790c602f3230>
on stmt: $22for_iter.1 = iternext(value=$phi22.0)
on stmt: $22for_iter.2 = pair_first(value=$22for_iter.1)
on stmt: $22for_iter.3 = pair_second(value=$22for_iter.1)
on stmt: $phi26.1 = $22for_iter.2
on stmt: branch $22for_iter.3, 26, 168
==== SSA block rewrite pass on 26
Running <numba.core.ssa._FixSSAVars object at 0x790c602f3230>
on stmt: k = $phi26.1
on stmt: $const30.3 = const(int, 32)
on stmt: chunk = k // $const30.3
on stmt: $const40.6 = const(int, 32)
on stmt: pos = k % $const40.6
on stmt: $binop_add54.11 = graph_index + node
on stmt: $60build_tuple.13 = build_tuple(items=[Var($binop_add54.11, graphs.py:128), Var(chunk, graphs.py:125)])
find_def var='chunk' stmt=$60build_tuple.13 = build_tuple(items=[Var($binop_add54.11, graphs.py:128), Var(chunk, graphs.py:125)])
on stmt: $66binary_subscr.14 = getitem(value=X, index=$60build_tuple.13, fn=<built-in function getitem>)
on stmt: $const70.15 = const(int, 1)
on stmt: $binop_lshift74.17 = $const70.15 << pos
on stmt: $binop_ior78.18 = inplace_binop(fn=<built-in function ior>, immutable_fn=<built-in function or_>, lhs=$66binary_subscr.14, rhs=$binop_lshift74.17, static_lhs=Undefined, static_rhs=Undefined)
on stmt: X[$60build_tuple.13] = $binop_ior78.18
on stmt: $binop_add94.21 = k + hypervector_size
on stmt: $const98.22 = const(int, 32)
on stmt: chunk.1 = $binop_add94.21 // $const98.22
on stmt: $binop_add110.26 = k + hypervector_size
on stmt: $const114.27 = const(int, 32)
on stmt: pos = $binop_add110.26 % $const114.27
on stmt: $binop_add128.32 = graph_index + node
on stmt: $134build_tuple.34 = build_tuple(items=[Var($binop_add128.32, graphs.py:132), Var(chunk, graphs.py:125)])
find_def var='chunk' stmt=$134build_tuple.34 = build_tuple(items=[Var($binop_add128.32, graphs.py:132), Var(chunk, graphs.py:125)])
replaced with: $134build_tuple.34 = build_tuple(items=[Var($binop_add128.32, graphs.py:132), Var(chunk.1, graphs.py:130)])
on stmt: $140binary_subscr.35 = getitem(value=X, index=$134build_tuple.34, fn=<built-in function getitem>)
on stmt: $const144.36 = const(int, 1)
on stmt: $binop_lshift148.38 = $const144.36 << pos
on stmt: $152unary_invert.39 = unary(fn=<built-in function invert>, value=$binop_lshift148.38)
on stmt: $binop_iand154.40 = inplace_binop(fn=<built-in function iand>, immutable_fn=<built-in function and_>, lhs=$140binary_subscr.35, rhs=$152unary_invert.39, static_lhs=Undefined, static_rhs=Undefined)
on stmt: X[$134build_tuple.34] = $binop_iand154.40
on stmt: jump 22
==== SSA block rewrite pass on 168
Running <numba.core.ssa._FixSSAVars object at 0x790c602f3230>
on stmt: $const170.2 = const(NoneType, None)
on stmt: $170return_const.3 = cast(value=$const170.2)
on stmt: return $170return_const.3
Fix SSA violator on var pos
==== SSA block rewrite pass on 0
Running <numba.core.ssa._FreshVarHandler object at 0x790c602f30e0>
on stmt: hypervectors = arg(0, name=hypervectors)
on stmt: hypervector_size = arg(1, name=hypervector_size)
on stmt: graph_index = arg(2, name=graph_index)
on stmt: node = arg(3, name=node)
on stmt: symbol = arg(4, name=symbol)
on stmt: X = arg(5, name=X)
on stmt: $const8.2 = const(NoneType, None)
on stmt: $const10.3 = const(NoneType, None)
on stmt: $12build_slice.4 = global(slice: <class 'slice'>)
on stmt: $12build_slice.5 = call $12build_slice.4($const8.2, $const10.3, func=$12build_slice.4, args=(Var($const8.2, graphs.py:124), Var($const10.3, graphs.py:124)), kws=(), vararg=None, varkwarg=None, target=None)
on stmt: $14build_tuple.6 = build_tuple(items=[Var(symbol, graphs.py:121), Var($12build_slice.5, graphs.py:124)])
on stmt: $16binary_subscr.7 = getitem(value=hypervectors, index=$14build_tuple.6, fn=<built-in function getitem>)
on stmt: $20get_iter.8 = getiter(value=$16binary_subscr.7)
on stmt: $phi22.0 = $20get_iter.8
on stmt: jump 22
==== SSA block rewrite pass on 22
Running <numba.core.ssa._FreshVarHandler object at 0x790c602f30e0>
on stmt: $22for_iter.1 = iternext(value=$phi22.0)
on stmt: $22for_iter.2 = pair_first(value=$22for_iter.1)
on stmt: $22for_iter.3 = pair_second(value=$22for_iter.1)
on stmt: $phi26.1 = $22for_iter.2
on stmt: branch $22for_iter.3, 26, 168
==== SSA block rewrite pass on 26
Running <numba.core.ssa._FreshVarHandler object at 0x790c602f30e0>
on stmt: k = $phi26.1
on stmt: $const30.3 = const(int, 32)
on stmt: chunk = k // $const30.3
on stmt: $const40.6 = const(int, 32)
on stmt: pos = k % $const40.6
first assign: pos
replaced with: pos = k % $const40.6
on stmt: $binop_add54.11 = graph_index + node
on stmt: $60build_tuple.13 = build_tuple(items=[Var($binop_add54.11, graphs.py:128), Var(chunk, graphs.py:125)])
on stmt: $66binary_subscr.14 = getitem(value=X, index=$60build_tuple.13, fn=<built-in function getitem>)
on stmt: $const70.15 = const(int, 1)
on stmt: $binop_lshift74.17 = $const70.15 << pos
on stmt: $binop_ior78.18 = inplace_binop(fn=<built-in function ior>, immutable_fn=<built-in function or_>, lhs=$66binary_subscr.14, rhs=$binop_lshift74.17, static_lhs=Undefined, static_rhs=Undefined)
on stmt: X[$60build_tuple.13] = $binop_ior78.18
on stmt: $binop_add94.21 = k + hypervector_size
on stmt: $const98.22 = const(int, 32)
on stmt: chunk.1 = $binop_add94.21 // $const98.22
on stmt: $binop_add110.26 = k + hypervector_size
on stmt: $const114.27 = const(int, 32)
on stmt: pos = $binop_add110.26 % $const114.27
replaced with: pos.1 = $binop_add110.26 % $const114.27
on stmt: $binop_add128.32 = graph_index + node
on stmt: $134build_tuple.34 = build_tuple(items=[Var($binop_add128.32, graphs.py:132), Var(chunk.1, graphs.py:130)])
on stmt: $140binary_subscr.35 = getitem(value=X, index=$134build_tuple.34, fn=<built-in function getitem>)
on stmt: $const144.36 = const(int, 1)
on stmt: $binop_lshift148.38 = $const144.36 << pos
on stmt: $152unary_invert.39 = unary(fn=<built-in function invert>, value=$binop_lshift148.38)
on stmt: $binop_iand154.40 = inplace_binop(fn=<built-in function iand>, immutable_fn=<built-in function and_>, lhs=$140binary_subscr.35, rhs=$152unary_invert.39, static_lhs=Undefined, static_rhs=Undefined)
on stmt: X[$134build_tuple.34] = $binop_iand154.40
on stmt: jump 22
==== SSA block rewrite pass on 168
Running <numba.core.ssa._FreshVarHandler object at 0x790c602f30e0>
on stmt: $const170.2 = const(NoneType, None)
on stmt: $170return_const.3 = cast(value=$const170.2)
on stmt: return $170return_const.3
Replaced assignments: defaultdict(<class 'list'>,
            {26: [<numba.core.ir.Assign object at 0x790c6031a7b0>,
                  <numba.core.ir.Assign object at 0x790c6031aae0>]})
==== SSA block rewrite pass on 0
Running <numba.core.ssa._FixSSAVars object at 0x790c602f30e0>
on stmt: hypervectors = arg(0, name=hypervectors)
on stmt: hypervector_size = arg(1, name=hypervector_size)
on stmt: graph_index = arg(2, name=graph_index)
on stmt: node = arg(3, name=node)
on stmt: symbol = arg(4, name=symbol)
on stmt: X = arg(5, name=X)
on stmt: $const8.2 = const(NoneType, None)
on stmt: $const10.3 = const(NoneType, None)
on stmt: $12build_slice.4 = global(slice: <class 'slice'>)
on stmt: $12build_slice.5 = call $12build_slice.4($const8.2, $const10.3, func=$12build_slice.4, args=(Var($const8.2, graphs.py:124), Var($const10.3, graphs.py:124)), kws=(), vararg=None, varkwarg=None, target=None)
on stmt: $14build_tuple.6 = build_tuple(items=[Var(symbol, graphs.py:121), Var($12build_slice.5, graphs.py:124)])
on stmt: $16binary_subscr.7 = getitem(value=hypervectors, index=$14build_tuple.6, fn=<built-in function getitem>)
on stmt: $20get_iter.8 = getiter(value=$16binary_subscr.7)
on stmt: $phi22.0 = $20get_iter.8
on stmt: jump 22
==== SSA block rewrite pass on 22
Running <numba.core.ssa._FixSSAVars object at 0x790c602f30e0>
on stmt: $22for_iter.1 = iternext(value=$phi22.0)
on stmt: $22for_iter.2 = pair_first(value=$22for_iter.1)
on stmt: $22for_iter.3 = pair_second(value=$22for_iter.1)
on stmt: $phi26.1 = $22for_iter.2
on stmt: branch $22for_iter.3, 26, 168
==== SSA block rewrite pass on 26
Running <numba.core.ssa._FixSSAVars object at 0x790c602f30e0>
on stmt: k = $phi26.1
on stmt: $const30.3 = const(int, 32)
on stmt: chunk = k // $const30.3
on stmt: $const40.6 = const(int, 32)
on stmt: pos = k % $const40.6
on stmt: $binop_add54.11 = graph_index + node
on stmt: $60build_tuple.13 = build_tuple(items=[Var($binop_add54.11, graphs.py:128), Var(chunk, graphs.py:125)])
on stmt: $66binary_subscr.14 = getitem(value=X, index=$60build_tuple.13, fn=<built-in function getitem>)
on stmt: $const70.15 = const(int, 1)
on stmt: $binop_lshift74.17 = $const70.15 << pos
find_def var='pos' stmt=$binop_lshift74.17 = $const70.15 << pos
on stmt: $binop_ior78.18 = inplace_binop(fn=<built-in function ior>, immutable_fn=<built-in function or_>, lhs=$66binary_subscr.14, rhs=$binop_lshift74.17, static_lhs=Undefined, static_rhs=Undefined)
on stmt: X[$60build_tuple.13] = $binop_ior78.18
on stmt: $binop_add94.21 = k + hypervector_size
on stmt: $const98.22 = const(int, 32)
on stmt: chunk.1 = $binop_add94.21 // $const98.22
on stmt: $binop_add110.26 = k + hypervector_size
on stmt: $const114.27 = const(int, 32)
on stmt: pos.1 = $binop_add110.26 % $const114.27
on stmt: $binop_add128.32 = graph_index + node
on stmt: $134build_tuple.34 = build_tuple(items=[Var($binop_add128.32, graphs.py:132), Var(chunk.1, graphs.py:130)])
on stmt: $140binary_subscr.35 = getitem(value=X, index=$134build_tuple.34, fn=<built-in function getitem>)
on stmt: $const144.36 = const(int, 1)
on stmt: $binop_lshift148.38 = $const144.36 << pos
find_def var='pos' stmt=$binop_lshift148.38 = $const144.36 << pos
replaced with: $binop_lshift148.38 = $const144.36 << pos.1
on stmt: $152unary_invert.39 = unary(fn=<built-in function invert>, value=$binop_lshift148.38)
on stmt: $binop_iand154.40 = inplace_binop(fn=<built-in function iand>, immutable_fn=<built-in function and_>, lhs=$140binary_subscr.35, rhs=$152unary_invert.39, static_lhs=Undefined, static_rhs=Undefined)
on stmt: X[$134build_tuple.34] = $binop_iand154.40
on stmt: jump 22
==== SSA block rewrite pass on 168
Running <numba.core.ssa._FixSSAVars object at 0x790c602f30e0>
on stmt: $const170.2 = const(NoneType, None)
on stmt: $170return_const.3 = cast(value=$const170.2)
on stmt: return $170return_const.3
Creating test data
Epoch#1 -- Accuracy train: 0.5418888888888889 -- Accuracy test: 0.529 
Epoch#2 -- Accuracy train: 0.5418888888888889 -- Accuracy test: 0.529 
Epoch#3 -- Accuracy train: 0.5418888888888889 -- Accuracy test: 0.529 
Epoch#4 -- Accuracy train: 0.45811111111111114 -- Accuracy test: 0.471 
Epoch#5 -- Accuracy train: 0.5418888888888889 -- Accuracy test: 0.529 
Epoch#6 -- Accuracy train: 0.5418888888888889 -- Accuracy test: 0.529 
Epoch#7 -- Accuracy train: 0.5418888888888889 -- Accuracy test: 0.529 
Epoch#8 -- Accuracy train: 0.5198888888888888 -- Accuracy test: 0.546 
Epoch#9 -- Accuracy train: 0.45811111111111114 -- Accuracy test: 0.471 
Epoch#10 -- Accuracy train: 0.45811111111111114 -- Accuracy test: 0.471 
Epoch#11 -- Accuracy train: 0.45811111111111114 -- Accuracy test: 0.471 
Epoch#12 -- Accuracy train: 0.5418888888888889 -- Accuracy test: 0.529 
Epoch#13 -- Accuracy train: 0.5418888888888889 -- Accuracy test: 0.529 
Epoch#14 -- Accuracy train: 0.5418888888888889 -- Accuracy test: 0.529 
Epoch#15 -- Accuracy train: 0.45811111111111114 -- Accuracy test: 0.471 
Epoch#16 -- Accuracy train: 0.5418888888888889 -- Accuracy test: 0.529 
Epoch#17 -- Accuracy train: 0.45811111111111114 -- Accuracy test: 0.471 
Epoch#18 -- Accuracy train: 0.5418888888888889 -- Accuracy test: 0.529 
Epoch#19 -- Accuracy train: 0.45811111111111114 -- Accuracy test: 0.471 
Epoch#20 -- Accuracy train: 0.45811111111111114 -- Accuracy test: 0.471 
Epoch#21 -- Accuracy train: 0.5418888888888889 -- Accuracy test: 0.529 
Epoch#22 -- Accuracy train: 0.45811111111111114 -- Accuracy test: 0.471 
Epoch#23 -- Accuracy train: 0.5418888888888889 -- Accuracy test: 0.529 
Epoch#24 -- Accuracy train: 0.5418888888888889 -- Accuracy test: 0.529 
Epoch#25 -- Accuracy train: 0.45811111111111114 -- Accuracy test: 0.471 
Epoch#26 -- Accuracy train: 0.5223333333333333 -- Accuracy test: 0.544 
Epoch#27 -- Accuracy train: 0.5418888888888889 -- Accuracy test: 0.529 
Epoch#28 -- Accuracy train: 0.4716666666666667 -- Accuracy test: 0.456 
Epoch#29 -- Accuracy train: 0.5418888888888889 -- Accuracy test: 0.529 
Epoch#30 -- Accuracy train: 0.5418888888888889 -- Accuracy test: 0.529 
Epoch#31 -- Accuracy train: 0.45811111111111114 -- Accuracy test: 0.471 
Epoch#32 -- Accuracy train: 0.45811111111111114 -- Accuracy test: 0.471 
Epoch#33 -- Accuracy train: 0.45811111111111114 -- Accuracy test: 0.471 
Epoch#34 -- Accuracy train: 0.5418888888888889 -- Accuracy test: 0.529 
Epoch#35 -- Accuracy train: 0.4741111111111111 -- Accuracy test: 0.5 
Epoch#36 -- Accuracy train: 0.45811111111111114 -- Accuracy test: 0.471 
Epoch#37 -- Accuracy train: 0.5183333333333333 -- Accuracy test: 0.546 
Epoch#38 -- Accuracy train: 0.5418888888888889 -- Accuracy test: 0.529 
Epoch#39 -- Accuracy train: 0.5183333333333333 -- Accuracy test: 0.546 
Epoch#40 -- Accuracy train: 0.5418888888888889 -- Accuracy test: 0.529 
Epoch#41 -- Accuracy train: 0.5418888888888889 -- Accuracy test: 0.529 
Epoch#42 -- Accuracy train: 0.5418888888888889 -- Accuracy test: 0.529 
Epoch#43 -- Accuracy train: 0.5418888888888889 -- Accuracy test: 0.529 
Epoch#44 -- Accuracy train: 0.45811111111111114 -- Accuracy test: 0.471 
Epoch#45 -- Accuracy train: 0.45811111111111114 -- Accuracy test: 0.471 
Epoch#46 -- Accuracy train: 0.45811111111111114 -- Accuracy test: 0.471 
Epoch#47 -- Accuracy train: 0.5418888888888889 -- Accuracy test: 0.529 
Epoch#48 -- Accuracy train: 0.5418888888888889 -- Accuracy test: 0.529 
Epoch#49 -- Accuracy train: 0.458 -- Accuracy test: 0.471 
Epoch#50 -- Accuracy train: 0.5418888888888889 -- Accuracy test: 0.529 
Epoch#51 -- Accuracy train: 0.5418888888888889 -- Accuracy test: 0.529 
Epoch#52 -- Accuracy train: 0.5418888888888889 -- Accuracy test: 0.529 
Epoch#53 -- Accuracy train: 0.45811111111111114 -- Accuracy test: 0.471 
Epoch#54 -- Accuracy train: 0.5418888888888889 -- Accuracy test: 0.529 
Epoch#55 -- Accuracy train: 0.5418888888888889 -- Accuracy test: 0.529 
Epoch#56 -- Accuracy train: 0.5318888888888889 -- Accuracy test: 0.531 
Epoch#57 -- Accuracy train: 0.5418888888888889 -- Accuracy test: 0.529 
Epoch#58 -- Accuracy train: 0.5418888888888889 -- Accuracy test: 0.529 
Epoch#59 -- Accuracy train: 0.45811111111111114 -- Accuracy test: 0.471 
Epoch#60 -- Accuracy train: 0.45811111111111114 -- Accuracy test: 0.471 
Epoch#61 -- Accuracy train: 0.45811111111111114 -- Accuracy test: 0.471 
Epoch#62 -- Accuracy train: 0.5418888888888889 -- Accuracy test: 0.529 
Epoch#63 -- Accuracy train: 0.5418888888888889 -- Accuracy test: 0.529 
Epoch#64 -- Accuracy train: 0.5418888888888889 -- Accuracy test: 0.529 
Epoch#65 -- Accuracy train: 0.5418888888888889 -- Accuracy test: 0.529 
Epoch#66 -- Accuracy train: 0.5418888888888889 -- Accuracy test: 0.529 
Epoch#67 -- Accuracy train: 0.5183333333333333 -- Accuracy test: 0.546 
Epoch#68 -- Accuracy train: 0.5418888888888889 -- Accuracy test: 0.529 
Epoch#69 -- Accuracy train: 0.45811111111111114 -- Accuracy test: 0.471 
Epoch#70 -- Accuracy train: 0.5592222222222222 -- Accuracy test: 0.54 
Epoch#71 -- Accuracy train: 0.5418888888888889 -- Accuracy test: 0.529 
Epoch#72 -- Accuracy train: 0.45811111111111114 -- Accuracy test: 0.471 
Epoch#73 -- Accuracy train: 0.5418888888888889 -- Accuracy test: 0.529 
Epoch#74 -- Accuracy train: 0.45811111111111114 -- Accuracy test: 0.471 
Epoch#75 -- Accuracy train: 0.5418888888888889 -- Accuracy test: 0.529 
Epoch#76 -- Accuracy train: 0.5418888888888889 -- Accuracy test: 0.529 
Epoch#77 -- Accuracy train: 0.45811111111111114 -- Accuracy test: 0.471 
Epoch#78 -- Accuracy train: 0.5418888888888889 -- Accuracy test: 0.529 
Epoch#79 -- Accuracy train: 0.45811111111111114 -- Accuracy test: 0.471 
Epoch#80 -- Accuracy train: 0.45811111111111114 -- Accuracy test: 0.471 
Epoch#81 -- Accuracy train: 0.45811111111111114 -- Accuracy test: 0.471 
Epoch#82 -- Accuracy train: 0.45811111111111114 -- Accuracy test: 0.471 
Epoch#83 -- Accuracy train: 0.45811111111111114 -- Accuracy test: 0.471 
Epoch#84 -- Accuracy train: 0.45811111111111114 -- Accuracy test: 0.471 
Epoch#85 -- Accuracy train: 0.5418888888888889 -- Accuracy test: 0.529 
Epoch#86 -- Accuracy train: 0.45811111111111114 -- Accuracy test: 0.471 
Epoch#87 -- Accuracy train: 0.45811111111111114 -- Accuracy test: 0.471 
Epoch#88 -- Accuracy train: 0.45811111111111114 -- Accuracy test: 0.471 
Epoch#89 -- Accuracy train: 0.5418888888888889 -- Accuracy test: 0.529 
Epoch#90 -- Accuracy train: 0.45811111111111114 -- Accuracy test: 0.471 
Epoch#91 -- Accuracy train: 0.5418888888888889 -- Accuracy test: 0.529 
Epoch#92 -- Accuracy train: 0.5418888888888889 -- Accuracy test: 0.529 
Epoch#93 -- Accuracy train: 0.5418888888888889 -- Accuracy test: 0.529 
Epoch#94 -- Accuracy train: 0.45811111111111114 -- Accuracy test: 0.471 
Epoch#95 -- Accuracy train: 0.5418888888888889 -- Accuracy test: 0.529 
Epoch#96 -- Accuracy train: 0.45811111111111114 -- Accuracy test: 0.471 
Epoch#97 -- Accuracy train: 0.45811111111111114 -- Accuracy test: 0.471 
Epoch#98 -- Accuracy train: 0.5418888888888889 -- Accuracy test: 0.529 
Epoch#99 -- Accuracy train: 0.5183333333333333 -- Accuracy test: 0.546 
Epoch#100 -- Accuracy train: 0.5418888888888889 -- Accuracy test: 0.529 
Time: 3238.2642800807953
Clause #0 W:(0 9) NOT x22 AND NOT x82 AND NOT x253 AND NOT x289 AND NOT x459 AND NOT x508 AND NOT x543 AND NOT x607 AND NOT x646 AND NOT x896 AND NOT x915 AND NOT x989
Number of literals: 12
Clause #1 W:(-27 10) NOT x16 AND NOT x172 AND NOT x239 AND NOT x465 AND NOT x487 AND NOT x553 AND NOT x585 AND NOT x586 AND NOT x760 AND NOT x925
Number of literals: 10
Clause #2 W:(-39 -6) NOT x39 AND NOT x96 AND NOT x183 AND NOT x201 AND NOT x272 AND NOT x278 AND NOT x418 AND NOT x471 AND NOT x553 AND NOT x604 AND NOT x607 AND NOT x626 AND NOT x781 AND NOT x859
Number of literals: 14
Clause #3 W:(-23 -14) NOT x128 AND NOT x149 AND NOT x331 AND NOT x390 AND NOT x465 AND NOT x873 AND NOT x878
Number of literals: 7
Clause #4 W:(-7 -8) NOT x114 AND NOT x152 AND NOT x208 AND NOT x267 AND NOT x272 AND NOT x292 AND NOT x302 AND NOT x390 AND NOT x437 AND NOT x492 AND NOT x564 AND NOT x865 AND NOT x945 AND NOT x956
Number of literals: 14
Clause #5 W:(-29 -6) NOT x9 AND NOT x156 AND NOT x167 AND NOT x285 AND NOT x350 AND NOT x378 AND NOT x464 AND NOT x526 AND NOT x613 AND NOT x639 AND NOT x883 AND NOT x960
Number of literals: 12
Clause #6 W:(-13 -17) NOT x49 AND NOT x54 AND NOT x67 AND NOT x85 AND NOT x168 AND NOT x440 AND NOT x766 AND NOT x831 AND NOT x838 AND NOT x950 AND NOT x1018
Number of literals: 11
Clause #7 W:(4 -25) x0 AND NOT x93 AND NOT x138 AND NOT x145 AND NOT x270 AND NOT x331 AND NOT x389 AND NOT x461 AND NOT x579 AND NOT x593 AND NOT x717 AND NOT x861 AND NOT x893 AND NOT x917 AND NOT x982
Number of literals: 15
Clause #8 W:(5 -12) NOT x89 AND NOT x105 AND NOT x194 AND NOT x252 AND NOT x259 AND NOT x406 AND NOT x440 AND NOT x523 AND NOT x530 AND NOT x640 AND NOT x725 AND NOT x800 AND NOT x899 AND NOT x909
Number of literals: 14
Clause #9 W:(-5 2) NOT x69 AND NOT x123 AND NOT x142 AND NOT x189 AND NOT x240 AND NOT x621 AND NOT x683 AND NOT x715 AND NOT x926 AND NOT x927 AND NOT x938 AND NOT x963
Number of literals: 12
Clause #10 W:(29 9) NOT x88 AND NOT x106 AND NOT x214 AND NOT x306 AND NOT x340 AND NOT x383 AND NOT x441 AND NOT x449 AND NOT x723 AND NOT x792 AND NOT x796 AND NOT x979 AND NOT x984 AND NOT x988
Number of literals: 14
Clause #11 W:(26 13) NOT x18 AND NOT x112 AND NOT x150 AND NOT x155 AND NOT x397 AND NOT x556 AND NOT x661 AND NOT x663 AND NOT x722 AND NOT x829 AND NOT x953
Number of literals: 11
Clause #12 W:(21 -1) NOT x171 AND NOT x206 AND NOT x215 AND NOT x288 AND NOT x505 AND NOT x538 AND NOT x646 AND NOT x660 AND NOT x707 AND NOT x731 AND NOT x813 AND NOT x839 AND NOT x976
Number of literals: 13
Clause #13 W:(-35 20) NOT x68 AND NOT x107 AND NOT x219 AND NOT x241 AND NOT x351 AND NOT x398 AND NOT x426 AND NOT x453 AND NOT x523 AND NOT x664 AND NOT x740 AND NOT x785 AND NOT x790 AND NOT x862 AND NOT x907 AND NOT x952
Number of literals: 16
Clause #14 W:(16 20) NOT x12 AND NOT x78 AND NOT x100 AND NOT x173 AND NOT x309 AND NOT x443 AND NOT x577 AND NOT x664 AND NOT x705 AND NOT x737 AND NOT x792 AND NOT x868 AND NOT x942 AND NOT x979 AND NOT x987 AND NOT x1011
Number of literals: 16
Clause #15 W:(-44 16) NOT x186 AND NOT x397 AND NOT x407 AND NOT x509 AND NOT x537 AND NOT x573 AND NOT x639 AND NOT x651 AND NOT x703 AND NOT x710 AND NOT x787 AND NOT x808 AND NOT x812 AND NOT x815 AND NOT x866 AND NOT x905 AND NOT x935 AND NOT x952 AND NOT x961
Number of literals: 19
Clause #16 W:(21 39) NOT x12 AND NOT x76 AND NOT x157 AND NOT x167 AND NOT x343 AND NOT x478 AND NOT x519 AND NOT x631 AND NOT x735 AND NOT x800 AND NOT x854 AND NOT x922
Number of literals: 12
Clause #17 W:(20 21) NOT x1 AND NOT x67 AND NOT x186 AND NOT x201 AND NOT x443 AND NOT x452 AND NOT x470 AND NOT x492 AND NOT x495 AND NOT x556 AND NOT x557 AND NOT x673 AND NOT x742 AND NOT x782 AND NOT x899
Number of literals: 15
Clause #18 W:(-5 4) NOT x45 AND NOT x100 AND NOT x105 AND NOT x181 AND NOT x199 AND NOT x300 AND NOT x318 AND NOT x344 AND NOT x505 AND NOT x523 AND NOT x549 AND NOT x571 AND NOT x634 AND NOT x635 AND NOT x663 AND NOT x806 AND NOT x958
Number of literals: 17
Clause #19 W:(-8 37) NOT x165 AND NOT x180 AND NOT x461 AND NOT x462 AND NOT x468 AND NOT x472 AND NOT x509 AND NOT x525 AND NOT x563 AND NOT x667 AND NOT x803 AND NOT x949 AND NOT x951 AND NOT x969 AND NOT x973
Number of literals: 15
Clause #20 W:(10 17) NOT x12 AND NOT x28 AND NOT x104 AND NOT x179 AND NOT x191 AND NOT x291 AND NOT x476 AND NOT x584 AND NOT x634 AND NOT x664 AND NOT x767 AND NOT x781 AND NOT x940 AND NOT x948
Number of literals: 14
Clause #21 W:(21 -2) NOT x39 AND NOT x50 AND NOT x111 AND NOT x122 AND NOT x256 AND NOT x272 AND NOT x275 AND NOT x417 AND NOT x453 AND NOT x491 AND NOT x545 AND NOT x628 AND NOT x655 AND NOT x821 AND NOT x872 AND NOT x989 AND NOT x1018
Number of literals: 17
Clause #22 W:(11 19) NOT x186 AND NOT x225 AND NOT x235 AND NOT x265 AND NOT x351 AND NOT x454 AND NOT x465 AND NOT x481 AND NOT x554 AND NOT x579 AND NOT x587 AND NOT x602 AND NOT x755 AND NOT x791 AND NOT x897 AND NOT x968 AND NOT x973 AND NOT x980
Number of literals: 18
Clause #23 W:(-13 9) NOT x31 AND NOT x45 AND NOT x94 AND NOT x159 AND NOT x210 AND NOT x222 AND NOT x351 AND NOT x639 AND NOT x644 AND NOT x710 AND NOT x831 AND NOT x880 AND NOT x917 AND NOT x944 AND NOT x967 AND NOT x975
Number of literals: 16
Clause #24 W:(19 14) NOT x65 AND NOT x83 AND NOT x91 AND NOT x257 AND NOT x387 AND NOT x500 AND NOT x511 AND NOT x756 AND NOT x820 AND NOT x899 AND NOT x910 AND NOT x979
Number of literals: 12
Clause #25 W:(17 0) NOT x43 AND NOT x54 AND NOT x87 AND NOT x132 AND NOT x236 AND NOT x327 AND NOT x453 AND NOT x525 AND NOT x669 AND NOT x852 AND NOT x1014 AND NOT x1019
Number of literals: 12
Clause #26 W:(13 18) NOT x1 AND NOT x16 AND NOT x216 AND NOT x293 AND NOT x314 AND NOT x493 AND NOT x558 AND NOT x575 AND NOT x614 AND NOT x845 AND NOT x975 AND NOT x1020
Number of literals: 12
Clause #27 W:(-42 -23) NOT x77 AND NOT x106 AND NOT x176 AND NOT x256 AND NOT x260 AND NOT x295 AND NOT x312 AND NOT x358 AND NOT x410 AND NOT x472 AND NOT x573 AND NOT x687 AND NOT x697 AND NOT x782 AND NOT x832 AND NOT x904
Number of literals: 16
Clause #28 W:(2 0) x310 AND NOT x21 AND NOT x56 AND NOT x221 AND NOT x279 AND NOT x347 AND NOT x350 AND NOT x469 AND NOT x580 AND NOT x691 AND NOT x710 AND NOT x817 AND NOT x906 AND NOT x986
Number of literals: 14
Clause #29 W:(0 -10) NOT x187 AND NOT x203 AND NOT x303 AND NOT x349 AND NOT x422 AND NOT x451 AND NOT x527 AND NOT x583 AND NOT x701 AND NOT x729 AND NOT x816 AND NOT x829 AND NOT x902
Number of literals: 13
Clause #30 W:(16 0) NOT x26 AND NOT x46 AND NOT x105 AND NOT x145 AND NOT x336 AND NOT x337 AND NOT x344 AND NOT x353 AND NOT x454 AND NOT x530 AND NOT x593 AND NOT x668 AND NOT x747 AND NOT x824 AND NOT x861 AND NOT x1008
Number of literals: 16
Clause #31 W:(2 -22) NOT x24 AND NOT x194 AND NOT x319 AND NOT x368 AND NOT x418 AND NOT x601 AND NOT x684 AND NOT x692 AND NOT x699 AND NOT x705 AND NOT x760 AND NOT x813 AND NOT x869 AND NOT x987
Number of literals: 14
Clause #32 W:(-6 -19) NOT x58 AND NOT x142 AND NOT x169 AND NOT x174 AND NOT x418 AND NOT x502 AND NOT x598 AND NOT x620 AND NOT x683 AND NOT x713 AND NOT x715 AND NOT x815 AND NOT x858 AND NOT x859 AND NOT x964
Number of literals: 15
Clause #33 W:(5 16) NOT x81 AND NOT x106 AND NOT x118 AND NOT x194 AND NOT x222 AND NOT x241 AND NOT x260 AND NOT x326 AND NOT x478 AND NOT x536 AND NOT x602 AND NOT x936 AND NOT x983 AND NOT x1008
Number of literals: 14
Clause #34 W:(11 4) x621 AND NOT x3 AND NOT x15 AND NOT x70 AND NOT x87 AND NOT x140 AND NOT x185 AND NOT x295 AND NOT x308 AND NOT x326 AND NOT x332 AND NOT x358 AND NOT x424 AND NOT x430 AND NOT x486 AND NOT x543 AND NOT x865 AND NOT x919 AND NOT x964
Number of literals: 19
Clause #35 W:(12 -9) NOT x19 AND NOT x39 AND NOT x142 AND NOT x198 AND NOT x262 AND NOT x393 AND NOT x569 AND NOT x586 AND NOT x609 AND NOT x649 AND NOT x655 AND NOT x673 AND NOT x833 AND NOT x857 AND NOT x946 AND NOT x958 AND NOT x983 AND NOT x992
Number of literals: 18
Clause #36 W:(-8 -11) NOT x173 AND NOT x261 AND NOT x377 AND NOT x380 AND NOT x455 AND NOT x515 AND NOT x596 AND NOT x609 AND NOT x620 AND NOT x635 AND NOT x878 AND NOT x921 AND NOT x1021
Number of literals: 13
Clause #37 W:(4 3) NOT x62 AND NOT x87 AND NOT x92 AND NOT x113 AND NOT x129 AND NOT x135 AND NOT x162 AND NOT x167 AND NOT x196 AND NOT x213 AND NOT x286 AND NOT x472 AND NOT x564 AND NOT x717
Number of literals: 14
Clause #38 W:(8 -5) NOT x39 AND NOT x47 AND NOT x55 AND NOT x172 AND NOT x185 AND NOT x252 AND NOT x450 AND NOT x474 AND NOT x489 AND NOT x561 AND NOT x699 AND NOT x860 AND NOT x905 AND NOT x961
Number of literals: 14
Clause #39 W:(-17 7) NOT x74 AND NOT x107 AND NOT x136 AND NOT x142 AND NOT x201 AND NOT x338 AND NOT x451 AND NOT x455 AND NOT x525 AND NOT x562 AND NOT x651 AND NOT x657 AND NOT x750 AND NOT x790 AND NOT x810 AND NOT x935 AND NOT x957 AND NOT x1023
Number of literals: 18
Clause #40 W:(1 -14) NOT x184 AND NOT x342 AND NOT x419 AND NOT x432 AND NOT x470 AND NOT x591 AND NOT x631 AND NOT x821 AND NOT x836 AND NOT x931
Number of literals: 10
Clause #41 W:(-8 -15) NOT x266 AND NOT x472 AND NOT x476 AND NOT x504 AND NOT x534 AND NOT x543 AND NOT x572 AND NOT x641 AND NOT x650 AND NOT x666 AND NOT x736 AND NOT x754 AND NOT x756 AND NOT x791 AND NOT x827 AND NOT x843 AND NOT x909 AND NOT x1009 AND NOT x1015
Number of literals: 19
Clause #42 W:(10 -9) NOT x45 AND NOT x95 AND NOT x198 AND NOT x418 AND NOT x539 AND NOT x611 AND NOT x727 AND NOT x737 AND NOT x748 AND NOT x923 AND NOT x940 AND NOT x963
Number of literals: 12
Clause #43 W:(-7 -16) NOT x18 AND NOT x195 AND NOT x297 AND NOT x326 AND NOT x349 AND NOT x495 AND NOT x591 AND NOT x639 AND NOT x702 AND NOT x780
Number of literals: 10
Clause #44 W:(-15 5) NOT x107 AND NOT x133 AND NOT x156 AND NOT x312 AND NOT x364 AND NOT x432 AND NOT x545 AND NOT x595 AND NOT x647 AND NOT x651 AND NOT x717 AND NOT x787 AND NOT x796
Number of literals: 13
Clause #45 W:(9 11) x237 AND NOT x185 AND NOT x329 AND NOT x362 AND NOT x435 AND NOT x495 AND NOT x601 AND NOT x611 AND NOT x621 AND NOT x721 AND NOT x937 AND NOT x964 AND NOT x965 AND NOT x994 AND NOT x1018
Number of literals: 15
Clause #46 W:(7 -1) NOT x19 AND NOT x146 AND NOT x277 AND NOT x377 AND NOT x411 AND NOT x429 AND NOT x528 AND NOT x531 AND NOT x597 AND NOT x621 AND NOT x716 AND NOT x789 AND NOT x833 AND NOT x891 AND NOT x912 AND NOT x972
Number of literals: 16
Clause #47 W:(1 -10) NOT x308 AND NOT x602 AND NOT x661
Number of literals: 3
Clause #48 W:(10 9) NOT x71 AND NOT x82 AND NOT x122 AND NOT x137 AND NOT x291 AND NOT x404 AND NOT x460 AND NOT x462 AND NOT x630 AND NOT x705 AND NOT x806 AND NOT x855 AND NOT x928 AND NOT x953
Number of literals: 14
Clause #49 W:(-24 31) NOT x95 AND NOT x124 AND NOT x135 AND NOT x188 AND NOT x218 AND NOT x227 AND NOT x235 AND NOT x240 AND NOT x253 AND NOT x324 AND NOT x339 AND NOT x516 AND NOT x585 AND NOT x658 AND NOT x835 AND NOT x1022
Number of literals: 16
Clause #50 W:(-2 -3) NOT x64 AND NOT x293 AND NOT x315 AND NOT x336 AND NOT x408 AND NOT x420 AND NOT x652 AND NOT x758 AND NOT x799 AND NOT x804 AND NOT x845 AND NOT x891 AND NOT x938 AND NOT x999
Number of literals: 14
Clause #51 W:(3 -10) NOT x84 AND NOT x144 AND NOT x222 AND NOT x234 AND NOT x330 AND NOT x382 AND NOT x664 AND NOT x811 AND NOT x842 AND NOT x926 AND NOT x942
Number of literals: 11
Clause #52 W:(-9 -22) NOT x10 AND NOT x171 AND NOT x280 AND NOT x350 AND NOT x658 AND NOT x678 AND NOT x732 AND NOT x784 AND NOT x795 AND NOT x881
Number of literals: 10
Clause #53 W:(-7 4) NOT x164 AND NOT x178 AND NOT x294 AND NOT x311 AND NOT x486 AND NOT x596 AND NOT x618 AND NOT x631 AND NOT x855 AND NOT x943
Number of literals: 10
Clause #54 W:(23 9) NOT x263 AND NOT x875 AND NOT x950 AND NOT x960 AND NOT x982 AND NOT x1012 AND NOT x1020 AND NOT x1022
Number of literals: 8
Clause #55 W:(4 -16) NOT x116 AND NOT x249 AND NOT x307 AND NOT x322 AND NOT x378 AND NOT x394 AND NOT x407 AND NOT x424 AND NOT x516 AND NOT x600 AND NOT x638 AND NOT x727 AND NOT x749 AND NOT x955 AND NOT x1008
Number of literals: 15
Clause #56 W:(20 -1) NOT x7 AND NOT x34 AND NOT x51 AND NOT x153 AND NOT x172 AND NOT x195 AND NOT x246 AND NOT x323 AND NOT x328 AND NOT x435 AND NOT x478 AND NOT x692 AND NOT x699 AND NOT x745 AND NOT x839 AND NOT x904 AND NOT x954 AND NOT x972 AND NOT x1016
Number of literals: 19
Clause #57 W:(-12 -32) NOT x3 AND NOT x71 AND NOT x144 AND NOT x157 AND NOT x164 AND NOT x214 AND NOT x266 AND NOT x310 AND NOT x386 AND NOT x597 AND NOT x651 AND NOT x660 AND NOT x679 AND NOT x832 AND NOT x917 AND NOT x927 AND NOT x931 AND NOT x947
Number of literals: 18
Clause #58 W:(14 -7) NOT x14 AND NOT x267 AND NOT x338 AND NOT x414 AND NOT x435 AND NOT x485 AND NOT x501 AND NOT x530 AND NOT x587 AND NOT x599 AND NOT x738 AND NOT x761 AND NOT x946 AND NOT x984
Number of literals: 14
Clause #59 W:(30 20) NOT x632 AND NOT x638 AND NOT x934
Number of literals: 3
Clause #60 W:(-1 -12) NOT x5 AND NOT x101 AND NOT x249 AND NOT x284 AND NOT x327 AND NOT x432 AND NOT x464 AND NOT x753 AND NOT x834 AND NOT x929 AND NOT x984 AND NOT x1015
Number of literals: 12
Clause #61 W:(-15 7) NOT x53 AND NOT x80 AND NOT x112 AND NOT x148 AND NOT x285 AND NOT x327 AND NOT x392 AND NOT x476 AND NOT x514 AND NOT x665 AND NOT x776 AND NOT x877 AND NOT x892 AND NOT x995 AND NOT x996
Number of literals: 15
Clause #62 W:(54 -2) NOT x129 AND NOT x147 AND NOT x362 AND NOT x372 AND NOT x467 AND NOT x511 AND NOT x554 AND NOT x627 AND NOT x703 AND NOT x827
Number of literals: 10
Clause #63 W:(-5 -5) NOT x85 AND NOT x169 AND NOT x178 AND NOT x224 AND NOT x290 AND NOT x409 AND NOT x415 AND NOT x424 AND NOT x509 AND NOT x650 AND NOT x785 AND NOT x800 AND NOT x838 AND NOT x910 AND NOT x951 AND NOT x1023
Number of literals: 16
Clause #64 W:(-8 13) NOT x46 AND NOT x180 AND NOT x186 AND NOT x291 AND NOT x320 AND NOT x337 AND NOT x350 AND NOT x400 AND NOT x474 AND NOT x477 AND NOT x492 AND NOT x502 AND NOT x534 AND NOT x690 AND NOT x713 AND NOT x1004
Number of literals: 16
Clause #65 W:(-5 -17) NOT x34 AND NOT x156 AND NOT x285 AND NOT x346 AND NOT x390 AND NOT x449 AND NOT x463 AND NOT x583 AND NOT x726 AND NOT x766
Number of literals: 10
Clause #66 W:(-26 14) NOT x219 AND NOT x251 AND NOT x364 AND NOT x424 AND NOT x499 AND NOT x503 AND NOT x640 AND NOT x649 AND NOT x902 AND NOT x1001
Number of literals: 10
Clause #67 W:(31 14) NOT x30 AND NOT x134 AND NOT x252 AND NOT x302 AND NOT x357 AND NOT x373 AND NOT x459 AND NOT x538 AND NOT x642 AND NOT x673 AND NOT x727 AND NOT x742 AND NOT x749 AND NOT x821 AND NOT x855 AND NOT x864 AND NOT x880 AND NOT x937 AND NOT x941 AND NOT x961 AND NOT x988 AND NOT x1000
Number of literals: 22
Clause #68 W:(25 -63) x2 AND NOT x66 AND NOT x183 AND NOT x219 AND NOT x228 AND NOT x298 AND NOT x357 AND NOT x386 AND NOT x500 AND NOT x615 AND NOT x657 AND NOT x718 AND NOT x726 AND NOT x764 AND NOT x791 AND NOT x820 AND NOT x926 AND NOT x999
Number of literals: 18
Clause #69 W:(-27 -5) NOT x33 AND NOT x234 AND NOT x246 AND NOT x248 AND NOT x264 AND NOT x270 AND NOT x330 AND NOT x351 AND NOT x386 AND NOT x391 AND NOT x423 AND NOT x473 AND NOT x800 AND NOT x833 AND NOT x983
Number of literals: 15
Clause #70 W:(5 -9) x728 AND NOT x66 AND NOT x92 AND NOT x103 AND NOT x145 AND NOT x157 AND NOT x313 AND NOT x410 AND NOT x417 AND NOT x446 AND NOT x503 AND NOT x554 AND NOT x595 AND NOT x666 AND NOT x873 AND NOT x1005
Number of literals: 16
Clause #71 W:(4 21) NOT x55 AND NOT x496 AND NOT x618 AND NOT x621 AND NOT x643 AND NOT x646 AND NOT x765 AND NOT x782 AND NOT x969
Number of literals: 9
Clause #72 W:(-29 3) NOT x32 AND NOT x224 AND NOT x356 AND NOT x607 AND NOT x677 AND NOT x753 AND NOT x783 AND NOT x785 AND NOT x969 AND NOT x1012
Number of literals: 10
Clause #73 W:(17 26) NOT x57 AND NOT x100 AND NOT x219 AND NOT x230 AND NOT x236 AND NOT x242 AND NOT x379 AND NOT x402 AND NOT x514 AND NOT x595 AND NOT x672 AND NOT x744 AND NOT x746 AND NOT x846 AND NOT x880 AND NOT x979 AND NOT x1008 AND NOT x1013 AND NOT x1018
Number of literals: 19
Clause #74 W:(-12 -27) NOT x172 AND NOT x198 AND NOT x205 AND NOT x233 AND NOT x242 AND NOT x264 AND NOT x511 AND NOT x601 AND NOT x827 AND NOT x956 AND NOT x980
Number of literals: 11
Clause #75 W:(8 6) NOT x3 AND NOT x389 AND NOT x467 AND NOT x519 AND NOT x534 AND NOT x561 AND NOT x575 AND NOT x638 AND NOT x692 AND NOT x708 AND NOT x860 AND NOT x932 AND NOT x1004
Number of literals: 13
Clause #76 W:(-10 -25) NOT x27 AND NOT x44 AND NOT x101 AND NOT x200 AND NOT x245 AND NOT x374 AND NOT x424 AND NOT x426 AND NOT x427 AND NOT x523 AND NOT x562 AND NOT x619 AND NOT x866 AND NOT x969 AND NOT x974
Number of literals: 15
Clause #77 W:(-12 -1) NOT x251 AND NOT x261 AND NOT x262 AND NOT x393 AND NOT x401 AND NOT x426 AND NOT x558 AND NOT x566 AND NOT x621 AND NOT x636 AND NOT x643 AND NOT x715 AND NOT x880 AND NOT x968
Number of literals: 14
Clause #78 W:(-11 -7) NOT x20 AND NOT x32 AND NOT x135 AND NOT x146 AND NOT x159 AND NOT x238 AND NOT x492 AND NOT x567 AND NOT x574 AND NOT x581 AND NOT x764 AND NOT x875 AND NOT x878 AND NOT x931
Number of literals: 14
Clause #79 W:(-24 -4) NOT x24 AND NOT x46 AND NOT x53 AND NOT x104 AND NOT x277 AND NOT x334 AND NOT x346 AND NOT x476 AND NOT x606 AND NOT x660 AND NOT x716 AND NOT x733 AND NOT x737 AND NOT x738 AND NOT x789 AND NOT x800 AND NOT x886 AND NOT x894
Number of literals: 18
Clause #80 W:(8 -3) NOT x66 AND NOT x258 AND NOT x342 AND NOT x394 AND NOT x420 AND NOT x490 AND NOT x593 AND NOT x645 AND NOT x709 AND NOT x741 AND NOT x782 AND NOT x895 AND NOT x931 AND NOT x1003
Number of literals: 14
Clause #81 W:(-19 -27) NOT x24 AND NOT x152 AND NOT x255 AND NOT x284 AND NOT x300 AND NOT x321 AND NOT x418 AND NOT x419 AND NOT x493 AND NOT x551 AND NOT x568 AND NOT x862 AND NOT x917
Number of literals: 13
Clause #82 W:(4 1) NOT x86 AND NOT x135 AND NOT x274 AND NOT x286 AND NOT x488 AND NOT x534 AND NOT x536 AND NOT x539 AND NOT x568 AND NOT x602 AND NOT x614 AND NOT x685 AND NOT x694 AND NOT x700 AND NOT x1022
Number of literals: 15
Clause #83 W:(4 -10) NOT x32 AND NOT x34 AND NOT x100 AND NOT x264 AND NOT x355 AND NOT x443 AND NOT x473 AND NOT x505 AND NOT x561 AND NOT x574 AND NOT x627 AND NOT x670 AND NOT x875 AND NOT x936
Number of literals: 14
Clause #84 W:(-4 -1) x935 AND NOT x3 AND NOT x30 AND NOT x102 AND NOT x115 AND NOT x130 AND NOT x168 AND NOT x247 AND NOT x301 AND NOT x499 AND NOT x566 AND NOT x887 AND NOT x934 AND NOT x974
Number of literals: 14
Clause #85 W:(4 10) NOT x82 AND NOT x152 AND NOT x273 AND NOT x380 AND NOT x412 AND NOT x425 AND NOT x459 AND NOT x469 AND NOT x495 AND NOT x580 AND NOT x637 AND NOT x684 AND NOT x756 AND NOT x863 AND NOT x872 AND NOT x897 AND NOT x905 AND NOT x941 AND NOT x979
Number of literals: 19
Clause #86 W:(-36 40) NOT x8 AND NOT x22 AND NOT x132 AND NOT x248 AND NOT x344 AND NOT x514 AND NOT x517 AND NOT x758 AND NOT x867 AND NOT x918 AND NOT x927 AND NOT x966
Number of literals: 12
Clause #87 W:(-20 -15) NOT x68 AND NOT x101 AND NOT x132 AND NOT x429 AND NOT x557 AND NOT x579 AND NOT x584 AND NOT x645 AND NOT x656 AND NOT x657 AND NOT x686 AND NOT x691 AND NOT x707 AND NOT x713 AND NOT x764 AND NOT x785 AND NOT x877 AND NOT x988
Number of literals: 18
Clause #88 W:(4 28) NOT x287 AND NOT x332 AND NOT x353 AND NOT x362 AND NOT x405 AND NOT x511 AND NOT x758 AND NOT x1009
Number of literals: 8
Clause #89 W:(1 -3) NOT x37 AND NOT x461 AND NOT x548 AND NOT x562 AND NOT x662 AND NOT x670 AND NOT x696 AND NOT x836 AND NOT x873 AND NOT x936 AND NOT x959
Number of literals: 11
Clause #90 W:(-4 -24) NOT x86 AND NOT x283 AND NOT x516 AND NOT x642 AND NOT x682 AND NOT x715 AND NOT x722 AND NOT x952 AND NOT x967 AND NOT x1018
Number of literals: 10
Clause #91 W:(25 19) NOT x81 AND NOT x180 AND NOT x197 AND NOT x219 AND NOT x245 AND NOT x253 AND NOT x292 AND NOT x394 AND NOT x442 AND NOT x466 AND NOT x500 AND NOT x614 AND NOT x637 AND NOT x700 AND NOT x795 AND NOT x808 AND NOT x851 AND NOT x976
Number of literals: 18
Clause #92 W:(-14 -4) NOT x68 AND NOT x135 AND NOT x152 AND NOT x185 AND NOT x234 AND NOT x465 AND NOT x476 AND NOT x535 AND NOT x596 AND NOT x714 AND NOT x718 AND NOT x725 AND NOT x753 AND NOT x811 AND NOT x932 AND NOT x999
Number of literals: 16
Clause #93 W:(-17 8) NOT x50 AND NOT x63 AND NOT x297 AND NOT x328 AND NOT x331 AND NOT x589 AND NOT x700 AND NOT x750 AND NOT x752 AND NOT x789 AND NOT x842 AND NOT x867 AND NOT x883 AND NOT x950
Number of literals: 14
Clause #94 W:(6 2) NOT x24 AND NOT x231 AND NOT x292 AND NOT x293 AND NOT x429 AND NOT x437 AND NOT x442 AND NOT x454 AND NOT x469 AND NOT x474 AND NOT x475 AND NOT x658 AND NOT x898
Number of literals: 13
Clause #95 W:(36 29) NOT x93 AND NOT x110 AND NOT x111 AND NOT x139 AND NOT x201 AND NOT x247 AND NOT x259 AND NOT x276 AND NOT x277 AND NOT x400 AND NOT x434 AND NOT x507 AND NOT x577 AND NOT x585 AND NOT x588 AND NOT x612 AND NOT x636 AND NOT x656 AND NOT x761 AND NOT x973
Number of literals: 20
Clause #96 W:(-13 8) NOT x281 AND NOT x406 AND NOT x422 AND NOT x693 AND NOT x765 AND NOT x903 AND NOT x906 AND NOT x1019
Number of literals: 8
Clause #97 W:(1 -37) NOT x13 AND NOT x822
Number of literals: 2
Clause #98 W:(-3 7) NOT x15 AND NOT x183 AND NOT x257 AND NOT x270 AND NOT x275 AND NOT x288 AND NOT x290 AND NOT x306 AND NOT x403 AND NOT x447 AND NOT x588 AND NOT x637 AND NOT x706 AND NOT x768 AND NOT x811 AND NOT x847 AND NOT x856 AND NOT x920 AND NOT x1011
Number of literals: 19
Clause #99 W:(-11 -9) NOT x160 AND NOT x177 AND NOT x180 AND NOT x313 AND NOT x535 AND NOT x631 AND NOT x652 AND NOT x765 AND NOT x788 AND NOT x797 AND NOT x851 AND NOT x894 AND NOT x949 AND NOT x964 AND NOT x1003
Number of literals: 15
results: Results(training_time_s=3238.2642800807953, inference_time_s=0.9803409576416016, memory_usage_mb=710.8203125, accuracy=0.529, precision=0.279841, recall=0.529, f1_score=0.36604447351209946)
confusion matrix: [[0, 471], [0, 529]]
reporting runs/2024-12-18T10:37:24/results.toml
reporting runs/2024-12-18T10:37:24/confusion_matrix.csv
reporting runs/2024-12-18T10:37:24/weights.csv
