creating new run in runs/2024-12-18T22:05:29
reporting parameters in runs/2024-12-18T22:05:29/params.toml, values:
{'epochs': 100, 'number_of_clauses': 200, 't': 100, 's': 1.2501051496575988, 'depth': 3, 'hypervector_size': 256, 'hypervector_bits': 4, 'message_size': 512, 'message_bits': 2, 'double_hashing': False, 'max_included_literals': 32}
loading dataset from /home/ask/skole-learning-systems/attempt1/data/9x9_medium.csv
hashing dataset
saving dataset report to runs/2024-12-18T22:05:29/dataset.toml, content:
{'filename': '/home/ask/skole-learning-systems/attempt1/data/9x9_medium.csv', 'hash-blake2b': '890c4290fe333d809afccbce690e86f2361831e715feec14a02ec63e1cbd9351f4dc6a1fe73815345cc06dbea56d9f4eb6a110c33463f89e03daf36e8a7cace1', 'dimensions': 9, 'rows': 10000}
X_train shape: (9000,)
X_test shape: (1000,)
Creating training data
bytecode dump:
>          0	NOP(arg=None, lineno=72)
           2	RESUME(arg=0, lineno=72)
           4	LOAD_GLOBAL(arg=1, lineno=75)
          14	LOAD_FAST(arg=1, lineno=75)
          16	LOAD_ATTR(arg=2, lineno=75)
          36	LOAD_CONST(arg=1, lineno=75)
          38	BINARY_SUBSCR(arg=None, lineno=75)
          42	CALL(arg=1, lineno=75)
          50	GET_ITER(arg=None, lineno=75)
>         52	FOR_ITER(arg=50, lineno=75)
          56	STORE_FAST(arg=2, lineno=75)
          58	LOAD_GLOBAL(arg=1, lineno=76)
          68	LOAD_FAST(arg=0, lineno=76)
          70	LOAD_FAST(arg=0, lineno=76)
          72	LOAD_CONST(arg=2, lineno=76)
          74	BINARY_OP(arg=5, lineno=76)
          78	CALL(arg=2, lineno=76)
          86	GET_ITER(arg=None, lineno=76)
>         88	FOR_ITER(arg=30, lineno=76)
          92	STORE_FAST(arg=3, lineno=76)
          94	LOAD_FAST(arg=3, lineno=77)
          96	LOAD_CONST(arg=3, lineno=77)
          98	BINARY_OP(arg=2, lineno=77)
         102	STORE_FAST(arg=4, lineno=77)
         104	LOAD_FAST(arg=3, lineno=78)
         106	LOAD_CONST(arg=3, lineno=78)
         108	BINARY_OP(arg=6, lineno=78)
         112	STORE_FAST(arg=5, lineno=78)
         114	LOAD_FAST(arg=1, lineno=79)
         116	LOAD_FAST(arg=2, lineno=79)
         118	LOAD_FAST(arg=4, lineno=79)
         120	BUILD_TUPLE(arg=2, lineno=79)
         122	COPY(arg=2, lineno=79)
         124	COPY(arg=2, lineno=79)
         126	BINARY_SUBSCR(arg=None, lineno=79)
         130	LOAD_CONST(arg=4, lineno=79)
         132	LOAD_FAST(arg=5, lineno=79)
         134	BINARY_OP(arg=3, lineno=79)
         138	BINARY_OP(arg=20, lineno=79)
         142	SWAP(arg=3, lineno=79)
         144	SWAP(arg=2, lineno=79)
         146	STORE_SUBSCR(arg=None, lineno=79)
         150	JUMP_BACKWARD(arg=32, lineno=79)
>        152	END_FOR(arg=None, lineno=76)
         154	JUMP_BACKWARD(arg=52, lineno=76)
>        156	END_FOR(arg=None, lineno=75)
         158	RETURN_CONST(arg=0, lineno=75)
pending: deque([State(pc_initial=0 nstack_initial=0)])
stack: []
state.pc_initial: State(pc_initial=0 nstack_initial=0)
dispatch pc=0, inst=NOP(arg=None, lineno=72)
stack []
dispatch pc=2, inst=RESUME(arg=0, lineno=72)
stack []
dispatch pc=4, inst=LOAD_GLOBAL(arg=1, lineno=75)
stack []
dispatch pc=14, inst=LOAD_FAST(arg=1, lineno=75)
stack ['$null$4.1', '$4load_global.0']
dispatch pc=16, inst=LOAD_ATTR(arg=2, lineno=75)
stack ['$null$4.1', '$4load_global.0', '$X14.2']
dispatch pc=36, inst=LOAD_CONST(arg=1, lineno=75)
stack ['$null$4.1', '$4load_global.0', '$16load_attr.3']
dispatch pc=38, inst=BINARY_SUBSCR(arg=None, lineno=75)
stack ['$null$4.1', '$4load_global.0', '$16load_attr.3', '$const36.4']
dispatch pc=42, inst=CALL(arg=1, lineno=75)
stack ['$null$4.1', '$4load_global.0', '$38binary_subscr.5']
dispatch pc=50, inst=GET_ITER(arg=None, lineno=75)
stack ['$42call.6']
end state. edges=[Edge(pc=52, stack=('$50get_iter.7',), blockstack=(), npush=0)]
pending: deque([State(pc_initial=52 nstack_initial=1)])
stack: ['$phi52.0']
state.pc_initial: State(pc_initial=52 nstack_initial=1)
dispatch pc=52, inst=FOR_ITER(arg=50, lineno=75)
stack ['$phi52.0']
end state. edges=[Edge(pc=156, stack=('$phi52.0', '$52for_iter.2'), blockstack=(), npush=0), Edge(pc=56, stack=('$phi52.0', '$52for_iter.2'), blockstack=(), npush=0)]
pending: deque([State(pc_initial=156 nstack_initial=2), State(pc_initial=56 nstack_initial=2)])
stack: ['$phi156.0', '$phi156.1']
state.pc_initial: State(pc_initial=156 nstack_initial=2)
dispatch pc=156, inst=END_FOR(arg=None, lineno=75)
stack ['$phi156.0', '$phi156.1']
dispatch pc=158, inst=RETURN_CONST(arg=0, lineno=75)
stack []
end state. edges=[]
pending: deque([State(pc_initial=56 nstack_initial=2)])
stack: ['$phi56.0', '$phi56.1']
state.pc_initial: State(pc_initial=56 nstack_initial=2)
dispatch pc=56, inst=STORE_FAST(arg=2, lineno=75)
stack ['$phi56.0', '$phi56.1']
dispatch pc=58, inst=LOAD_GLOBAL(arg=1, lineno=76)
stack ['$phi56.0']
dispatch pc=68, inst=LOAD_FAST(arg=0, lineno=76)
stack ['$phi56.0', '$null$58.3', '$58load_global.2']
dispatch pc=70, inst=LOAD_FAST(arg=0, lineno=76)
stack ['$phi56.0', '$null$58.3', '$58load_global.2', '$hypervector_size68.4']
dispatch pc=72, inst=LOAD_CONST(arg=2, lineno=76)
stack ['$phi56.0', '$null$58.3', '$58load_global.2', '$hypervector_size68.4', '$hypervector_size70.5']
dispatch pc=74, inst=BINARY_OP(arg=5, lineno=76)
stack ['$phi56.0', '$null$58.3', '$58load_global.2', '$hypervector_size68.4', '$hypervector_size70.5', '$const72.6']
dispatch pc=78, inst=CALL(arg=2, lineno=76)
stack ['$phi56.0', '$null$58.3', '$58load_global.2', '$hypervector_size68.4', '$binop_mul74.7']
dispatch pc=86, inst=GET_ITER(arg=None, lineno=76)
stack ['$phi56.0', '$78call.8']
end state. edges=[Edge(pc=88, stack=('$phi56.0', '$86get_iter.9'), blockstack=(), npush=0)]
pending: deque([State(pc_initial=88 nstack_initial=2)])
stack: ['$phi88.0', '$phi88.1']
state.pc_initial: State(pc_initial=88 nstack_initial=2)
dispatch pc=88, inst=FOR_ITER(arg=30, lineno=76)
stack ['$phi88.0', '$phi88.1']
end state. edges=[Edge(pc=152, stack=('$phi88.0', '$phi88.1', '$88for_iter.3'), blockstack=(), npush=0), Edge(pc=92, stack=('$phi88.0', '$phi88.1', '$88for_iter.3'), blockstack=(), npush=0)]
pending: deque([State(pc_initial=152 nstack_initial=3), State(pc_initial=92 nstack_initial=3)])
stack: ['$phi152.0', '$phi152.1', '$phi152.2']
state.pc_initial: State(pc_initial=152 nstack_initial=3)
dispatch pc=152, inst=END_FOR(arg=None, lineno=76)
stack ['$phi152.0', '$phi152.1', '$phi152.2']
dispatch pc=154, inst=JUMP_BACKWARD(arg=52, lineno=76)
stack ['$phi152.0']
end state. edges=[Edge(pc=52, stack=('$phi152.0',), blockstack=(), npush=0)]
pending: deque([State(pc_initial=92 nstack_initial=3), State(pc_initial=52 nstack_initial=1)])
stack: ['$phi92.0', '$phi92.1', '$phi92.2']
state.pc_initial: State(pc_initial=92 nstack_initial=3)
dispatch pc=92, inst=STORE_FAST(arg=3, lineno=76)
stack ['$phi92.0', '$phi92.1', '$phi92.2']
dispatch pc=94, inst=LOAD_FAST(arg=3, lineno=77)
stack ['$phi92.0', '$phi92.1']
dispatch pc=96, inst=LOAD_CONST(arg=3, lineno=77)
stack ['$phi92.0', '$phi92.1', '$k94.3']
dispatch pc=98, inst=BINARY_OP(arg=2, lineno=77)
stack ['$phi92.0', '$phi92.1', '$k94.3', '$const96.4']
dispatch pc=102, inst=STORE_FAST(arg=4, lineno=77)
stack ['$phi92.0', '$phi92.1', '$binop_floordiv98.5']
dispatch pc=104, inst=LOAD_FAST(arg=3, lineno=78)
stack ['$phi92.0', '$phi92.1']
dispatch pc=106, inst=LOAD_CONST(arg=3, lineno=78)
stack ['$phi92.0', '$phi92.1', '$k104.6']
dispatch pc=108, inst=BINARY_OP(arg=6, lineno=78)
stack ['$phi92.0', '$phi92.1', '$k104.6', '$const106.7']
dispatch pc=112, inst=STORE_FAST(arg=5, lineno=78)
stack ['$phi92.0', '$phi92.1', '$binop_mod108.8']
dispatch pc=114, inst=LOAD_FAST(arg=1, lineno=79)
stack ['$phi92.0', '$phi92.1']
dispatch pc=116, inst=LOAD_FAST(arg=2, lineno=79)
stack ['$phi92.0', '$phi92.1', '$X114.9']
dispatch pc=118, inst=LOAD_FAST(arg=4, lineno=79)
stack ['$phi92.0', '$phi92.1', '$X114.9', '$i116.10']
dispatch pc=120, inst=BUILD_TUPLE(arg=2, lineno=79)
stack ['$phi92.0', '$phi92.1', '$X114.9', '$i116.10', '$chunk118.11']
dispatch pc=122, inst=COPY(arg=2, lineno=79)
stack ['$phi92.0', '$phi92.1', '$X114.9', '$120build_tuple.12']
dispatch pc=124, inst=COPY(arg=2, lineno=79)
stack ['$phi92.0', '$phi92.1', '$X114.9', '$120build_tuple.12', '$X114.9']
dispatch pc=126, inst=BINARY_SUBSCR(arg=None, lineno=79)
stack ['$phi92.0', '$phi92.1', '$X114.9', '$120build_tuple.12', '$X114.9', '$120build_tuple.12']
dispatch pc=130, inst=LOAD_CONST(arg=4, lineno=79)
stack ['$phi92.0', '$phi92.1', '$X114.9', '$120build_tuple.12', '$126binary_subscr.13']
dispatch pc=132, inst=LOAD_FAST(arg=5, lineno=79)
stack ['$phi92.0', '$phi92.1', '$X114.9', '$120build_tuple.12', '$126binary_subscr.13', '$const130.14']
dispatch pc=134, inst=BINARY_OP(arg=3, lineno=79)
stack ['$phi92.0', '$phi92.1', '$X114.9', '$120build_tuple.12', '$126binary_subscr.13', '$const130.14', '$pos132.15']
dispatch pc=138, inst=BINARY_OP(arg=20, lineno=79)
stack ['$phi92.0', '$phi92.1', '$X114.9', '$120build_tuple.12', '$126binary_subscr.13', '$binop_lshift134.16']
dispatch pc=142, inst=SWAP(arg=3, lineno=79)
stack ['$phi92.0', '$phi92.1', '$X114.9', '$120build_tuple.12', '$binop_ior138.17']
dispatch pc=144, inst=SWAP(arg=2, lineno=79)
stack ['$phi92.0', '$phi92.1', '$binop_ior138.17', '$120build_tuple.12', '$X114.9']
dispatch pc=146, inst=STORE_SUBSCR(arg=None, lineno=79)
stack ['$phi92.0', '$phi92.1', '$binop_ior138.17', '$X114.9', '$120build_tuple.12']
dispatch pc=150, inst=JUMP_BACKWARD(arg=32, lineno=79)
stack ['$phi92.0', '$phi92.1']
end state. edges=[Edge(pc=88, stack=('$phi92.0', '$phi92.1'), blockstack=(), npush=0)]
pending: deque([State(pc_initial=52 nstack_initial=1), State(pc_initial=88 nstack_initial=2)])
pending: deque([State(pc_initial=88 nstack_initial=2)])
-------------------------Prune PHIs-------------------------
Used_phis: defaultdict(<class 'set'>,
            {State(pc_initial=0 nstack_initial=0): set(),
             State(pc_initial=52 nstack_initial=1): {'$phi52.0'},
             State(pc_initial=56 nstack_initial=2): {'$phi56.1'},
             State(pc_initial=88 nstack_initial=2): {'$phi88.1'},
             State(pc_initial=92 nstack_initial=3): {'$phi92.2'},
             State(pc_initial=152 nstack_initial=3): set(),
             State(pc_initial=156 nstack_initial=2): set()})
defmap: {'$phi152.2': State(pc_initial=88 nstack_initial=2),
 '$phi156.1': State(pc_initial=52 nstack_initial=1),
 '$phi52.0': State(pc_initial=0 nstack_initial=0),
 '$phi56.1': State(pc_initial=52 nstack_initial=1),
 '$phi88.1': State(pc_initial=56 nstack_initial=2),
 '$phi92.2': State(pc_initial=88 nstack_initial=2)}
phismap: defaultdict(<class 'set'>,
            {'$phi152.0': {('$phi88.0', State(pc_initial=88 nstack_initial=2))},
             '$phi152.1': {('$phi88.1', State(pc_initial=88 nstack_initial=2))},
             '$phi152.2': {('$88for_iter.3',
                            State(pc_initial=88 nstack_initial=2))},
             '$phi156.0': {('$phi52.0', State(pc_initial=52 nstack_initial=1))},
             '$phi156.1': {('$52for_iter.2',
                            State(pc_initial=52 nstack_initial=1))},
             '$phi52.0': {('$50get_iter.7',
                           State(pc_initial=0 nstack_initial=0)),
                          ('$phi152.0',
                           State(pc_initial=152 nstack_initial=3))},
             '$phi56.0': {('$phi52.0', State(pc_initial=52 nstack_initial=1))},
             '$phi56.1': {('$52for_iter.2',
                           State(pc_initial=52 nstack_initial=1))},
             '$phi88.0': {('$phi56.0', State(pc_initial=56 nstack_initial=2)),
                          ('$phi92.0', State(pc_initial=92 nstack_initial=3))},
             '$phi88.1': {('$86get_iter.9',
                           State(pc_initial=56 nstack_initial=2)),
                          ('$phi92.1', State(pc_initial=92 nstack_initial=3))},
             '$phi92.0': {('$phi88.0', State(pc_initial=88 nstack_initial=2))},
             '$phi92.1': {('$phi88.1', State(pc_initial=88 nstack_initial=2))},
             '$phi92.2': {('$88for_iter.3',
                           State(pc_initial=88 nstack_initial=2))}})
changing phismap: defaultdict(<class 'set'>,
            {'$phi152.0': {('$phi56.0', State(pc_initial=56 nstack_initial=2)),
                           ('$phi92.0', State(pc_initial=92 nstack_initial=3))},
             '$phi152.1': {('$86get_iter.9',
                            State(pc_initial=56 nstack_initial=2)),
                           ('$phi92.1', State(pc_initial=92 nstack_initial=3))},
             '$phi152.2': {('$88for_iter.3',
                            State(pc_initial=88 nstack_initial=2))},
             '$phi156.0': {('$50get_iter.7',
                            State(pc_initial=0 nstack_initial=0)),
                           ('$phi152.0',
                            State(pc_initial=152 nstack_initial=3))},
             '$phi156.1': {('$52for_iter.2',
                            State(pc_initial=52 nstack_initial=1))},
             '$phi52.0': {('$50get_iter.7',
                           State(pc_initial=0 nstack_initial=0)),
                          ('$phi56.0', State(pc_initial=56 nstack_initial=2)),
                          ('$phi92.0', State(pc_initial=92 nstack_initial=3))},
             '$phi56.0': {('$50get_iter.7',
                           State(pc_initial=0 nstack_initial=0)),
                          ('$phi56.0', State(pc_initial=56 nstack_initial=2)),
                          ('$phi92.0', State(pc_initial=92 nstack_initial=3))},
             '$phi56.1': {('$52for_iter.2',
                           State(pc_initial=52 nstack_initial=1))},
             '$phi88.0': {('$50get_iter.7',
                           State(pc_initial=0 nstack_initial=0)),
                          ('$phi88.0', State(pc_initial=88 nstack_initial=2))},
             '$phi88.1': {('$86get_iter.9',
                           State(pc_initial=56 nstack_initial=2)),
                          ('$phi88.1', State(pc_initial=88 nstack_initial=2))},
             '$phi92.0': {('$50get_iter.7',
                           State(pc_initial=0 nstack_initial=0))},
             '$phi92.1': {('$86get_iter.9',
                           State(pc_initial=56 nstack_initial=2))},
             '$phi92.2': {('$88for_iter.3',
                           State(pc_initial=88 nstack_initial=2))}})
changing phismap: defaultdict(<class 'set'>,
            {'$phi152.0': {('$50get_iter.7',
                            State(pc_initial=0 nstack_initial=0))},
             '$phi152.1': {('$86get_iter.9',
                            State(pc_initial=56 nstack_initial=2))},
             '$phi152.2': {('$88for_iter.3',
                            State(pc_initial=88 nstack_initial=2))},
             '$phi156.0': {('$50get_iter.7',
                            State(pc_initial=0 nstack_initial=0))},
             '$phi156.1': {('$52for_iter.2',
                            State(pc_initial=52 nstack_initial=1))},
             '$phi52.0': {('$50get_iter.7',
                           State(pc_initial=0 nstack_initial=0))},
             '$phi56.0': {('$50get_iter.7',
                           State(pc_initial=0 nstack_initial=0))},
             '$phi56.1': {('$52for_iter.2',
                           State(pc_initial=52 nstack_initial=1))},
             '$phi88.0': {('$50get_iter.7',
                           State(pc_initial=0 nstack_initial=0))},
             '$phi88.1': {('$86get_iter.9',
                           State(pc_initial=56 nstack_initial=2))},
             '$phi92.0': {('$50get_iter.7',
                           State(pc_initial=0 nstack_initial=0))},
             '$phi92.1': {('$86get_iter.9',
                           State(pc_initial=56 nstack_initial=2))},
             '$phi92.2': {('$88for_iter.3',
                           State(pc_initial=88 nstack_initial=2))}})
changing phismap: defaultdict(<class 'set'>,
            {'$phi152.0': {('$50get_iter.7',
                            State(pc_initial=0 nstack_initial=0))},
             '$phi152.1': {('$86get_iter.9',
                            State(pc_initial=56 nstack_initial=2))},
             '$phi152.2': {('$88for_iter.3',
                            State(pc_initial=88 nstack_initial=2))},
             '$phi156.0': {('$50get_iter.7',
                            State(pc_initial=0 nstack_initial=0))},
             '$phi156.1': {('$52for_iter.2',
                            State(pc_initial=52 nstack_initial=1))},
             '$phi52.0': {('$50get_iter.7',
                           State(pc_initial=0 nstack_initial=0))},
             '$phi56.0': {('$50get_iter.7',
                           State(pc_initial=0 nstack_initial=0))},
             '$phi56.1': {('$52for_iter.2',
                           State(pc_initial=52 nstack_initial=1))},
             '$phi88.0': {('$50get_iter.7',
                           State(pc_initial=0 nstack_initial=0))},
             '$phi88.1': {('$86get_iter.9',
                           State(pc_initial=56 nstack_initial=2))},
             '$phi92.0': {('$50get_iter.7',
                           State(pc_initial=0 nstack_initial=0))},
             '$phi92.1': {('$86get_iter.9',
                           State(pc_initial=56 nstack_initial=2))},
             '$phi92.2': {('$88for_iter.3',
                           State(pc_initial=88 nstack_initial=2))}})
keep phismap: {'$phi52.0': {('$50get_iter.7', State(pc_initial=0 nstack_initial=0))},
 '$phi56.1': {('$52for_iter.2', State(pc_initial=52 nstack_initial=1))},
 '$phi88.1': {('$86get_iter.9', State(pc_initial=56 nstack_initial=2))},
 '$phi92.2': {('$88for_iter.3', State(pc_initial=88 nstack_initial=2))}}
new_out: defaultdict(<class 'dict'>,
            {State(pc_initial=0 nstack_initial=0): {'$phi52.0': '$50get_iter.7'},
             State(pc_initial=52 nstack_initial=1): {'$phi56.1': '$52for_iter.2'},
             State(pc_initial=56 nstack_initial=2): {'$phi88.1': '$86get_iter.9'},
             State(pc_initial=88 nstack_initial=2): {'$phi92.2': '$88for_iter.3'}})
----------------------DONE Prune PHIs-----------------------
block_infos State(pc_initial=0 nstack_initial=0):
AdaptBlockInfo(insts=((0, {}), (2, {}), (4, {'idx': 0, 'res': '$4load_global.0'}), (14, {'res': '$X14.2'}), (16, {'item': '$X14.2', 'res': '$16load_attr.3'}), (36, {'res': '$const36.4'}), (38, {'index': '$const36.4', 'target': '$16load_attr.3', 'res': '$38binary_subscr.5'}), (42, {'func': '$4load_global.0', 'args': ['$38binary_subscr.5'], 'kw_names': None, 'res': '$42call.6'}), (50, {'value': '$42call.6', 'res': '$50get_iter.7'})), outgoing_phis={'$phi52.0': '$50get_iter.7'}, blockstack=(), active_try_block=None, outgoing_edgepushed={52: ('$50get_iter.7',)})
block_infos State(pc_initial=52 nstack_initial=1):
AdaptBlockInfo(insts=((52, {'iterator': '$phi52.0', 'pair': '$52for_iter.1', 'indval': '$52for_iter.2', 'pred': '$52for_iter.3'}),), outgoing_phis={'$phi56.1': '$52for_iter.2'}, blockstack=(), active_try_block=None, outgoing_edgepushed={156: ('$phi52.0', '$52for_iter.2'), 56: ('$phi52.0', '$52for_iter.2')})
block_infos State(pc_initial=56 nstack_initial=2):
AdaptBlockInfo(insts=((56, {'value': '$phi56.1'}), (58, {'idx': 0, 'res': '$58load_global.2'}), (68, {'res': '$hypervector_size68.4'}), (70, {'res': '$hypervector_size70.5'}), (72, {'res': '$const72.6'}), (74, {'op': '*', 'lhs': '$hypervector_size70.5', 'rhs': '$const72.6', 'res': '$binop_mul74.7'}), (78, {'func': '$58load_global.2', 'args': ['$hypervector_size68.4', '$binop_mul74.7'], 'kw_names': None, 'res': '$78call.8'}), (86, {'value': '$78call.8', 'res': '$86get_iter.9'})), outgoing_phis={'$phi88.1': '$86get_iter.9'}, blockstack=(), active_try_block=None, outgoing_edgepushed={88: ('$phi56.0', '$86get_iter.9')})
block_infos State(pc_initial=88 nstack_initial=2):
AdaptBlockInfo(insts=((88, {'iterator': '$phi88.1', 'pair': '$88for_iter.2', 'indval': '$88for_iter.3', 'pred': '$88for_iter.4'}),), outgoing_phis={'$phi92.2': '$88for_iter.3'}, blockstack=(), active_try_block=None, outgoing_edgepushed={152: ('$phi88.0', '$phi88.1', '$88for_iter.3'), 92: ('$phi88.0', '$phi88.1', '$88for_iter.3')})
block_infos State(pc_initial=92 nstack_initial=3):
AdaptBlockInfo(insts=((92, {'value': '$phi92.2'}), (94, {'res': '$k94.3'}), (96, {'res': '$const96.4'}), (98, {'op': '//', 'lhs': '$k94.3', 'rhs': '$const96.4', 'res': '$binop_floordiv98.5'}), (102, {'value': '$binop_floordiv98.5'}), (104, {'res': '$k104.6'}), (106, {'res': '$const106.7'}), (108, {'op': '%', 'lhs': '$k104.6', 'rhs': '$const106.7', 'res': '$binop_mod108.8'}), (112, {'value': '$binop_mod108.8'}), (114, {'res': '$X114.9'}), (116, {'res': '$i116.10'}), (118, {'res': '$chunk118.11'}), (120, {'items': ['$i116.10', '$chunk118.11'], 'res': '$120build_tuple.12'}), (126, {'index': '$120build_tuple.12', 'target': '$X114.9', 'res': '$126binary_subscr.13'}), (130, {'res': '$const130.14'}), (132, {'res': '$pos132.15'}), (134, {'op': '<<', 'lhs': '$const130.14', 'rhs': '$pos132.15', 'res': '$binop_lshift134.16'}), (138, {'op': '|=', 'lhs': '$126binary_subscr.13', 'rhs': '$binop_lshift134.16', 'res': '$binop_ior138.17'}), (146, {'target': '$X114.9', 'index': '$120build_tuple.12', 'value': '$binop_ior138.17'}), (150, {})), outgoing_phis={}, blockstack=(), active_try_block=None, outgoing_edgepushed={88: ('$phi92.0', '$phi92.1')})
block_infos State(pc_initial=152 nstack_initial=3):
AdaptBlockInfo(insts=((154, {}),), outgoing_phis={}, blockstack=(), active_try_block=None, outgoing_edgepushed={52: ('$phi152.0',)})
block_infos State(pc_initial=156 nstack_initial=2):
AdaptBlockInfo(insts=((158, {'retval': '$const158.2', 'castval': '$158return_const.3'}),), outgoing_phis={}, blockstack=(), active_try_block=None, outgoing_edgepushed={})
label 0:
    hypervector_size = arg(0, name=hypervector_size) ['hypervector_size']
    X = arg(1, name=X)                       ['X']
    $4load_global.0 = global(range: <class 'range'>) ['$4load_global.0']
    $16load_attr.3 = getattr(value=X, attr=shape) ['$16load_attr.3', 'X']
    $const36.4 = const(int, 0)               ['$const36.4']
    $38binary_subscr.5 = getitem(value=$16load_attr.3, index=$const36.4, fn=<built-in function getitem>) ['$16load_attr.3', '$38binary_subscr.5', '$const36.4']
    $42call.6 = call $4load_global.0($38binary_subscr.5, func=$4load_global.0, args=[Var($38binary_subscr.5, graphs.py:75)], kws=(), vararg=None, varkwarg=None, target=None) ['$38binary_subscr.5', '$42call.6', '$4load_global.0']
    $50get_iter.7 = getiter(value=$42call.6) ['$42call.6', '$50get_iter.7']
    $phi52.0 = $50get_iter.7                 ['$50get_iter.7', '$phi52.0']
    jump 52                                  []
label 52:
    $52for_iter.1 = iternext(value=$phi52.0) ['$52for_iter.1', '$phi52.0']
    $52for_iter.2 = pair_first(value=$52for_iter.1) ['$52for_iter.1', '$52for_iter.2']
    $52for_iter.3 = pair_second(value=$52for_iter.1) ['$52for_iter.1', '$52for_iter.3']
    $phi56.1 = $52for_iter.2                 ['$52for_iter.2', '$phi56.1']
    branch $52for_iter.3, 56, 156            ['$52for_iter.3']
label 56:
    i = $phi56.1                             ['$phi56.1', 'i']
    $58load_global.2 = global(range: <class 'range'>) ['$58load_global.2']
    $const72.6 = const(int, 2)               ['$const72.6']
    $binop_mul74.7 = hypervector_size * $const72.6 ['$binop_mul74.7', '$const72.6', 'hypervector_size']
    $78call.8 = call $58load_global.2(hypervector_size, $binop_mul74.7, func=$58load_global.2, args=[Var(hypervector_size, graphs.py:72), Var($binop_mul74.7, graphs.py:76)], kws=(), vararg=None, varkwarg=None, target=None) ['$58load_global.2', '$78call.8', '$binop_mul74.7', 'hypervector_size']
    $86get_iter.9 = getiter(value=$78call.8) ['$78call.8', '$86get_iter.9']
    $phi88.1 = $86get_iter.9                 ['$86get_iter.9', '$phi88.1']
    jump 88                                  []
label 88:
    $88for_iter.2 = iternext(value=$phi88.1) ['$88for_iter.2', '$phi88.1']
    $88for_iter.3 = pair_first(value=$88for_iter.2) ['$88for_iter.2', '$88for_iter.3']
    $88for_iter.4 = pair_second(value=$88for_iter.2) ['$88for_iter.2', '$88for_iter.4']
    $phi92.2 = $88for_iter.3                 ['$88for_iter.3', '$phi92.2']
    branch $88for_iter.4, 92, 152            ['$88for_iter.4']
label 92:
    k = $phi92.2                             ['$phi92.2', 'k']
    $const96.4 = const(int, 32)              ['$const96.4']
    chunk = k // $const96.4                  ['$const96.4', 'chunk', 'k']
    $const106.7 = const(int, 32)             ['$const106.7']
    pos = k % $const106.7                    ['$const106.7', 'k', 'pos']
    $120build_tuple.12 = build_tuple(items=[Var(i, graphs.py:75), Var(chunk, graphs.py:77)]) ['$120build_tuple.12', 'chunk', 'i']
    $126binary_subscr.13 = getitem(value=X, index=$120build_tuple.12, fn=<built-in function getitem>) ['$120build_tuple.12', '$126binary_subscr.13', 'X']
    $const130.14 = const(int, 1)             ['$const130.14']
    $binop_lshift134.16 = $const130.14 << pos ['$binop_lshift134.16', '$const130.14', 'pos']
    $binop_ior138.17 = inplace_binop(fn=<built-in function ior>, immutable_fn=<built-in function or_>, lhs=$126binary_subscr.13, rhs=$binop_lshift134.16, static_lhs=Undefined, static_rhs=Undefined) ['$126binary_subscr.13', '$binop_ior138.17', '$binop_lshift134.16']
    X[$120build_tuple.12] = $binop_ior138.17 ['$120build_tuple.12', '$binop_ior138.17', 'X']
    jump 88                                  []
label 152:
    jump 52                                  []
label 156:
    $const158.2 = const(NoneType, None)      ['$const158.2']
    $158return_const.3 = cast(value=$const158.2) ['$158return_const.3', '$const158.2']
    return $158return_const.3                ['$158return_const.3']

==== SSA block analysis pass on 0
Running <numba.core.ssa._GatherDefsHandler object at 0x7b9f4b3d9790>
on stmt: hypervector_size = arg(0, name=hypervector_size)
on stmt: X = arg(1, name=X)
on stmt: $4load_global.0 = global(range: <class 'range'>)
on stmt: $16load_attr.3 = getattr(value=X, attr=shape)
on stmt: $const36.4 = const(int, 0)
on stmt: $38binary_subscr.5 = static_getitem(value=$16load_attr.3, index=0, index_var=$const36.4, fn=<built-in function getitem>)
on stmt: $42call.6 = call $4load_global.0($38binary_subscr.5, func=$4load_global.0, args=[Var($38binary_subscr.5, graphs.py:75)], kws=(), vararg=None, varkwarg=None, target=None)
on stmt: $50get_iter.7 = getiter(value=$42call.6)
on stmt: $phi52.0 = $50get_iter.7
on stmt: jump 52
==== SSA block analysis pass on 52
Running <numba.core.ssa._GatherDefsHandler object at 0x7b9f4b3d9790>
on stmt: $52for_iter.1 = iternext(value=$phi52.0)
on stmt: $52for_iter.2 = pair_first(value=$52for_iter.1)
on stmt: $52for_iter.3 = pair_second(value=$52for_iter.1)
on stmt: $phi56.1 = $52for_iter.2
on stmt: branch $52for_iter.3, 56, 156
==== SSA block analysis pass on 56
Running <numba.core.ssa._GatherDefsHandler object at 0x7b9f4b3d9790>
on stmt: i = $phi56.1
on stmt: $58load_global.2 = global(range: <class 'range'>)
on stmt: $const72.6 = const(int, 2)
on stmt: $binop_mul74.7 = hypervector_size * $const72.6
on stmt: $78call.8 = call $58load_global.2(hypervector_size, $binop_mul74.7, func=$58load_global.2, args=[Var(hypervector_size, graphs.py:72), Var($binop_mul74.7, graphs.py:76)], kws=(), vararg=None, varkwarg=None, target=None)
on stmt: $86get_iter.9 = getiter(value=$78call.8)
on stmt: $phi88.1 = $86get_iter.9
on stmt: jump 88
==== SSA block analysis pass on 88
Running <numba.core.ssa._GatherDefsHandler object at 0x7b9f4b3d9790>
on stmt: $88for_iter.2 = iternext(value=$phi88.1)
on stmt: $88for_iter.3 = pair_first(value=$88for_iter.2)
on stmt: $88for_iter.4 = pair_second(value=$88for_iter.2)
on stmt: $phi92.2 = $88for_iter.3
on stmt: branch $88for_iter.4, 92, 152
==== SSA block analysis pass on 92
Running <numba.core.ssa._GatherDefsHandler object at 0x7b9f4b3d9790>
on stmt: k = $phi92.2
on stmt: $const96.4 = const(int, 32)
on stmt: chunk = k // $const96.4
on stmt: $const106.7 = const(int, 32)
on stmt: pos = k % $const106.7
on stmt: $120build_tuple.12 = build_tuple(items=[Var(i, graphs.py:75), Var(chunk, graphs.py:77)])
on stmt: $126binary_subscr.13 = getitem(value=X, index=$120build_tuple.12, fn=<built-in function getitem>)
on stmt: $const130.14 = const(int, 1)
on stmt: $binop_lshift134.16 = $const130.14 << pos
on stmt: $binop_ior138.17 = inplace_binop(fn=<built-in function ior>, immutable_fn=<built-in function or_>, lhs=$126binary_subscr.13, rhs=$binop_lshift134.16, static_lhs=Undefined, static_rhs=Undefined)
on stmt: X[$120build_tuple.12] = $binop_ior138.17
on stmt: jump 88
==== SSA block analysis pass on 152
Running <numba.core.ssa._GatherDefsHandler object at 0x7b9f4b3d9790>
on stmt: jump 52
==== SSA block analysis pass on 156
Running <numba.core.ssa._GatherDefsHandler object at 0x7b9f4b3d9790>
on stmt: $const158.2 = const(NoneType, None)
on stmt: $158return_const.3 = cast(value=$const158.2)
on stmt: return $158return_const.3
defs defaultdict(<class 'list'>,
            {'$120build_tuple.12': [(<numba.core.ir.Assign object at 0x7b9f4b3dbb90>,
                                     92)],
             '$126binary_subscr.13': [(<numba.core.ir.Assign object at 0x7b9f4b3dbce0>,
                                       92)],
             '$158return_const.3': [(<numba.core.ir.Assign object at 0x7b9f4b3daea0>,
                                     156)],
             '$16load_attr.3': [(<numba.core.ir.Assign object at 0x7b9f4b3d9f10>,
                                 0)],
             '$38binary_subscr.5': [(<numba.core.ir.Assign object at 0x7b9f4b3d9730>,
                                     0)],
             '$42call.6': [(<numba.core.ir.Assign object at 0x7b9f4b3da450>,
                            0)],
             '$4load_global.0': [(<numba.core.ir.Assign object at 0x7b9f4b3da000>,
                                  0)],
             '$50get_iter.7': [(<numba.core.ir.Assign object at 0x7b9f4b3da4e0>,
                                0)],
             '$52for_iter.1': [(<numba.core.ir.Assign object at 0x7b9f4b3da690>,
                                52)],
             '$52for_iter.2': [(<numba.core.ir.Assign object at 0x7b9f4b3da720>,
                                52)],
             '$52for_iter.3': [(<numba.core.ir.Assign object at 0x7b9f4b3da7b0>,
                                52)],
             '$58load_global.2': [(<numba.core.ir.Assign object at 0x7b9f4b3da9c0>,
                                   56)],
             '$78call.8': [(<numba.core.ir.Assign object at 0x7b9f4b3dad80>,
                            56)],
             '$86get_iter.9': [(<numba.core.ir.Assign object at 0x7b9f4b3dae10>,
                                56)],
             '$88for_iter.2': [(<numba.core.ir.Assign object at 0x7b9f4b3daf90>,
                                88)],
             '$88for_iter.3': [(<numba.core.ir.Assign object at 0x7b9f4b3db050>,
                                88)],
             '$88for_iter.4': [(<numba.core.ir.Assign object at 0x7b9f4b3db140>,
                                88)],
             '$binop_ior138.17': [(<numba.core.ir.Assign object at 0x7b9f4b1f4170>,
                                   92)],
             '$binop_lshift134.16': [(<numba.core.ir.Assign object at 0x7b9f4b1f4050>,
                                      92)],
             '$binop_mul74.7': [(<numba.core.ir.Assign object at 0x7b9f4b3dac90>,
                                 56)],
             '$const106.7': [(<numba.core.ir.Assign object at 0x7b9f4b3db950>,
                              92)],
             '$const130.14': [(<numba.core.ir.Assign object at 0x7b9f4b3dbdd0>,
                               92)],
             '$const158.2': [(<numba.core.ir.Assign object at 0x7b9f4b3d8e90>,
                              156)],
             '$const36.4': [(<numba.core.ir.Assign object at 0x7b9f4b3da270>,
                             0)],
             '$const72.6': [(<numba.core.ir.Assign object at 0x7b9f4b3daba0>,
                             56)],
             '$const96.4': [(<numba.core.ir.Assign object at 0x7b9f4b3db530>,
                             92)],
             '$phi52.0': [(<numba.core.ir.Assign object at 0x7b9f4b3da090>, 0)],
             '$phi56.1': [(<numba.core.ir.Assign object at 0x7b9f4b3da600>,
                           52)],
             '$phi88.1': [(<numba.core.ir.Assign object at 0x7b9f4b3daae0>,
                           56)],
             '$phi92.2': [(<numba.core.ir.Assign object at 0x7b9f4b3db1d0>,
                           88)],
             'X': [(<numba.core.ir.Assign object at 0x7b9f4b3da210>, 0)],
             'chunk': [(<numba.core.ir.Assign object at 0x7b9f4b3db680>, 92)],
             'hypervector_size': [(<numba.core.ir.Assign object at 0x7b9f4b3d9850>,
                                   0)],
             'i': [(<numba.core.ir.Assign object at 0x7b9f4b3da900>, 56)],
             'k': [(<numba.core.ir.Assign object at 0x7b9f4b3db350>, 92)],
             'pos': [(<numba.core.ir.Assign object at 0x7b9f4b3dbaa0>, 92)]})
SSA violators <numba.core.utils.OrderedSet object at 0x7b9f4b3d9790>
bytecode dump:
>          0	NOP(arg=None, lineno=121)
           2	RESUME(arg=0, lineno=121)
           4	LOAD_FAST(arg=0, lineno=124)
           6	LOAD_FAST(arg=4, lineno=124)
           8	LOAD_CONST(arg=0, lineno=124)
          10	LOAD_CONST(arg=0, lineno=124)
          12	BUILD_SLICE(arg=2, lineno=124)
          14	BUILD_TUPLE(arg=2, lineno=124)
          16	BINARY_SUBSCR(arg=None, lineno=124)
          20	GET_ITER(arg=None, lineno=124)
>         22	FOR_ITER(arg=71, lineno=124)
          26	STORE_FAST(arg=6, lineno=124)
          28	LOAD_FAST(arg=6, lineno=125)
          30	LOAD_CONST(arg=1, lineno=125)
          32	BINARY_OP(arg=2, lineno=125)
          36	STORE_FAST(arg=7, lineno=125)
          38	LOAD_FAST(arg=6, lineno=126)
          40	LOAD_CONST(arg=1, lineno=126)
          42	BINARY_OP(arg=6, lineno=126)
          46	STORE_FAST(arg=8, lineno=126)
          48	LOAD_FAST(arg=5, lineno=128)
          50	LOAD_FAST(arg=2, lineno=128)
          52	LOAD_FAST(arg=3, lineno=128)
          54	BINARY_OP(arg=0, lineno=128)
          58	LOAD_FAST(arg=7, lineno=128)
          60	BUILD_TUPLE(arg=2, lineno=128)
          62	COPY(arg=2, lineno=128)
          64	COPY(arg=2, lineno=128)
          66	BINARY_SUBSCR(arg=None, lineno=128)
          70	LOAD_CONST(arg=2, lineno=128)
          72	LOAD_FAST(arg=8, lineno=128)
          74	BINARY_OP(arg=3, lineno=128)
          78	BINARY_OP(arg=20, lineno=128)
          82	SWAP(arg=3, lineno=128)
          84	SWAP(arg=2, lineno=128)
          86	STORE_SUBSCR(arg=None, lineno=128)
          90	LOAD_FAST(arg=6, lineno=130)
          92	LOAD_FAST(arg=1, lineno=130)
          94	BINARY_OP(arg=0, lineno=130)
          98	LOAD_CONST(arg=1, lineno=130)
         100	BINARY_OP(arg=2, lineno=130)
         104	STORE_FAST(arg=7, lineno=130)
         106	LOAD_FAST(arg=6, lineno=131)
         108	LOAD_FAST(arg=1, lineno=131)
         110	BINARY_OP(arg=0, lineno=131)
         114	LOAD_CONST(arg=1, lineno=131)
         116	BINARY_OP(arg=6, lineno=131)
         120	STORE_FAST(arg=8, lineno=131)
         122	LOAD_FAST(arg=5, lineno=132)
         124	LOAD_FAST(arg=2, lineno=132)
         126	LOAD_FAST(arg=3, lineno=132)
         128	BINARY_OP(arg=0, lineno=132)
         132	LOAD_FAST(arg=7, lineno=132)
         134	BUILD_TUPLE(arg=2, lineno=132)
         136	COPY(arg=2, lineno=132)
         138	COPY(arg=2, lineno=132)
         140	BINARY_SUBSCR(arg=None, lineno=132)
         144	LOAD_CONST(arg=2, lineno=132)
         146	LOAD_FAST(arg=8, lineno=132)
         148	BINARY_OP(arg=3, lineno=132)
         152	UNARY_INVERT(arg=None, lineno=132)
         154	BINARY_OP(arg=14, lineno=132)
         158	SWAP(arg=3, lineno=132)
         160	SWAP(arg=2, lineno=132)
         162	STORE_SUBSCR(arg=None, lineno=132)
         166	JUMP_BACKWARD(arg=73, lineno=132)
>        168	END_FOR(arg=None, lineno=124)
         170	RETURN_CONST(arg=0, lineno=124)
pending: deque([State(pc_initial=0 nstack_initial=0)])
stack: []
state.pc_initial: State(pc_initial=0 nstack_initial=0)
dispatch pc=0, inst=NOP(arg=None, lineno=121)
stack []
dispatch pc=2, inst=RESUME(arg=0, lineno=121)
stack []
dispatch pc=4, inst=LOAD_FAST(arg=0, lineno=124)
stack []
dispatch pc=6, inst=LOAD_FAST(arg=4, lineno=124)
stack ['$hypervectors4.0']
dispatch pc=8, inst=LOAD_CONST(arg=0, lineno=124)
stack ['$hypervectors4.0', '$symbol6.1']
dispatch pc=10, inst=LOAD_CONST(arg=0, lineno=124)
stack ['$hypervectors4.0', '$symbol6.1', '$const8.2']
dispatch pc=12, inst=BUILD_SLICE(arg=2, lineno=124)
stack ['$hypervectors4.0', '$symbol6.1', '$const8.2', '$const10.3']
dispatch pc=14, inst=BUILD_TUPLE(arg=2, lineno=124)
stack ['$hypervectors4.0', '$symbol6.1', '$12build_slice.5']
dispatch pc=16, inst=BINARY_SUBSCR(arg=None, lineno=124)
stack ['$hypervectors4.0', '$14build_tuple.6']
dispatch pc=20, inst=GET_ITER(arg=None, lineno=124)
stack ['$16binary_subscr.7']
end state. edges=[Edge(pc=22, stack=('$20get_iter.8',), blockstack=(), npush=0)]
pending: deque([State(pc_initial=22 nstack_initial=1)])
stack: ['$phi22.0']
state.pc_initial: State(pc_initial=22 nstack_initial=1)
dispatch pc=22, inst=FOR_ITER(arg=71, lineno=124)
stack ['$phi22.0']
end state. edges=[Edge(pc=168, stack=('$phi22.0', '$22for_iter.2'), blockstack=(), npush=0), Edge(pc=26, stack=('$phi22.0', '$22for_iter.2'), blockstack=(), npush=0)]
pending: deque([State(pc_initial=168 nstack_initial=2), State(pc_initial=26 nstack_initial=2)])
stack: ['$phi168.0', '$phi168.1']
state.pc_initial: State(pc_initial=168 nstack_initial=2)
dispatch pc=168, inst=END_FOR(arg=None, lineno=124)
stack ['$phi168.0', '$phi168.1']
dispatch pc=170, inst=RETURN_CONST(arg=0, lineno=124)
stack []
end state. edges=[]
pending: deque([State(pc_initial=26 nstack_initial=2)])
stack: ['$phi26.0', '$phi26.1']
state.pc_initial: State(pc_initial=26 nstack_initial=2)
dispatch pc=26, inst=STORE_FAST(arg=6, lineno=124)
stack ['$phi26.0', '$phi26.1']
dispatch pc=28, inst=LOAD_FAST(arg=6, lineno=125)
stack ['$phi26.0']
dispatch pc=30, inst=LOAD_CONST(arg=1, lineno=125)
stack ['$phi26.0', '$k28.2']
dispatch pc=32, inst=BINARY_OP(arg=2, lineno=125)
stack ['$phi26.0', '$k28.2', '$const30.3']
dispatch pc=36, inst=STORE_FAST(arg=7, lineno=125)
stack ['$phi26.0', '$binop_floordiv32.4']
dispatch pc=38, inst=LOAD_FAST(arg=6, lineno=126)
stack ['$phi26.0']
dispatch pc=40, inst=LOAD_CONST(arg=1, lineno=126)
stack ['$phi26.0', '$k38.5']
dispatch pc=42, inst=BINARY_OP(arg=6, lineno=126)
stack ['$phi26.0', '$k38.5', '$const40.6']
dispatch pc=46, inst=STORE_FAST(arg=8, lineno=126)
stack ['$phi26.0', '$binop_mod42.7']
dispatch pc=48, inst=LOAD_FAST(arg=5, lineno=128)
stack ['$phi26.0']
dispatch pc=50, inst=LOAD_FAST(arg=2, lineno=128)
stack ['$phi26.0', '$X48.8']
dispatch pc=52, inst=LOAD_FAST(arg=3, lineno=128)
stack ['$phi26.0', '$X48.8', '$graph_index50.9']
dispatch pc=54, inst=BINARY_OP(arg=0, lineno=128)
stack ['$phi26.0', '$X48.8', '$graph_index50.9', '$node52.10']
dispatch pc=58, inst=LOAD_FAST(arg=7, lineno=128)
stack ['$phi26.0', '$X48.8', '$binop_add54.11']
dispatch pc=60, inst=BUILD_TUPLE(arg=2, lineno=128)
stack ['$phi26.0', '$X48.8', '$binop_add54.11', '$chunk58.12']
dispatch pc=62, inst=COPY(arg=2, lineno=128)
stack ['$phi26.0', '$X48.8', '$60build_tuple.13']
dispatch pc=64, inst=COPY(arg=2, lineno=128)
stack ['$phi26.0', '$X48.8', '$60build_tuple.13', '$X48.8']
dispatch pc=66, inst=BINARY_SUBSCR(arg=None, lineno=128)
stack ['$phi26.0', '$X48.8', '$60build_tuple.13', '$X48.8', '$60build_tuple.13']
dispatch pc=70, inst=LOAD_CONST(arg=2, lineno=128)
stack ['$phi26.0', '$X48.8', '$60build_tuple.13', '$66binary_subscr.14']
dispatch pc=72, inst=LOAD_FAST(arg=8, lineno=128)
stack ['$phi26.0', '$X48.8', '$60build_tuple.13', '$66binary_subscr.14', '$const70.15']
dispatch pc=74, inst=BINARY_OP(arg=3, lineno=128)
stack ['$phi26.0', '$X48.8', '$60build_tuple.13', '$66binary_subscr.14', '$const70.15', '$pos72.16']
dispatch pc=78, inst=BINARY_OP(arg=20, lineno=128)
stack ['$phi26.0', '$X48.8', '$60build_tuple.13', '$66binary_subscr.14', '$binop_lshift74.17']
dispatch pc=82, inst=SWAP(arg=3, lineno=128)
stack ['$phi26.0', '$X48.8', '$60build_tuple.13', '$binop_ior78.18']
dispatch pc=84, inst=SWAP(arg=2, lineno=128)
stack ['$phi26.0', '$binop_ior78.18', '$60build_tuple.13', '$X48.8']
dispatch pc=86, inst=STORE_SUBSCR(arg=None, lineno=128)
stack ['$phi26.0', '$binop_ior78.18', '$X48.8', '$60build_tuple.13']
dispatch pc=90, inst=LOAD_FAST(arg=6, lineno=130)
stack ['$phi26.0']
dispatch pc=92, inst=LOAD_FAST(arg=1, lineno=130)
stack ['$phi26.0', '$k90.19']
dispatch pc=94, inst=BINARY_OP(arg=0, lineno=130)
stack ['$phi26.0', '$k90.19', '$hypervector_size92.20']
dispatch pc=98, inst=LOAD_CONST(arg=1, lineno=130)
stack ['$phi26.0', '$binop_add94.21']
dispatch pc=100, inst=BINARY_OP(arg=2, lineno=130)
stack ['$phi26.0', '$binop_add94.21', '$const98.22']
dispatch pc=104, inst=STORE_FAST(arg=7, lineno=130)
stack ['$phi26.0', '$binop_floordiv100.23']
dispatch pc=106, inst=LOAD_FAST(arg=6, lineno=131)
stack ['$phi26.0']
dispatch pc=108, inst=LOAD_FAST(arg=1, lineno=131)
stack ['$phi26.0', '$k106.24']
dispatch pc=110, inst=BINARY_OP(arg=0, lineno=131)
stack ['$phi26.0', '$k106.24', '$hypervector_size108.25']
dispatch pc=114, inst=LOAD_CONST(arg=1, lineno=131)
stack ['$phi26.0', '$binop_add110.26']
dispatch pc=116, inst=BINARY_OP(arg=6, lineno=131)
stack ['$phi26.0', '$binop_add110.26', '$const114.27']
dispatch pc=120, inst=STORE_FAST(arg=8, lineno=131)
stack ['$phi26.0', '$binop_mod116.28']
dispatch pc=122, inst=LOAD_FAST(arg=5, lineno=132)
stack ['$phi26.0']
dispatch pc=124, inst=LOAD_FAST(arg=2, lineno=132)
stack ['$phi26.0', '$X122.29']
dispatch pc=126, inst=LOAD_FAST(arg=3, lineno=132)
stack ['$phi26.0', '$X122.29', '$graph_index124.30']
dispatch pc=128, inst=BINARY_OP(arg=0, lineno=132)
stack ['$phi26.0', '$X122.29', '$graph_index124.30', '$node126.31']
dispatch pc=132, inst=LOAD_FAST(arg=7, lineno=132)
stack ['$phi26.0', '$X122.29', '$binop_add128.32']
dispatch pc=134, inst=BUILD_TUPLE(arg=2, lineno=132)
stack ['$phi26.0', '$X122.29', '$binop_add128.32', '$chunk132.33']
dispatch pc=136, inst=COPY(arg=2, lineno=132)
stack ['$phi26.0', '$X122.29', '$134build_tuple.34']
dispatch pc=138, inst=COPY(arg=2, lineno=132)
stack ['$phi26.0', '$X122.29', '$134build_tuple.34', '$X122.29']
dispatch pc=140, inst=BINARY_SUBSCR(arg=None, lineno=132)
stack ['$phi26.0', '$X122.29', '$134build_tuple.34', '$X122.29', '$134build_tuple.34']
dispatch pc=144, inst=LOAD_CONST(arg=2, lineno=132)
stack ['$phi26.0', '$X122.29', '$134build_tuple.34', '$140binary_subscr.35']
dispatch pc=146, inst=LOAD_FAST(arg=8, lineno=132)
stack ['$phi26.0', '$X122.29', '$134build_tuple.34', '$140binary_subscr.35', '$const144.36']
dispatch pc=148, inst=BINARY_OP(arg=3, lineno=132)
stack ['$phi26.0', '$X122.29', '$134build_tuple.34', '$140binary_subscr.35', '$const144.36', '$pos146.37']
dispatch pc=152, inst=UNARY_INVERT(arg=None, lineno=132)
stack ['$phi26.0', '$X122.29', '$134build_tuple.34', '$140binary_subscr.35', '$binop_lshift148.38']
dispatch pc=154, inst=BINARY_OP(arg=14, lineno=132)
stack ['$phi26.0', '$X122.29', '$134build_tuple.34', '$140binary_subscr.35', '$152unary_invert.39']
dispatch pc=158, inst=SWAP(arg=3, lineno=132)
stack ['$phi26.0', '$X122.29', '$134build_tuple.34', '$binop_iand154.40']
dispatch pc=160, inst=SWAP(arg=2, lineno=132)
stack ['$phi26.0', '$binop_iand154.40', '$134build_tuple.34', '$X122.29']
dispatch pc=162, inst=STORE_SUBSCR(arg=None, lineno=132)
stack ['$phi26.0', '$binop_iand154.40', '$X122.29', '$134build_tuple.34']
dispatch pc=166, inst=JUMP_BACKWARD(arg=73, lineno=132)
stack ['$phi26.0']
end state. edges=[Edge(pc=22, stack=('$phi26.0',), blockstack=(), npush=0)]
pending: deque([State(pc_initial=22 nstack_initial=1)])
-------------------------Prune PHIs-------------------------
Used_phis: defaultdict(<class 'set'>,
            {State(pc_initial=0 nstack_initial=0): set(),
             State(pc_initial=22 nstack_initial=1): {'$phi22.0'},
             State(pc_initial=26 nstack_initial=2): {'$phi26.1'},
             State(pc_initial=168 nstack_initial=2): set()})
defmap: {'$phi168.1': State(pc_initial=22 nstack_initial=1),
 '$phi22.0': State(pc_initial=0 nstack_initial=0),
 '$phi26.1': State(pc_initial=22 nstack_initial=1)}
phismap: defaultdict(<class 'set'>,
            {'$phi168.0': {('$phi22.0', State(pc_initial=22 nstack_initial=1))},
             '$phi168.1': {('$22for_iter.2',
                            State(pc_initial=22 nstack_initial=1))},
             '$phi22.0': {('$20get_iter.8',
                           State(pc_initial=0 nstack_initial=0)),
                          ('$phi26.0', State(pc_initial=26 nstack_initial=2))},
             '$phi26.0': {('$phi22.0', State(pc_initial=22 nstack_initial=1))},
             '$phi26.1': {('$22for_iter.2',
                           State(pc_initial=22 nstack_initial=1))}})
changing phismap: defaultdict(<class 'set'>,
            {'$phi168.0': {('$20get_iter.8',
                            State(pc_initial=0 nstack_initial=0)),
                           ('$phi26.0', State(pc_initial=26 nstack_initial=2))},
             '$phi168.1': {('$22for_iter.2',
                            State(pc_initial=22 nstack_initial=1))},
             '$phi22.0': {('$20get_iter.8',
                           State(pc_initial=0 nstack_initial=0)),
                          ('$phi22.0', State(pc_initial=22 nstack_initial=1))},
             '$phi26.0': {('$20get_iter.8',
                           State(pc_initial=0 nstack_initial=0))},
             '$phi26.1': {('$22for_iter.2',
                           State(pc_initial=22 nstack_initial=1))}})
changing phismap: defaultdict(<class 'set'>,
            {'$phi168.0': {('$20get_iter.8',
                            State(pc_initial=0 nstack_initial=0))},
             '$phi168.1': {('$22for_iter.2',
                            State(pc_initial=22 nstack_initial=1))},
             '$phi22.0': {('$20get_iter.8',
                           State(pc_initial=0 nstack_initial=0))},
             '$phi26.0': {('$20get_iter.8',
                           State(pc_initial=0 nstack_initial=0))},
             '$phi26.1': {('$22for_iter.2',
                           State(pc_initial=22 nstack_initial=1))}})
changing phismap: defaultdict(<class 'set'>,
            {'$phi168.0': {('$20get_iter.8',
                            State(pc_initial=0 nstack_initial=0))},
             '$phi168.1': {('$22for_iter.2',
                            State(pc_initial=22 nstack_initial=1))},
             '$phi22.0': {('$20get_iter.8',
                           State(pc_initial=0 nstack_initial=0))},
             '$phi26.0': {('$20get_iter.8',
                           State(pc_initial=0 nstack_initial=0))},
             '$phi26.1': {('$22for_iter.2',
                           State(pc_initial=22 nstack_initial=1))}})
keep phismap: {'$phi22.0': {('$20get_iter.8', State(pc_initial=0 nstack_initial=0))},
 '$phi26.1': {('$22for_iter.2', State(pc_initial=22 nstack_initial=1))}}
new_out: defaultdict(<class 'dict'>,
            {State(pc_initial=0 nstack_initial=0): {'$phi22.0': '$20get_iter.8'},
             State(pc_initial=22 nstack_initial=1): {'$phi26.1': '$22for_iter.2'}})
----------------------DONE Prune PHIs-----------------------
block_infos State(pc_initial=0 nstack_initial=0):
AdaptBlockInfo(insts=((0, {}), (2, {}), (4, {'res': '$hypervectors4.0'}), (6, {'res': '$symbol6.1'}), (8, {'res': '$const8.2'}), (10, {'res': '$const10.3'}), (12, {'start': '$const8.2', 'stop': '$const10.3', 'step': None, 'res': '$12build_slice.5', 'slicevar': '$12build_slice.4'}), (14, {'items': ['$symbol6.1', '$12build_slice.5'], 'res': '$14build_tuple.6'}), (16, {'index': '$14build_tuple.6', 'target': '$hypervectors4.0', 'res': '$16binary_subscr.7'}), (20, {'value': '$16binary_subscr.7', 'res': '$20get_iter.8'})), outgoing_phis={'$phi22.0': '$20get_iter.8'}, blockstack=(), active_try_block=None, outgoing_edgepushed={22: ('$20get_iter.8',)})
block_infos State(pc_initial=22 nstack_initial=1):
AdaptBlockInfo(insts=((22, {'iterator': '$phi22.0', 'pair': '$22for_iter.1', 'indval': '$22for_iter.2', 'pred': '$22for_iter.3'}),), outgoing_phis={'$phi26.1': '$22for_iter.2'}, blockstack=(), active_try_block=None, outgoing_edgepushed={168: ('$phi22.0', '$22for_iter.2'), 26: ('$phi22.0', '$22for_iter.2')})
block_infos State(pc_initial=26 nstack_initial=2):
AdaptBlockInfo(insts=((26, {'value': '$phi26.1'}), (28, {'res': '$k28.2'}), (30, {'res': '$const30.3'}), (32, {'op': '//', 'lhs': '$k28.2', 'rhs': '$const30.3', 'res': '$binop_floordiv32.4'}), (36, {'value': '$binop_floordiv32.4'}), (38, {'res': '$k38.5'}), (40, {'res': '$const40.6'}), (42, {'op': '%', 'lhs': '$k38.5', 'rhs': '$const40.6', 'res': '$binop_mod42.7'}), (46, {'value': '$binop_mod42.7'}), (48, {'res': '$X48.8'}), (50, {'res': '$graph_index50.9'}), (52, {'res': '$node52.10'}), (54, {'op': '+', 'lhs': '$graph_index50.9', 'rhs': '$node52.10', 'res': '$binop_add54.11'}), (58, {'res': '$chunk58.12'}), (60, {'items': ['$binop_add54.11', '$chunk58.12'], 'res': '$60build_tuple.13'}), (66, {'index': '$60build_tuple.13', 'target': '$X48.8', 'res': '$66binary_subscr.14'}), (70, {'res': '$const70.15'}), (72, {'res': '$pos72.16'}), (74, {'op': '<<', 'lhs': '$const70.15', 'rhs': '$pos72.16', 'res': '$binop_lshift74.17'}), (78, {'op': '|=', 'lhs': '$66binary_subscr.14', 'rhs': '$binop_lshift74.17', 'res': '$binop_ior78.18'}), (86, {'target': '$X48.8', 'index': '$60build_tuple.13', 'value': '$binop_ior78.18'}), (90, {'res': '$k90.19'}), (92, {'res': '$hypervector_size92.20'}), (94, {'op': '+', 'lhs': '$k90.19', 'rhs': '$hypervector_size92.20', 'res': '$binop_add94.21'}), (98, {'res': '$const98.22'}), (100, {'op': '//', 'lhs': '$binop_add94.21', 'rhs': '$const98.22', 'res': '$binop_floordiv100.23'}), (104, {'value': '$binop_floordiv100.23'}), (106, {'res': '$k106.24'}), (108, {'res': '$hypervector_size108.25'}), (110, {'op': '+', 'lhs': '$k106.24', 'rhs': '$hypervector_size108.25', 'res': '$binop_add110.26'}), (114, {'res': '$const114.27'}), (116, {'op': '%', 'lhs': '$binop_add110.26', 'rhs': '$const114.27', 'res': '$binop_mod116.28'}), (120, {'value': '$binop_mod116.28'}), (122, {'res': '$X122.29'}), (124, {'res': '$graph_index124.30'}), (126, {'res': '$node126.31'}), (128, {'op': '+', 'lhs': '$graph_index124.30', 'rhs': '$node126.31', 'res': '$binop_add128.32'}), (132, {'res': '$chunk132.33'}), (134, {'items': ['$binop_add128.32', '$chunk132.33'], 'res': '$134build_tuple.34'}), (140, {'index': '$134build_tuple.34', 'target': '$X122.29', 'res': '$140binary_subscr.35'}), (144, {'res': '$const144.36'}), (146, {'res': '$pos146.37'}), (148, {'op': '<<', 'lhs': '$const144.36', 'rhs': '$pos146.37', 'res': '$binop_lshift148.38'}), (152, {'value': '$binop_lshift148.38', 'res': '$152unary_invert.39'}), (154, {'op': '&=', 'lhs': '$140binary_subscr.35', 'rhs': '$152unary_invert.39', 'res': '$binop_iand154.40'}), (162, {'target': '$X122.29', 'index': '$134build_tuple.34', 'value': '$binop_iand154.40'}), (166, {})), outgoing_phis={}, blockstack=(), active_try_block=None, outgoing_edgepushed={22: ('$phi26.0',)})
block_infos State(pc_initial=168 nstack_initial=2):
AdaptBlockInfo(insts=((170, {'retval': '$const170.2', 'castval': '$170return_const.3'}),), outgoing_phis={}, blockstack=(), active_try_block=None, outgoing_edgepushed={})
label 0:
    hypervectors = arg(0, name=hypervectors) ['hypervectors']
    hypervector_size = arg(1, name=hypervector_size) ['hypervector_size']
    graph_index = arg(2, name=graph_index)   ['graph_index']
    node = arg(3, name=node)                 ['node']
    symbol = arg(4, name=symbol)             ['symbol']
    X = arg(5, name=X)                       ['X']
    $const8.2 = const(NoneType, None)        ['$const8.2']
    $const10.3 = const(NoneType, None)       ['$const10.3']
    $12build_slice.4 = global(slice: <class 'slice'>) ['$12build_slice.4']
    $12build_slice.5 = call $12build_slice.4($const8.2, $const10.3, func=$12build_slice.4, args=(Var($const8.2, graphs.py:124), Var($const10.3, graphs.py:124)), kws=(), vararg=None, varkwarg=None, target=None) ['$12build_slice.4', '$12build_slice.5', '$const10.3', '$const8.2']
    $14build_tuple.6 = build_tuple(items=[Var(symbol, graphs.py:121), Var($12build_slice.5, graphs.py:124)]) ['$12build_slice.5', '$14build_tuple.6', 'symbol']
    $16binary_subscr.7 = getitem(value=hypervectors, index=$14build_tuple.6, fn=<built-in function getitem>) ['$14build_tuple.6', '$16binary_subscr.7', 'hypervectors']
    $20get_iter.8 = getiter(value=$16binary_subscr.7) ['$16binary_subscr.7', '$20get_iter.8']
    $phi22.0 = $20get_iter.8                 ['$20get_iter.8', '$phi22.0']
    jump 22                                  []
label 22:
    $22for_iter.1 = iternext(value=$phi22.0) ['$22for_iter.1', '$phi22.0']
    $22for_iter.2 = pair_first(value=$22for_iter.1) ['$22for_iter.1', '$22for_iter.2']
    $22for_iter.3 = pair_second(value=$22for_iter.1) ['$22for_iter.1', '$22for_iter.3']
    $phi26.1 = $22for_iter.2                 ['$22for_iter.2', '$phi26.1']
    branch $22for_iter.3, 26, 168            ['$22for_iter.3']
label 26:
    k = $phi26.1                             ['$phi26.1', 'k']
    $const30.3 = const(int, 32)              ['$const30.3']
    chunk = k // $const30.3                  ['$const30.3', 'chunk', 'k']
    $const40.6 = const(int, 32)              ['$const40.6']
    pos = k % $const40.6                     ['$const40.6', 'k', 'pos']
    $binop_add54.11 = graph_index + node     ['$binop_add54.11', 'graph_index', 'node']
    $60build_tuple.13 = build_tuple(items=[Var($binop_add54.11, graphs.py:128), Var(chunk, graphs.py:125)]) ['$60build_tuple.13', '$binop_add54.11', 'chunk']
    $66binary_subscr.14 = getitem(value=X, index=$60build_tuple.13, fn=<built-in function getitem>) ['$60build_tuple.13', '$66binary_subscr.14', 'X']
    $const70.15 = const(int, 1)              ['$const70.15']
    $binop_lshift74.17 = $const70.15 << pos  ['$binop_lshift74.17', '$const70.15', 'pos']
    $binop_ior78.18 = inplace_binop(fn=<built-in function ior>, immutable_fn=<built-in function or_>, lhs=$66binary_subscr.14, rhs=$binop_lshift74.17, static_lhs=Undefined, static_rhs=Undefined) ['$66binary_subscr.14', '$binop_ior78.18', '$binop_lshift74.17']
    X[$60build_tuple.13] = $binop_ior78.18   ['$60build_tuple.13', '$binop_ior78.18', 'X']
    $binop_add94.21 = k + hypervector_size   ['$binop_add94.21', 'hypervector_size', 'k']
    $const98.22 = const(int, 32)             ['$const98.22']
    chunk = $binop_add94.21 // $const98.22   ['$binop_add94.21', '$const98.22', 'chunk']
    $binop_add110.26 = k + hypervector_size  ['$binop_add110.26', 'hypervector_size', 'k']
    $const114.27 = const(int, 32)            ['$const114.27']
    pos = $binop_add110.26 % $const114.27    ['$binop_add110.26', '$const114.27', 'pos']
    $binop_add128.32 = graph_index + node    ['$binop_add128.32', 'graph_index', 'node']
    $134build_tuple.34 = build_tuple(items=[Var($binop_add128.32, graphs.py:132), Var(chunk, graphs.py:125)]) ['$134build_tuple.34', '$binop_add128.32', 'chunk']
    $140binary_subscr.35 = getitem(value=X, index=$134build_tuple.34, fn=<built-in function getitem>) ['$134build_tuple.34', '$140binary_subscr.35', 'X']
    $const144.36 = const(int, 1)             ['$const144.36']
    $binop_lshift148.38 = $const144.36 << pos ['$binop_lshift148.38', '$const144.36', 'pos']
    $152unary_invert.39 = unary(fn=<built-in function invert>, value=$binop_lshift148.38) ['$152unary_invert.39', '$binop_lshift148.38']
    $binop_iand154.40 = inplace_binop(fn=<built-in function iand>, immutable_fn=<built-in function and_>, lhs=$140binary_subscr.35, rhs=$152unary_invert.39, static_lhs=Undefined, static_rhs=Undefined) ['$140binary_subscr.35', '$152unary_invert.39', '$binop_iand154.40']
    X[$134build_tuple.34] = $binop_iand154.40 ['$134build_tuple.34', '$binop_iand154.40', 'X']
    jump 22                                  []
label 168:
    $const170.2 = const(NoneType, None)      ['$const170.2']
    $170return_const.3 = cast(value=$const170.2) ['$170return_const.3', '$const170.2']
    return $170return_const.3                ['$170return_const.3']

==== SSA block analysis pass on 0
Running <numba.core.ssa._GatherDefsHandler object at 0x7b9f4b148e90>
on stmt: hypervectors = arg(0, name=hypervectors)
on stmt: hypervector_size = arg(1, name=hypervector_size)
on stmt: graph_index = arg(2, name=graph_index)
on stmt: node = arg(3, name=node)
on stmt: symbol = arg(4, name=symbol)
on stmt: X = arg(5, name=X)
on stmt: $const8.2 = const(NoneType, None)
on stmt: $const10.3 = const(NoneType, None)
on stmt: $12build_slice.4 = global(slice: <class 'slice'>)
on stmt: $12build_slice.5 = call $12build_slice.4($const8.2, $const10.3, func=$12build_slice.4, args=(Var($const8.2, graphs.py:124), Var($const10.3, graphs.py:124)), kws=(), vararg=None, varkwarg=None, target=None)
on stmt: $14build_tuple.6 = build_tuple(items=[Var(symbol, graphs.py:121), Var($12build_slice.5, graphs.py:124)])
on stmt: $16binary_subscr.7 = getitem(value=hypervectors, index=$14build_tuple.6, fn=<built-in function getitem>)
on stmt: $20get_iter.8 = getiter(value=$16binary_subscr.7)
on stmt: $phi22.0 = $20get_iter.8
on stmt: jump 22
==== SSA block analysis pass on 22
Running <numba.core.ssa._GatherDefsHandler object at 0x7b9f4b148e90>
on stmt: $22for_iter.1 = iternext(value=$phi22.0)
on stmt: $22for_iter.2 = pair_first(value=$22for_iter.1)
on stmt: $22for_iter.3 = pair_second(value=$22for_iter.1)
on stmt: $phi26.1 = $22for_iter.2
on stmt: branch $22for_iter.3, 26, 168
==== SSA block analysis pass on 26
Running <numba.core.ssa._GatherDefsHandler object at 0x7b9f4b148e90>
on stmt: k = $phi26.1
on stmt: $const30.3 = const(int, 32)
on stmt: chunk = k // $const30.3
on stmt: $const40.6 = const(int, 32)
on stmt: pos = k % $const40.6
on stmt: $binop_add54.11 = graph_index + node
on stmt: $60build_tuple.13 = build_tuple(items=[Var($binop_add54.11, graphs.py:128), Var(chunk, graphs.py:125)])
on stmt: $66binary_subscr.14 = getitem(value=X, index=$60build_tuple.13, fn=<built-in function getitem>)
on stmt: $const70.15 = const(int, 1)
on stmt: $binop_lshift74.17 = $const70.15 << pos
on stmt: $binop_ior78.18 = inplace_binop(fn=<built-in function ior>, immutable_fn=<built-in function or_>, lhs=$66binary_subscr.14, rhs=$binop_lshift74.17, static_lhs=Undefined, static_rhs=Undefined)
on stmt: X[$60build_tuple.13] = $binop_ior78.18
on stmt: $binop_add94.21 = k + hypervector_size
on stmt: $const98.22 = const(int, 32)
on stmt: chunk = $binop_add94.21 // $const98.22
on stmt: $binop_add110.26 = k + hypervector_size
on stmt: $const114.27 = const(int, 32)
on stmt: pos = $binop_add110.26 % $const114.27
on stmt: $binop_add128.32 = graph_index + node
on stmt: $134build_tuple.34 = build_tuple(items=[Var($binop_add128.32, graphs.py:132), Var(chunk, graphs.py:125)])
on stmt: $140binary_subscr.35 = getitem(value=X, index=$134build_tuple.34, fn=<built-in function getitem>)
on stmt: $const144.36 = const(int, 1)
on stmt: $binop_lshift148.38 = $const144.36 << pos
on stmt: $152unary_invert.39 = unary(fn=<built-in function invert>, value=$binop_lshift148.38)
on stmt: $binop_iand154.40 = inplace_binop(fn=<built-in function iand>, immutable_fn=<built-in function and_>, lhs=$140binary_subscr.35, rhs=$152unary_invert.39, static_lhs=Undefined, static_rhs=Undefined)
on stmt: X[$134build_tuple.34] = $binop_iand154.40
on stmt: jump 22
==== SSA block analysis pass on 168
Running <numba.core.ssa._GatherDefsHandler object at 0x7b9f4b148e90>
on stmt: $const170.2 = const(NoneType, None)
on stmt: $170return_const.3 = cast(value=$const170.2)
on stmt: return $170return_const.3
defs defaultdict(<class 'list'>,
            {'$12build_slice.4': [(<numba.core.ir.Assign object at 0x7b9f4b149df0>,
                                   0)],
             '$12build_slice.5': [(<numba.core.ir.Assign object at 0x7b9f4b149ee0>,
                                   0)],
             '$134build_tuple.34': [(<numba.core.ir.Assign object at 0x7b9f4b161130>,
                                     26)],
             '$140binary_subscr.35': [(<numba.core.ir.Assign object at 0x7b9f4b1612b0>,
                                       26)],
             '$14build_tuple.6': [(<numba.core.ir.Assign object at 0x7b9f4b149fd0>,
                                   0)],
             '$152unary_invert.39': [(<numba.core.ir.Assign object at 0x7b9f4b161730>,
                                      26)],
             '$16binary_subscr.7': [(<numba.core.ir.Assign object at 0x7b9f4b14a120>,
                                     0)],
             '$170return_const.3': [(<numba.core.ir.Assign object at 0x7b9f4b14b680>,
                                     168)],
             '$20get_iter.8': [(<numba.core.ir.Assign object at 0x7b9f4b14a240>,
                                0)],
             '$22for_iter.1': [(<numba.core.ir.Assign object at 0x7b9f4b14a450>,
                                22)],
             '$22for_iter.2': [(<numba.core.ir.Assign object at 0x7b9f4b14a570>,
                                22)],
             '$22for_iter.3': [(<numba.core.ir.Assign object at 0x7b9f4b14a690>,
                                22)],
             '$60build_tuple.13': [(<numba.core.ir.Assign object at 0x7b9f4b14b7d0>,
                                    26)],
             '$66binary_subscr.14': [(<numba.core.ir.Assign object at 0x7b9f4b14b950>,
                                      26)],
             '$binop_add110.26': [(<numba.core.ir.Assign object at 0x7b9f4b160800>,
                                   26)],
             '$binop_add128.32': [(<numba.core.ir.Assign object at 0x7b9f4b160f20>,
                                   26)],
             '$binop_add54.11': [(<numba.core.ir.Assign object at 0x7b9f4b14b5c0>,
                                  26)],
             '$binop_add94.21': [(<numba.core.ir.Assign object at 0x7b9f4b1601d0>,
                                  26)],
             '$binop_iand154.40': [(<numba.core.ir.Assign object at 0x7b9f4b1618b0>,
                                    26)],
             '$binop_ior78.18': [(<numba.core.ir.Assign object at 0x7b9f4b14be00>,
                                  26)],
             '$binop_lshift148.38': [(<numba.core.ir.Assign object at 0x7b9f4b161610>,
                                      26)],
             '$binop_lshift74.17': [(<numba.core.ir.Assign object at 0x7b9f4b14bcb0>,
                                     26)],
             '$const10.3': [(<numba.core.ir.Assign object at 0x7b9f4b149cd0>,
                             0)],
             '$const114.27': [(<numba.core.ir.Assign object at 0x7b9f4b1608f0>,
                               26)],
             '$const144.36': [(<numba.core.ir.Assign object at 0x7b9f4b1613a0>,
                               26)],
             '$const170.2': [(<numba.core.ir.Assign object at 0x7b9f4b14b260>,
                              168)],
             '$const30.3': [(<numba.core.ir.Assign object at 0x7b9f4b14aae0>,
                             26)],
             '$const40.6': [(<numba.core.ir.Assign object at 0x7b9f4b14af30>,
                             26)],
             '$const70.15': [(<numba.core.ir.Assign object at 0x7b9f4b14ba40>,
                              26)],
             '$const8.2': [(<numba.core.ir.Assign object at 0x7b9f4b149bb0>,
                            0)],
             '$const98.22': [(<numba.core.ir.Assign object at 0x7b9f4b1602c0>,
                              26)],
             '$phi22.0': [(<numba.core.ir.Assign object at 0x7b9f4b149a90>, 0)],
             '$phi26.1': [(<numba.core.ir.Assign object at 0x7b9f4b14a720>,
                           22)],
             'X': [(<numba.core.ir.Assign object at 0x7b9f4b149880>, 0)],
             'chunk': [(<numba.core.ir.Assign object at 0x7b9f4b14ac60>, 26),
                       (<numba.core.ir.Assign object at 0x7b9f4b160440>, 26)],
             'graph_index': [(<numba.core.ir.Assign object at 0x7b9f4b1495b0>,
                              0)],
             'hypervector_size': [(<numba.core.ir.Assign object at 0x7b9f4b149190>,
                                   0)],
             'hypervectors': [(<numba.core.ir.Assign object at 0x7b9f4b149460>,
                               0)],
             'k': [(<numba.core.ir.Assign object at 0x7b9f4b14a8d0>, 26)],
             'node': [(<numba.core.ir.Assign object at 0x7b9f4b1496a0>, 0)],
             'pos': [(<numba.core.ir.Assign object at 0x7b9f4b14b0b0>, 26),
                     (<numba.core.ir.Assign object at 0x7b9f4b160a70>, 26)],
             'symbol': [(<numba.core.ir.Assign object at 0x7b9f4b149790>, 0)]})
SSA violators <numba.core.utils.OrderedSet object at 0x7b9f4b1f55b0>
Fix SSA violator on var chunk
==== SSA block rewrite pass on 0
Running <numba.core.ssa._FreshVarHandler object at 0x7b9f4b148bc0>
on stmt: hypervectors = arg(0, name=hypervectors)
on stmt: hypervector_size = arg(1, name=hypervector_size)
on stmt: graph_index = arg(2, name=graph_index)
on stmt: node = arg(3, name=node)
on stmt: symbol = arg(4, name=symbol)
on stmt: X = arg(5, name=X)
on stmt: $const8.2 = const(NoneType, None)
on stmt: $const10.3 = const(NoneType, None)
on stmt: $12build_slice.4 = global(slice: <class 'slice'>)
on stmt: $12build_slice.5 = call $12build_slice.4($const8.2, $const10.3, func=$12build_slice.4, args=(Var($const8.2, graphs.py:124), Var($const10.3, graphs.py:124)), kws=(), vararg=None, varkwarg=None, target=None)
on stmt: $14build_tuple.6 = build_tuple(items=[Var(symbol, graphs.py:121), Var($12build_slice.5, graphs.py:124)])
on stmt: $16binary_subscr.7 = getitem(value=hypervectors, index=$14build_tuple.6, fn=<built-in function getitem>)
on stmt: $20get_iter.8 = getiter(value=$16binary_subscr.7)
on stmt: $phi22.0 = $20get_iter.8
on stmt: jump 22
==== SSA block rewrite pass on 22
Running <numba.core.ssa._FreshVarHandler object at 0x7b9f4b148bc0>
on stmt: $22for_iter.1 = iternext(value=$phi22.0)
on stmt: $22for_iter.2 = pair_first(value=$22for_iter.1)
on stmt: $22for_iter.3 = pair_second(value=$22for_iter.1)
on stmt: $phi26.1 = $22for_iter.2
on stmt: branch $22for_iter.3, 26, 168
==== SSA block rewrite pass on 26
Running <numba.core.ssa._FreshVarHandler object at 0x7b9f4b148bc0>
on stmt: k = $phi26.1
on stmt: $const30.3 = const(int, 32)
on stmt: chunk = k // $const30.3
first assign: chunk
replaced with: chunk = k // $const30.3
on stmt: $const40.6 = const(int, 32)
on stmt: pos = k % $const40.6
on stmt: $binop_add54.11 = graph_index + node
on stmt: $60build_tuple.13 = build_tuple(items=[Var($binop_add54.11, graphs.py:128), Var(chunk, graphs.py:125)])
on stmt: $66binary_subscr.14 = getitem(value=X, index=$60build_tuple.13, fn=<built-in function getitem>)
on stmt: $const70.15 = const(int, 1)
on stmt: $binop_lshift74.17 = $const70.15 << pos
on stmt: $binop_ior78.18 = inplace_binop(fn=<built-in function ior>, immutable_fn=<built-in function or_>, lhs=$66binary_subscr.14, rhs=$binop_lshift74.17, static_lhs=Undefined, static_rhs=Undefined)
on stmt: X[$60build_tuple.13] = $binop_ior78.18
on stmt: $binop_add94.21 = k + hypervector_size
on stmt: $const98.22 = const(int, 32)
on stmt: chunk = $binop_add94.21 // $const98.22
replaced with: chunk.1 = $binop_add94.21 // $const98.22
on stmt: $binop_add110.26 = k + hypervector_size
on stmt: $const114.27 = const(int, 32)
on stmt: pos = $binop_add110.26 % $const114.27
on stmt: $binop_add128.32 = graph_index + node
on stmt: $134build_tuple.34 = build_tuple(items=[Var($binop_add128.32, graphs.py:132), Var(chunk, graphs.py:125)])
on stmt: $140binary_subscr.35 = getitem(value=X, index=$134build_tuple.34, fn=<built-in function getitem>)
on stmt: $const144.36 = const(int, 1)
on stmt: $binop_lshift148.38 = $const144.36 << pos
on stmt: $152unary_invert.39 = unary(fn=<built-in function invert>, value=$binop_lshift148.38)
on stmt: $binop_iand154.40 = inplace_binop(fn=<built-in function iand>, immutable_fn=<built-in function and_>, lhs=$140binary_subscr.35, rhs=$152unary_invert.39, static_lhs=Undefined, static_rhs=Undefined)
on stmt: X[$134build_tuple.34] = $binop_iand154.40
on stmt: jump 22
==== SSA block rewrite pass on 168
Running <numba.core.ssa._FreshVarHandler object at 0x7b9f4b148bc0>
on stmt: $const170.2 = const(NoneType, None)
on stmt: $170return_const.3 = cast(value=$const170.2)
on stmt: return $170return_const.3
Replaced assignments: defaultdict(<class 'list'>,
            {26: [<numba.core.ir.Assign object at 0x7b9f4b148fb0>,
                  <numba.core.ir.Assign object at 0x7b9f4b148b60>]})
==== SSA block rewrite pass on 0
Running <numba.core.ssa._FixSSAVars object at 0x7b9f4b148bc0>
on stmt: hypervectors = arg(0, name=hypervectors)
on stmt: hypervector_size = arg(1, name=hypervector_size)
on stmt: graph_index = arg(2, name=graph_index)
on stmt: node = arg(3, name=node)
on stmt: symbol = arg(4, name=symbol)
on stmt: X = arg(5, name=X)
on stmt: $const8.2 = const(NoneType, None)
on stmt: $const10.3 = const(NoneType, None)
on stmt: $12build_slice.4 = global(slice: <class 'slice'>)
on stmt: $12build_slice.5 = call $12build_slice.4($const8.2, $const10.3, func=$12build_slice.4, args=(Var($const8.2, graphs.py:124), Var($const10.3, graphs.py:124)), kws=(), vararg=None, varkwarg=None, target=None)
on stmt: $14build_tuple.6 = build_tuple(items=[Var(symbol, graphs.py:121), Var($12build_slice.5, graphs.py:124)])
on stmt: $16binary_subscr.7 = getitem(value=hypervectors, index=$14build_tuple.6, fn=<built-in function getitem>)
on stmt: $20get_iter.8 = getiter(value=$16binary_subscr.7)
on stmt: $phi22.0 = $20get_iter.8
on stmt: jump 22
==== SSA block rewrite pass on 22
Running <numba.core.ssa._FixSSAVars object at 0x7b9f4b148bc0>
on stmt: $22for_iter.1 = iternext(value=$phi22.0)
on stmt: $22for_iter.2 = pair_first(value=$22for_iter.1)
on stmt: $22for_iter.3 = pair_second(value=$22for_iter.1)
on stmt: $phi26.1 = $22for_iter.2
on stmt: branch $22for_iter.3, 26, 168
==== SSA block rewrite pass on 26
Running <numba.core.ssa._FixSSAVars object at 0x7b9f4b148bc0>
on stmt: k = $phi26.1
on stmt: $const30.3 = const(int, 32)
on stmt: chunk = k // $const30.3
on stmt: $const40.6 = const(int, 32)
on stmt: pos = k % $const40.6
on stmt: $binop_add54.11 = graph_index + node
on stmt: $60build_tuple.13 = build_tuple(items=[Var($binop_add54.11, graphs.py:128), Var(chunk, graphs.py:125)])
find_def var='chunk' stmt=$60build_tuple.13 = build_tuple(items=[Var($binop_add54.11, graphs.py:128), Var(chunk, graphs.py:125)])
on stmt: $66binary_subscr.14 = getitem(value=X, index=$60build_tuple.13, fn=<built-in function getitem>)
on stmt: $const70.15 = const(int, 1)
on stmt: $binop_lshift74.17 = $const70.15 << pos
on stmt: $binop_ior78.18 = inplace_binop(fn=<built-in function ior>, immutable_fn=<built-in function or_>, lhs=$66binary_subscr.14, rhs=$binop_lshift74.17, static_lhs=Undefined, static_rhs=Undefined)
on stmt: X[$60build_tuple.13] = $binop_ior78.18
on stmt: $binop_add94.21 = k + hypervector_size
on stmt: $const98.22 = const(int, 32)
on stmt: chunk.1 = $binop_add94.21 // $const98.22
on stmt: $binop_add110.26 = k + hypervector_size
on stmt: $const114.27 = const(int, 32)
on stmt: pos = $binop_add110.26 % $const114.27
on stmt: $binop_add128.32 = graph_index + node
on stmt: $134build_tuple.34 = build_tuple(items=[Var($binop_add128.32, graphs.py:132), Var(chunk, graphs.py:125)])
find_def var='chunk' stmt=$134build_tuple.34 = build_tuple(items=[Var($binop_add128.32, graphs.py:132), Var(chunk, graphs.py:125)])
replaced with: $134build_tuple.34 = build_tuple(items=[Var($binop_add128.32, graphs.py:132), Var(chunk.1, graphs.py:130)])
on stmt: $140binary_subscr.35 = getitem(value=X, index=$134build_tuple.34, fn=<built-in function getitem>)
on stmt: $const144.36 = const(int, 1)
on stmt: $binop_lshift148.38 = $const144.36 << pos
on stmt: $152unary_invert.39 = unary(fn=<built-in function invert>, value=$binop_lshift148.38)
on stmt: $binop_iand154.40 = inplace_binop(fn=<built-in function iand>, immutable_fn=<built-in function and_>, lhs=$140binary_subscr.35, rhs=$152unary_invert.39, static_lhs=Undefined, static_rhs=Undefined)
on stmt: X[$134build_tuple.34] = $binop_iand154.40
on stmt: jump 22
==== SSA block rewrite pass on 168
Running <numba.core.ssa._FixSSAVars object at 0x7b9f4b148bc0>
on stmt: $const170.2 = const(NoneType, None)
on stmt: $170return_const.3 = cast(value=$const170.2)
on stmt: return $170return_const.3
Fix SSA violator on var pos
==== SSA block rewrite pass on 0
Running <numba.core.ssa._FreshVarHandler object at 0x7b9f4b1491f0>
on stmt: hypervectors = arg(0, name=hypervectors)
on stmt: hypervector_size = arg(1, name=hypervector_size)
on stmt: graph_index = arg(2, name=graph_index)
on stmt: node = arg(3, name=node)
on stmt: symbol = arg(4, name=symbol)
on stmt: X = arg(5, name=X)
on stmt: $const8.2 = const(NoneType, None)
on stmt: $const10.3 = const(NoneType, None)
on stmt: $12build_slice.4 = global(slice: <class 'slice'>)
on stmt: $12build_slice.5 = call $12build_slice.4($const8.2, $const10.3, func=$12build_slice.4, args=(Var($const8.2, graphs.py:124), Var($const10.3, graphs.py:124)), kws=(), vararg=None, varkwarg=None, target=None)
on stmt: $14build_tuple.6 = build_tuple(items=[Var(symbol, graphs.py:121), Var($12build_slice.5, graphs.py:124)])
on stmt: $16binary_subscr.7 = getitem(value=hypervectors, index=$14build_tuple.6, fn=<built-in function getitem>)
on stmt: $20get_iter.8 = getiter(value=$16binary_subscr.7)
on stmt: $phi22.0 = $20get_iter.8
on stmt: jump 22
==== SSA block rewrite pass on 22
Running <numba.core.ssa._FreshVarHandler object at 0x7b9f4b1491f0>
on stmt: $22for_iter.1 = iternext(value=$phi22.0)
on stmt: $22for_iter.2 = pair_first(value=$22for_iter.1)
on stmt: $22for_iter.3 = pair_second(value=$22for_iter.1)
on stmt: $phi26.1 = $22for_iter.2
on stmt: branch $22for_iter.3, 26, 168
==== SSA block rewrite pass on 26
Running <numba.core.ssa._FreshVarHandler object at 0x7b9f4b1491f0>
on stmt: k = $phi26.1
on stmt: $const30.3 = const(int, 32)
on stmt: chunk = k // $const30.3
on stmt: $const40.6 = const(int, 32)
on stmt: pos = k % $const40.6
first assign: pos
replaced with: pos = k % $const40.6
on stmt: $binop_add54.11 = graph_index + node
on stmt: $60build_tuple.13 = build_tuple(items=[Var($binop_add54.11, graphs.py:128), Var(chunk, graphs.py:125)])
on stmt: $66binary_subscr.14 = getitem(value=X, index=$60build_tuple.13, fn=<built-in function getitem>)
on stmt: $const70.15 = const(int, 1)
on stmt: $binop_lshift74.17 = $const70.15 << pos
on stmt: $binop_ior78.18 = inplace_binop(fn=<built-in function ior>, immutable_fn=<built-in function or_>, lhs=$66binary_subscr.14, rhs=$binop_lshift74.17, static_lhs=Undefined, static_rhs=Undefined)
on stmt: X[$60build_tuple.13] = $binop_ior78.18
on stmt: $binop_add94.21 = k + hypervector_size
on stmt: $const98.22 = const(int, 32)
on stmt: chunk.1 = $binop_add94.21 // $const98.22
on stmt: $binop_add110.26 = k + hypervector_size
on stmt: $const114.27 = const(int, 32)
on stmt: pos = $binop_add110.26 % $const114.27
replaced with: pos.1 = $binop_add110.26 % $const114.27
on stmt: $binop_add128.32 = graph_index + node
on stmt: $134build_tuple.34 = build_tuple(items=[Var($binop_add128.32, graphs.py:132), Var(chunk.1, graphs.py:130)])
on stmt: $140binary_subscr.35 = getitem(value=X, index=$134build_tuple.34, fn=<built-in function getitem>)
on stmt: $const144.36 = const(int, 1)
on stmt: $binop_lshift148.38 = $const144.36 << pos
on stmt: $152unary_invert.39 = unary(fn=<built-in function invert>, value=$binop_lshift148.38)
on stmt: $binop_iand154.40 = inplace_binop(fn=<built-in function iand>, immutable_fn=<built-in function and_>, lhs=$140binary_subscr.35, rhs=$152unary_invert.39, static_lhs=Undefined, static_rhs=Undefined)
on stmt: X[$134build_tuple.34] = $binop_iand154.40
on stmt: jump 22
==== SSA block rewrite pass on 168
Running <numba.core.ssa._FreshVarHandler object at 0x7b9f4b1491f0>
on stmt: $const170.2 = const(NoneType, None)
on stmt: $170return_const.3 = cast(value=$const170.2)
on stmt: return $170return_const.3
Replaced assignments: defaultdict(<class 'list'>,
            {26: [<numba.core.ir.Assign object at 0x7b9f4b148e90>,
                  <numba.core.ir.Assign object at 0x7b9f4b28a270>]})
==== SSA block rewrite pass on 0
Running <numba.core.ssa._FixSSAVars object at 0x7b9f4b3d9160>
on stmt: hypervectors = arg(0, name=hypervectors)
on stmt: hypervector_size = arg(1, name=hypervector_size)
on stmt: graph_index = arg(2, name=graph_index)
on stmt: node = arg(3, name=node)
on stmt: symbol = arg(4, name=symbol)
on stmt: X = arg(5, name=X)
on stmt: $const8.2 = const(NoneType, None)
on stmt: $const10.3 = const(NoneType, None)
on stmt: $12build_slice.4 = global(slice: <class 'slice'>)
on stmt: $12build_slice.5 = call $12build_slice.4($const8.2, $const10.3, func=$12build_slice.4, args=(Var($const8.2, graphs.py:124), Var($const10.3, graphs.py:124)), kws=(), vararg=None, varkwarg=None, target=None)
on stmt: $14build_tuple.6 = build_tuple(items=[Var(symbol, graphs.py:121), Var($12build_slice.5, graphs.py:124)])
on stmt: $16binary_subscr.7 = getitem(value=hypervectors, index=$14build_tuple.6, fn=<built-in function getitem>)
on stmt: $20get_iter.8 = getiter(value=$16binary_subscr.7)
on stmt: $phi22.0 = $20get_iter.8
on stmt: jump 22
==== SSA block rewrite pass on 22
Running <numba.core.ssa._FixSSAVars object at 0x7b9f4b3d9160>
on stmt: $22for_iter.1 = iternext(value=$phi22.0)
on stmt: $22for_iter.2 = pair_first(value=$22for_iter.1)
on stmt: $22for_iter.3 = pair_second(value=$22for_iter.1)
on stmt: $phi26.1 = $22for_iter.2
on stmt: branch $22for_iter.3, 26, 168
==== SSA block rewrite pass on 26
Running <numba.core.ssa._FixSSAVars object at 0x7b9f4b3d9160>
on stmt: k = $phi26.1
on stmt: $const30.3 = const(int, 32)
on stmt: chunk = k // $const30.3
on stmt: $const40.6 = const(int, 32)
on stmt: pos = k % $const40.6
on stmt: $binop_add54.11 = graph_index + node
on stmt: $60build_tuple.13 = build_tuple(items=[Var($binop_add54.11, graphs.py:128), Var(chunk, graphs.py:125)])
on stmt: $66binary_subscr.14 = getitem(value=X, index=$60build_tuple.13, fn=<built-in function getitem>)
on stmt: $const70.15 = const(int, 1)
on stmt: $binop_lshift74.17 = $const70.15 << pos
find_def var='pos' stmt=$binop_lshift74.17 = $const70.15 << pos
on stmt: $binop_ior78.18 = inplace_binop(fn=<built-in function ior>, immutable_fn=<built-in function or_>, lhs=$66binary_subscr.14, rhs=$binop_lshift74.17, static_lhs=Undefined, static_rhs=Undefined)
on stmt: X[$60build_tuple.13] = $binop_ior78.18
on stmt: $binop_add94.21 = k + hypervector_size
on stmt: $const98.22 = const(int, 32)
on stmt: chunk.1 = $binop_add94.21 // $const98.22
on stmt: $binop_add110.26 = k + hypervector_size
on stmt: $const114.27 = const(int, 32)
on stmt: pos.1 = $binop_add110.26 % $const114.27
on stmt: $binop_add128.32 = graph_index + node
on stmt: $134build_tuple.34 = build_tuple(items=[Var($binop_add128.32, graphs.py:132), Var(chunk.1, graphs.py:130)])
on stmt: $140binary_subscr.35 = getitem(value=X, index=$134build_tuple.34, fn=<built-in function getitem>)
on stmt: $const144.36 = const(int, 1)
on stmt: $binop_lshift148.38 = $const144.36 << pos
find_def var='pos' stmt=$binop_lshift148.38 = $const144.36 << pos
replaced with: $binop_lshift148.38 = $const144.36 << pos.1
on stmt: $152unary_invert.39 = unary(fn=<built-in function invert>, value=$binop_lshift148.38)
on stmt: $binop_iand154.40 = inplace_binop(fn=<built-in function iand>, immutable_fn=<built-in function and_>, lhs=$140binary_subscr.35, rhs=$152unary_invert.39, static_lhs=Undefined, static_rhs=Undefined)
on stmt: X[$134build_tuple.34] = $binop_iand154.40
on stmt: jump 22
==== SSA block rewrite pass on 168
Running <numba.core.ssa._FixSSAVars object at 0x7b9f4b3d9160>
on stmt: $const170.2 = const(NoneType, None)
on stmt: $170return_const.3 = cast(value=$const170.2)
on stmt: return $170return_const.3
Creating test data
Epoch#1 -- Accuracy train: 0.542 -- Accuracy test: 0.524 
Epoch#2 -- Accuracy train: 0.5418888888888889 -- Accuracy test: 0.529 
Epoch#3 -- Accuracy train: 0.5416666666666666 -- Accuracy test: 0.542 
Epoch#4 -- Accuracy train: 0.5418888888888889 -- Accuracy test: 0.529 
Epoch#5 -- Accuracy train: 0.5418888888888889 -- Accuracy test: 0.529 
Epoch#6 -- Accuracy train: 0.5418888888888889 -- Accuracy test: 0.529 
Epoch#7 -- Accuracy train: 0.48444444444444446 -- Accuracy test: 0.459 
Epoch#8 -- Accuracy train: 0.5418888888888889 -- Accuracy test: 0.529 
Epoch#9 -- Accuracy train: 0.5418888888888889 -- Accuracy test: 0.53 
Epoch#10 -- Accuracy train: 0.5484444444444444 -- Accuracy test: 0.54 
Epoch#11 -- Accuracy train: 0.518 -- Accuracy test: 0.546 
Epoch#12 -- Accuracy train: 0.5417777777777778 -- Accuracy test: 0.528 
Epoch#13 -- Accuracy train: 0.5421111111111111 -- Accuracy test: 0.53 
Epoch#14 -- Accuracy train: 0.5425555555555556 -- Accuracy test: 0.528 
Epoch#15 -- Accuracy train: 0.5191111111111111 -- Accuracy test: 0.548 
Epoch#16 -- Accuracy train: 0.5515555555555556 -- Accuracy test: 0.553 
Epoch#17 -- Accuracy train: 0.5418888888888889 -- Accuracy test: 0.529 
Epoch#18 -- Accuracy train: 0.5418888888888889 -- Accuracy test: 0.529 
Epoch#19 -- Accuracy train: 0.5418888888888889 -- Accuracy test: 0.529 
Epoch#20 -- Accuracy train: 0.5418888888888889 -- Accuracy test: 0.529 
Epoch#21 -- Accuracy train: 0.5553333333333333 -- Accuracy test: 0.527 
Epoch#22 -- Accuracy train: 0.5418888888888889 -- Accuracy test: 0.529 
Epoch#23 -- Accuracy train: 0.5471111111111111 -- Accuracy test: 0.537 
Epoch#24 -- Accuracy train: 0.5211111111111111 -- Accuracy test: 0.55 
Epoch#25 -- Accuracy train: 0.5431111111111111 -- Accuracy test: 0.53 
Epoch#26 -- Accuracy train: 0.542 -- Accuracy test: 0.529 
Epoch#27 -- Accuracy train: 0.5687777777777778 -- Accuracy test: 0.565 
Epoch#28 -- Accuracy train: 0.5407777777777778 -- Accuracy test: 0.528 
Epoch#29 -- Accuracy train: 0.5368888888888889 -- Accuracy test: 0.525 
Epoch#30 -- Accuracy train: 0.5418888888888889 -- Accuracy test: 0.529 
Epoch#31 -- Accuracy train: 0.4842222222222222 -- Accuracy test: 0.488 
Epoch#32 -- Accuracy train: 0.5424444444444444 -- Accuracy test: 0.528 
Epoch#33 -- Accuracy train: 0.5413333333333333 -- Accuracy test: 0.53 
Epoch#34 -- Accuracy train: 0.5426666666666666 -- Accuracy test: 0.53 
Epoch#35 -- Accuracy train: 0.5424444444444444 -- Accuracy test: 0.529 
Epoch#36 -- Accuracy train: 0.5458888888888889 -- Accuracy test: 0.536 
Epoch#37 -- Accuracy train: 0.5436666666666666 -- Accuracy test: 0.528 
Epoch#38 -- Accuracy train: 0.5421111111111111 -- Accuracy test: 0.529 
Epoch#39 -- Accuracy train: 0.5611111111111111 -- Accuracy test: 0.56 
Epoch#40 -- Accuracy train: 0.5571111111111111 -- Accuracy test: 0.543 
Epoch#41 -- Accuracy train: 0.5418888888888889 -- Accuracy test: 0.529 
Epoch#42 -- Accuracy train: 0.557 -- Accuracy test: 0.535 
Epoch#43 -- Accuracy train: 0.547 -- Accuracy test: 0.535 
Epoch#44 -- Accuracy train: 0.5511111111111111 -- Accuracy test: 0.538 
Epoch#45 -- Accuracy train: 0.5566666666666666 -- Accuracy test: 0.555 
Epoch#46 -- Accuracy train: 0.5444444444444444 -- Accuracy test: 0.53 
Epoch#47 -- Accuracy train: 0.5308888888888889 -- Accuracy test: 0.567 
Epoch#48 -- Accuracy train: 0.5418888888888889 -- Accuracy test: 0.53 
Epoch#49 -- Accuracy train: 0.539 -- Accuracy test: 0.53 
Epoch#50 -- Accuracy train: 0.5415555555555556 -- Accuracy test: 0.525 
Epoch#51 -- Accuracy train: 0.5611111111111111 -- Accuracy test: 0.549 
Epoch#52 -- Accuracy train: 0.5421111111111111 -- Accuracy test: 0.529 
Epoch#53 -- Accuracy train: 0.5418888888888889 -- Accuracy test: 0.528 
Epoch#54 -- Accuracy train: 0.521 -- Accuracy test: 0.553 
Epoch#55 -- Accuracy train: 0.5416666666666666 -- Accuracy test: 0.529 
Epoch#56 -- Accuracy train: 0.5163333333333333 -- Accuracy test: 0.542 
Epoch#57 -- Accuracy train: 0.5491111111111111 -- Accuracy test: 0.529 
Epoch#58 -- Accuracy train: 0.5418888888888889 -- Accuracy test: 0.529 
Epoch#59 -- Accuracy train: 0.4822222222222222 -- Accuracy test: 0.495 
Epoch#60 -- Accuracy train: 0.5418888888888889 -- Accuracy test: 0.529 
Epoch#61 -- Accuracy train: 0.5418888888888889 -- Accuracy test: 0.529 
Epoch#62 -- Accuracy train: 0.5418888888888889 -- Accuracy test: 0.529 
Epoch#63 -- Accuracy train: 0.5442222222222223 -- Accuracy test: 0.526 
Epoch#64 -- Accuracy train: 0.5594444444444444 -- Accuracy test: 0.558 
Epoch#65 -- Accuracy train: 0.5204444444444445 -- Accuracy test: 0.545 
Epoch#66 -- Accuracy train: 0.5475555555555556 -- Accuracy test: 0.537 
Epoch#67 -- Accuracy train: 0.5418888888888889 -- Accuracy test: 0.529 
Epoch#68 -- Accuracy train: 0.5422222222222223 -- Accuracy test: 0.53 
Epoch#69 -- Accuracy train: 0.5418888888888889 -- Accuracy test: 0.529 
Epoch#70 -- Accuracy train: 0.5418888888888889 -- Accuracy test: 0.529 
Epoch#71 -- Accuracy train: 0.5183333333333333 -- Accuracy test: 0.546 
Epoch#72 -- Accuracy train: 0.5425555555555556 -- Accuracy test: 0.524 
Epoch#73 -- Accuracy train: 0.542 -- Accuracy test: 0.53 
Epoch#74 -- Accuracy train: 0.5455555555555556 -- Accuracy test: 0.546 
Epoch#75 -- Accuracy train: 0.556 -- Accuracy test: 0.568 
Epoch#76 -- Accuracy train: 0.5426666666666666 -- Accuracy test: 0.53 
Epoch#77 -- Accuracy train: 0.5418888888888889 -- Accuracy test: 0.529 
Epoch#78 -- Accuracy train: 0.5463333333333333 -- Accuracy test: 0.536 
Epoch#79 -- Accuracy train: 0.5435555555555556 -- Accuracy test: 0.526 
Epoch#80 -- Accuracy train: 0.5251111111111111 -- Accuracy test: 0.554 
Epoch#81 -- Accuracy train: 0.5417777777777778 -- Accuracy test: 0.526 
Epoch#82 -- Accuracy train: 0.5417777777777778 -- Accuracy test: 0.527 
Epoch#83 -- Accuracy train: 0.5182222222222223 -- Accuracy test: 0.546 
Epoch#84 -- Accuracy train: 0.5345555555555556 -- Accuracy test: 0.512 
Epoch#85 -- Accuracy train: 0.5418888888888889 -- Accuracy test: 0.529 
Epoch#86 -- Accuracy train: 0.5456666666666666 -- Accuracy test: 0.571 
Epoch#87 -- Accuracy train: 0.5417777777777778 -- Accuracy test: 0.529 
Epoch#88 -- Accuracy train: 0.5418888888888889 -- Accuracy test: 0.529 
Epoch#89 -- Accuracy train: 0.5416666666666666 -- Accuracy test: 0.529 
Epoch#90 -- Accuracy train: 0.5433333333333333 -- Accuracy test: 0.532 
Epoch#91 -- Accuracy train: 0.542 -- Accuracy test: 0.529 
Epoch#92 -- Accuracy train: 0.542 -- Accuracy test: 0.529 
Epoch#93 -- Accuracy train: 0.4651111111111111 -- Accuracy test: 0.478 
Epoch#94 -- Accuracy train: 0.5661111111111111 -- Accuracy test: 0.573 
Epoch#95 -- Accuracy train: 0.5456666666666666 -- Accuracy test: 0.531 
Epoch#96 -- Accuracy train: 0.5417777777777778 -- Accuracy test: 0.53 
Epoch#97 -- Accuracy train: 0.5418888888888889 -- Accuracy test: 0.529 
Epoch#98 -- Accuracy train: 0.5542222222222222 -- Accuracy test: 0.539 
Epoch#99 -- Accuracy train: 0.5418888888888889 -- Accuracy test: 0.529 
Epoch#100 -- Accuracy train: 0.5418888888888889 -- Accuracy test: 0.529 
Time: 2005.8838634490967
Clause #0 W:(-44 -7) NOT x0 AND NOT x31 AND NOT x80 AND NOT x112 AND NOT x135 AND NOT x156 AND NOT x162 AND NOT x219
Number of literals: 8
Clause #1 W:(-2 22) NOT x123 AND NOT x193
Number of literals: 2
Clause #2 W:(-1 12) NOT x68 AND NOT x72 AND NOT x149 AND NOT x207 AND NOT x215
Number of literals: 5
Clause #3 W:(-3 -8) NOT x19 AND NOT x70 AND NOT x92 AND NOT x130 AND NOT x185 AND NOT x231
Number of literals: 6
Clause #4 W:(-11 -13) NOT x9 AND NOT x57 AND NOT x95 AND NOT x104 AND NOT x123 AND NOT x161 AND NOT x195 AND NOT x234
Number of literals: 8
Clause #5 W:(-2 -7) NOT x10 AND NOT x174 AND NOT x209 AND NOT x224
Number of literals: 4
Clause #6 W:(-3 -9) NOT x71 AND NOT x120 AND NOT x140 AND NOT x187 AND NOT x190 AND NOT x193 AND NOT x207
Number of literals: 7
Clause #7 W:(11 -8) NOT x15 AND NOT x63 AND NOT x72 AND NOT x158 AND NOT x221
Number of literals: 5
Clause #8 W:(3 -5) NOT x10 AND NOT x78 AND NOT x134 AND NOT x142 AND NOT x157 AND NOT x182 AND NOT x237 AND NOT x239 AND NOT x251 AND NOT x254
Number of literals: 10
Clause #9 W:(-3 2) x189 AND NOT x5 AND NOT x54 AND NOT x147 AND NOT x177 AND NOT x191 AND NOT x210
Number of literals: 7
Clause #10 W:(-3 -19) NOT x67 AND NOT x255
Number of literals: 2
Clause #11 W:(8 -6) x32 AND NOT x27 AND NOT x44 AND NOT x71 AND NOT x83 AND NOT x228
Number of literals: 6
Clause #12 W:(-10 -9) NOT x65 AND NOT x90 AND NOT x142
Number of literals: 3
Clause #13 W:(-22 34) x130 AND NOT x20 AND NOT x32 AND NOT x40 AND NOT x43 AND NOT x61 AND NOT x119 AND NOT x176 AND NOT x185 AND NOT x189 AND NOT x197 AND NOT x213 AND NOT x243
Number of literals: 13
Clause #14 W:(-6 -3) NOT x32 AND NOT x36 AND NOT x42 AND NOT x47 AND NOT x71 AND NOT x178 AND NOT x194 AND NOT x223 AND NOT x230 AND NOT x246 AND NOT x251
Number of literals: 11
Clause #15 W:(15 4) NOT x63 AND NOT x175 AND NOT x182 AND NOT x255
Number of literals: 4
Clause #16 W:(33 2) x12 AND NOT x91 AND NOT x107 AND NOT x126 AND NOT x141 AND NOT x164 AND NOT x179 AND NOT x193
Number of literals: 8
Clause #17 W:(2 6) NOT x6 AND NOT x175 AND NOT x187 AND NOT x227
Number of literals: 4
Clause #18 W:(-3 -1) NOT x93 AND NOT x104
Number of literals: 2
Clause #19 W:(10 31) NOT x26 AND NOT x65 AND NOT x73 AND NOT x113 AND NOT x121 AND NOT x123 AND NOT x154 AND NOT x199 AND NOT x228
Number of literals: 9
Clause #20 W:(-3 -10) NOT x19 AND NOT x28 AND NOT x33 AND NOT x55 AND NOT x127 AND NOT x148
Number of literals: 6
Clause #21 W:(-1 0) 
Number of literals: 0
Clause #22 W:(6 -2) NOT x28 AND NOT x108 AND NOT x141 AND NOT x146
Number of literals: 4
Clause #23 W:(-16 -3) x102 AND NOT x22 AND NOT x57 AND NOT x59 AND NOT x65 AND NOT x74 AND NOT x117 AND NOT x136 AND NOT x150 AND NOT x169 AND NOT x172 AND NOT x204 AND NOT x209 AND NOT x219 AND NOT x223 AND NOT x230 AND NOT x246
Number of literals: 17
Clause #24 W:(12 -9) NOT x125 AND NOT x135 AND NOT x167 AND NOT x183 AND NOT x228
Number of literals: 5
Clause #25 W:(14 9) NOT x1 AND NOT x16 AND NOT x93 AND NOT x94 AND NOT x103 AND NOT x120 AND NOT x121 AND NOT x122 AND NOT x173
Number of literals: 9
Clause #26 W:(-16 5) NOT x5 AND NOT x98 AND NOT x157 AND NOT x204 AND NOT x221 AND NOT x245
Number of literals: 6
Clause #27 W:(-18 4) NOT x27 AND NOT x64 AND NOT x119 AND NOT x178 AND NOT x208 AND NOT x236 AND NOT x249
Number of literals: 7
Clause #28 W:(-18 -17) NOT x2 AND NOT x58 AND NOT x74 AND NOT x120 AND NOT x156 AND NOT x164 AND NOT x168
Number of literals: 7
Clause #29 W:(0 0) NOT x49 AND NOT x51 AND NOT x196 AND NOT x199 AND NOT x201 AND NOT x231 AND NOT x253
Number of literals: 7
Clause #30 W:(22 15) NOT x31 AND NOT x46 AND NOT x83 AND NOT x215 AND NOT x246
Number of literals: 5
Clause #31 W:(-6 -40) NOT x25 AND NOT x70 AND NOT x127 AND NOT x150 AND NOT x233
Number of literals: 5
Clause #32 W:(29 -13) NOT x46 AND NOT x111 AND NOT x119 AND NOT x165 AND NOT x187 AND NOT x190 AND NOT x197 AND NOT x209 AND NOT x225 AND NOT x244
Number of literals: 10
Clause #33 W:(0 -8) x180 AND NOT x21 AND NOT x25 AND NOT x27 AND NOT x63 AND NOT x102 AND NOT x135 AND NOT x203 AND NOT x241
Number of literals: 9
Clause #34 W:(-2 -21) NOT x0 AND NOT x10 AND NOT x43 AND NOT x46
Number of literals: 4
Clause #35 W:(-1 0) NOT x3 AND NOT x4 AND NOT x48 AND NOT x70 AND NOT x83
Number of literals: 5
Clause #36 W:(-24 15) NOT x173
Number of literals: 1
Clause #37 W:(-13 -16) NOT x22 AND NOT x27 AND NOT x55 AND NOT x102 AND NOT x103 AND NOT x152 AND NOT x155 AND NOT x166 AND NOT x173 AND NOT x218 AND NOT x221 AND NOT x229 AND NOT x249
Number of literals: 13
Clause #38 W:(-3 -4) NOT x22 AND NOT x39 AND NOT x52 AND NOT x101 AND NOT x161 AND NOT x185 AND NOT x215 AND NOT x235
Number of literals: 8
Clause #39 W:(4 -21) NOT x0 AND NOT x2 AND NOT x50 AND NOT x57 AND NOT x81 AND NOT x123 AND NOT x147 AND NOT x197 AND NOT x205 AND NOT x210
Number of literals: 10
Clause #40 W:(-35 10) NOT x13 AND NOT x58 AND NOT x134 AND NOT x143 AND NOT x149 AND NOT x241
Number of literals: 6
Clause #41 W:(-10 3) NOT x104 AND NOT x178 AND NOT x232 AND NOT x244
Number of literals: 4
Clause #42 W:(-18 -31) NOT x53 AND NOT x65 AND NOT x100 AND NOT x110 AND NOT x139 AND NOT x146 AND NOT x173 AND NOT x249
Number of literals: 8
Clause #43 W:(-18 -20) x189 AND x225 AND NOT x17 AND NOT x18 AND NOT x23 AND NOT x27 AND NOT x58 AND NOT x68 AND NOT x80 AND NOT x85 AND NOT x150 AND NOT x179 AND NOT x185 AND NOT x235
Number of literals: 14
Clause #44 W:(7 -25) NOT x101 AND NOT x154 AND NOT x165 AND NOT x199 AND NOT x226
Number of literals: 5
Clause #45 W:(22 2) NOT x3 AND NOT x10 AND NOT x32 AND NOT x91 AND NOT x98 AND NOT x160 AND NOT x174 AND NOT x196 AND NOT x216 AND NOT x254
Number of literals: 10
Clause #46 W:(-24 -5) NOT x84 AND NOT x124 AND NOT x162 AND NOT x209 AND NOT x238 AND NOT x244 AND NOT x250
Number of literals: 7
Clause #47 W:(19 -5) NOT x54 AND NOT x113 AND NOT x124 AND NOT x131 AND NOT x176 AND NOT x195 AND NOT x198 AND NOT x228 AND NOT x246 AND NOT x250 AND NOT x252
Number of literals: 11
Clause #48 W:(14 7) NOT x28 AND NOT x59 AND NOT x84 AND NOT x107 AND NOT x109 AND NOT x150 AND NOT x187 AND NOT x246
Number of literals: 8
Clause #49 W:(17 -23) NOT x21 AND NOT x52 AND NOT x87 AND NOT x141 AND NOT x243 AND NOT x246
Number of literals: 6
Clause #50 W:(1 0) NOT x9 AND NOT x65 AND NOT x129 AND NOT x187 AND NOT x204
Number of literals: 5
Clause #51 W:(-1 4) 
Number of literals: 0
Clause #52 W:(11 34) NOT x49 AND NOT x149 AND NOT x181 AND NOT x183 AND NOT x191 AND NOT x215 AND NOT x248
Number of literals: 7
Clause #53 W:(-4 -2) NOT x56 AND NOT x65 AND NOT x84 AND NOT x214 AND NOT x224
Number of literals: 5
Clause #54 W:(3 0) NOT x62 AND NOT x123 AND NOT x212 AND NOT x250
Number of literals: 4
Clause #55 W:(-6 -7) NOT x77 AND NOT x137
Number of literals: 2
Clause #56 W:(-3 20) NOT x4 AND NOT x113 AND NOT x123 AND NOT x152 AND NOT x230
Number of literals: 5
Clause #57 W:(4 6) NOT x8 AND NOT x30 AND NOT x37 AND NOT x66 AND NOT x87 AND NOT x134 AND NOT x146 AND NOT x206 AND NOT x246
Number of literals: 9
Clause #58 W:(14 11) NOT x74 AND NOT x186 AND NOT x194 AND NOT x205 AND NOT x251
Number of literals: 5
Clause #59 W:(1 1) NOT x2 AND NOT x50 AND NOT x83 AND NOT x91 AND NOT x191 AND NOT x233
Number of literals: 6
Clause #60 W:(23 20) NOT x61 AND NOT x63 AND NOT x88 AND NOT x104 AND NOT x169 AND NOT x199 AND NOT x212
Number of literals: 7
Clause #61 W:(12 25) NOT x8 AND NOT x15 AND NOT x56 AND NOT x58 AND NOT x64 AND NOT x145 AND NOT x149 AND NOT x172 AND NOT x195 AND NOT x211
Number of literals: 10
Clause #62 W:(-32 10) NOT x36 AND NOT x44 AND NOT x89 AND NOT x116
Number of literals: 4
Clause #63 W:(-3 -18) NOT x23 AND NOT x52 AND NOT x148 AND NOT x169 AND NOT x201 AND NOT x242
Number of literals: 6
Clause #64 W:(11 0) NOT x30 AND NOT x62 AND NOT x77 AND NOT x107 AND NOT x123 AND NOT x222
Number of literals: 6
Clause #65 W:(0 10) NOT x11 AND NOT x48 AND NOT x73 AND NOT x96 AND NOT x157 AND NOT x164 AND NOT x182
Number of literals: 7
Clause #66 W:(0 0) NOT x24 AND NOT x89 AND NOT x190 AND NOT x236
Number of literals: 4
Clause #67 W:(7 -10) x12 AND NOT x9 AND NOT x80
Number of literals: 3
Clause #68 W:(2 19) x220 AND x225 AND NOT x62 AND NOT x87 AND NOT x163 AND NOT x164 AND NOT x166 AND NOT x171 AND NOT x194 AND NOT x198
Number of literals: 10
Clause #69 W:(24 -2) NOT x23 AND NOT x106 AND NOT x162 AND NOT x179 AND NOT x231
Number of literals: 5
Clause #70 W:(5 18) NOT x10 AND NOT x90 AND NOT x117 AND NOT x128 AND NOT x159 AND NOT x173 AND NOT x216
Number of literals: 7
Clause #71 W:(-6 -9) NOT x24 AND NOT x40 AND NOT x41 AND NOT x82 AND NOT x146 AND NOT x160 AND NOT x237
Number of literals: 7
Clause #72 W:(-9 -4) NOT x1 AND NOT x53 AND NOT x76 AND NOT x107 AND NOT x136 AND NOT x180 AND NOT x212 AND NOT x246
Number of literals: 8
Clause #73 W:(-10 -17) NOT x2 AND NOT x24 AND NOT x56 AND NOT x131 AND NOT x151 AND NOT x163 AND NOT x170 AND NOT x219 AND NOT x236
Number of literals: 9
Clause #74 W:(-18 -22) NOT x106 AND NOT x234 AND NOT x238 AND NOT x250 AND NOT x253
Number of literals: 5
Clause #75 W:(12 5) x220 AND NOT x46 AND NOT x134 AND NOT x192 AND NOT x193 AND NOT x219
Number of literals: 6
Clause #76 W:(-1 -8) NOT x6 AND NOT x140 AND NOT x163 AND NOT x222 AND NOT x228
Number of literals: 5
Clause #77 W:(32 2) NOT x26 AND NOT x30 AND NOT x45 AND NOT x127 AND NOT x156 AND NOT x172 AND NOT x220 AND NOT x225
Number of literals: 8
Clause #78 W:(5 4) x32 AND NOT x10 AND NOT x127 AND NOT x227
Number of literals: 4
Clause #79 W:(1 -3) NOT x38 AND NOT x63 AND NOT x123 AND NOT x142 AND NOT x153 AND NOT x186 AND NOT x205
Number of literals: 7
Clause #80 W:(-34 8) NOT x12 AND NOT x49 AND NOT x65 AND NOT x136 AND NOT x168 AND NOT x194
Number of literals: 6
Clause #81 W:(-25 0) NOT x89 AND NOT x161
Number of literals: 2
Clause #82 W:(-5 -3) NOT x40 AND NOT x60 AND NOT x71 AND NOT x91 AND NOT x204 AND NOT x220 AND NOT x233
Number of literals: 7
Clause #83 W:(-35 -34) NOT x16 AND NOT x18 AND NOT x25 AND NOT x26 AND NOT x45 AND NOT x82 AND NOT x158 AND NOT x190 AND NOT x197
Number of literals: 9
Clause #84 W:(24 2) NOT x14 AND NOT x51 AND NOT x119 AND NOT x123 AND NOT x125 AND NOT x147 AND NOT x184 AND NOT x230 AND NOT x243
Number of literals: 9
Clause #85 W:(-33 -10) NOT x48 AND NOT x61 AND NOT x64 AND NOT x97 AND NOT x132 AND NOT x223 AND NOT x242 AND NOT x251
Number of literals: 8
Clause #86 W:(0 1) NOT x47 AND NOT x79 AND NOT x103 AND NOT x151
Number of literals: 4
Clause #87 W:(2 3) NOT x151 AND NOT x156 AND NOT x169 AND NOT x174 AND NOT x182 AND NOT x223
Number of literals: 6
Clause #88 W:(3 -1) NOT x39 AND NOT x79 AND NOT x159 AND NOT x188 AND NOT x229 AND NOT x254
Number of literals: 6
Clause #89 W:(12 7) x180 AND NOT x18 AND NOT x37 AND NOT x77 AND NOT x99 AND NOT x127 AND NOT x154 AND NOT x197
Number of literals: 8
Clause #90 W:(-5 -8) NOT x25 AND NOT x31 AND NOT x35 AND NOT x36 AND NOT x37 AND NOT x56 AND NOT x88 AND NOT x121 AND NOT x168 AND NOT x186 AND NOT x222 AND NOT x241
Number of literals: 12
Clause #91 W:(-25 3) NOT x7 AND NOT x9 AND NOT x28 AND NOT x37 AND NOT x49 AND NOT x61 AND NOT x69 AND NOT x83 AND NOT x143 AND NOT x147 AND NOT x154 AND NOT x156 AND NOT x182 AND NOT x187
Number of literals: 14
Clause #92 W:(-1 -4) NOT x68 AND NOT x166 AND NOT x181 AND NOT x222
Number of literals: 4
Clause #93 W:(-3 -5) NOT x69 AND NOT x96 AND NOT x126 AND NOT x132 AND NOT x141 AND NOT x161 AND NOT x188
Number of literals: 7
Clause #94 W:(-15 -3) NOT x74 AND NOT x89 AND NOT x190 AND NOT x193 AND NOT x227 AND NOT x231
Number of literals: 6
Clause #95 W:(7 5) NOT x66 AND NOT x108 AND NOT x143 AND NOT x162 AND NOT x193
Number of literals: 5
Clause #96 W:(0 -1) NOT x227
Number of literals: 1
Clause #97 W:(0 1) NOT x42 AND NOT x69
Number of literals: 2
Clause #98 W:(10 28) NOT x77 AND NOT x111 AND NOT x161 AND NOT x169 AND NOT x181 AND NOT x204
Number of literals: 6
Clause #99 W:(14 4) NOT x3 AND NOT x21 AND NOT x126 AND NOT x162
Number of literals: 4
Clause #100 W:(-11 1) NOT x46 AND NOT x78 AND NOT x172 AND NOT x231
Number of literals: 4
Clause #101 W:(-16 3) NOT x1 AND NOT x45 AND NOT x46 AND NOT x157 AND NOT x172 AND NOT x246 AND NOT x254
Number of literals: 7
Clause #102 W:(-2 1) NOT x21 AND NOT x74 AND NOT x84 AND NOT x97 AND NOT x148 AND NOT x175 AND NOT x185 AND NOT x222
Number of literals: 8
Clause #103 W:(-25 -7) NOT x34 AND NOT x46 AND NOT x49 AND NOT x66 AND NOT x215 AND NOT x233
Number of literals: 6
Clause #104 W:(-17 -7) NOT x40 AND NOT x61 AND NOT x105 AND NOT x110 AND NOT x153 AND NOT x168 AND NOT x186 AND NOT x229 AND NOT x254
Number of literals: 9
Clause #105 W:(-1 1) NOT x21 AND NOT x126
Number of literals: 2
Clause #106 W:(24 -17) NOT x13 AND NOT x61 AND NOT x76 AND NOT x199
Number of literals: 4
Clause #107 W:(12 -4) NOT x19 AND NOT x49 AND NOT x65 AND NOT x87 AND NOT x89 AND NOT x131 AND NOT x235
Number of literals: 7
Clause #108 W:(6 -37) NOT x3 AND NOT x187 AND NOT x227 AND NOT x237 AND NOT x241 AND NOT x250
Number of literals: 6
Clause #109 W:(-7 7) NOT x40 AND NOT x113 AND NOT x139 AND NOT x185
Number of literals: 4
Clause #110 W:(-10 -11) NOT x21 AND NOT x60 AND NOT x251
Number of literals: 3
Clause #111 W:(-3 -1) x189 AND NOT x222
Number of literals: 2
Clause #112 W:(-23 -7) NOT x29 AND NOT x73 AND NOT x77 AND NOT x103 AND NOT x134 AND NOT x137 AND NOT x139
Number of literals: 7
Clause #113 W:(26 3) NOT x6 AND NOT x65 AND NOT x105 AND NOT x122 AND NOT x134 AND NOT x209 AND NOT x213
Number of literals: 7
Clause #114 W:(0 15) NOT x5 AND NOT x26 AND NOT x29 AND NOT x34 AND NOT x38 AND NOT x63 AND NOT x168 AND NOT x185 AND NOT x214
Number of literals: 9
Clause #115 W:(-14 -3) x86 AND NOT x32 AND NOT x68 AND NOT x69 AND NOT x77 AND NOT x152 AND NOT x219 AND NOT x241
Number of literals: 8
Clause #116 W:(14 -17) NOT x42 AND NOT x64 AND NOT x149 AND NOT x218 AND NOT x237
Number of literals: 5
Clause #117 W:(-16 0) NOT x15 AND NOT x40 AND NOT x64 AND NOT x169
Number of literals: 4
Clause #118 W:(1 4) NOT x9 AND NOT x44 AND NOT x122 AND NOT x131 AND NOT x157 AND NOT x169 AND NOT x220 AND NOT x225
Number of literals: 8
Clause #119 W:(-22 -4) NOT x44 AND NOT x80 AND NOT x125 AND NOT x188 AND NOT x215 AND NOT x253
Number of literals: 6
Clause #120 W:(0 20) NOT x79 AND NOT x116 AND NOT x121 AND NOT x181 AND NOT x201 AND NOT x227
Number of literals: 6
Clause #121 W:(-8 7) NOT x89 AND NOT x151 AND NOT x160 AND NOT x229
Number of literals: 4
Clause #122 W:(43 13) NOT x23 AND NOT x31 AND NOT x61 AND NOT x66 AND NOT x83 AND NOT x122 AND NOT x126 AND NOT x143 AND NOT x212
Number of literals: 9
Clause #123 W:(20 12) NOT x28 AND NOT x32 AND NOT x47 AND NOT x76 AND NOT x154 AND NOT x178 AND NOT x188 AND NOT x203 AND NOT x231
Number of literals: 9
Clause #124 W:(14 14) NOT x5 AND NOT x7 AND NOT x107 AND NOT x112 AND NOT x121 AND NOT x153 AND NOT x251
Number of literals: 7
Clause #125 W:(-21 -1) NOT x52 AND NOT x65 AND NOT x142 AND NOT x200 AND NOT x234
Number of literals: 5
Clause #126 W:(33 15) NOT x108 AND NOT x226
Number of literals: 2
Clause #127 W:(-15 -12) NOT x65 AND NOT x76 AND NOT x169 AND NOT x228 AND NOT x233
Number of literals: 5
Clause #128 W:(-2 1) NOT x10 AND NOT x21 AND NOT x70 AND NOT x136 AND NOT x148
Number of literals: 5
Clause #129 W:(5 8) NOT x48 AND NOT x248
Number of literals: 2
Clause #130 W:(7 26) NOT x140 AND NOT x147 AND NOT x230
Number of literals: 3
Clause #131 W:(0 -6) NOT x32 AND NOT x47 AND NOT x67 AND NOT x68 AND NOT x208
Number of literals: 5
Clause #132 W:(10 -7) NOT x44 AND NOT x64 AND NOT x94 AND NOT x238
Number of literals: 4
Clause #133 W:(0 -1) x136 AND NOT x4 AND NOT x68 AND NOT x73 AND NOT x185 AND NOT x222
Number of literals: 6
Clause #134 W:(-2 -10) 
Number of literals: 0
Clause #135 W:(-8 26) NOT x83 AND NOT x138 AND NOT x164 AND NOT x170 AND NOT x174 AND NOT x186 AND NOT x237 AND NOT x240 AND NOT x252
Number of literals: 9
Clause #136 W:(-2 0) NOT x37 AND NOT x52 AND NOT x252
Number of literals: 3
Clause #137 W:(8 11) NOT x21 AND NOT x67 AND NOT x101 AND NOT x132 AND NOT x211 AND NOT x218
Number of literals: 6
Clause #138 W:(8 12) NOT x99 AND NOT x112 AND NOT x124 AND NOT x154 AND NOT x159 AND NOT x182 AND NOT x196 AND NOT x212
Number of literals: 8
Clause #139 W:(19 2) NOT x28 AND NOT x142 AND NOT x213 AND NOT x226 AND NOT x233 AND NOT x251 AND NOT x254
Number of literals: 7
Clause #140 W:(27 -25) NOT x151 AND NOT x155 AND NOT x167 AND NOT x189
Number of literals: 4
Clause #141 W:(2 -24) NOT x42 AND NOT x112 AND NOT x179 AND NOT x204 AND NOT x221 AND NOT x236
Number of literals: 6
Clause #142 W:(11 -8) NOT x11 AND NOT x21 AND NOT x24 AND NOT x44 AND NOT x47 AND NOT x64 AND NOT x65 AND NOT x85 AND NOT x86 AND NOT x150 AND NOT x249
Number of literals: 11
Clause #143 W:(15 9) NOT x38 AND NOT x39 AND NOT x93 AND NOT x100 AND NOT x123 AND NOT x180 AND NOT x213 AND NOT x220 AND NOT x225 AND NOT x245
Number of literals: 10
Clause #144 W:(-2 0) NOT x31 AND NOT x42 AND NOT x117 AND NOT x123 AND NOT x154
Number of literals: 5
Clause #145 W:(-6 59) NOT x23 AND NOT x41 AND NOT x55 AND NOT x94 AND NOT x121 AND NOT x133 AND NOT x159 AND NOT x184 AND NOT x228
Number of literals: 9
Clause #146 W:(4 11) x220 AND NOT x14 AND NOT x31 AND NOT x41 AND NOT x144 AND NOT x176 AND NOT x179 AND NOT x230 AND NOT x254
Number of literals: 9
Clause #147 W:(-25 21) NOT x18 AND NOT x54 AND NOT x57 AND NOT x98 AND NOT x114 AND NOT x163 AND NOT x224 AND NOT x239 AND NOT x245
Number of literals: 9
Clause #148 W:(16 14) NOT x27 AND NOT x72 AND NOT x150 AND NOT x161 AND NOT x182 AND NOT x195
Number of literals: 6
Clause #149 W:(-4 1) NOT x27 AND NOT x28 AND NOT x60 AND NOT x62 AND NOT x131
Number of literals: 5
Clause #150 W:(0 -2) NOT x19 AND NOT x54 AND NOT x70 AND NOT x88 AND NOT x197
Number of literals: 5
Clause #151 W:(0 -2) NOT x62 AND NOT x68 AND NOT x116 AND NOT x198 AND NOT x207 AND NOT x217
Number of literals: 6
Clause #152 W:(1 1) NOT x14 AND NOT x26 AND NOT x145 AND NOT x171 AND NOT x184 AND NOT x210
Number of literals: 6
Clause #153 W:(3 4) NOT x35 AND NOT x47 AND NOT x55 AND NOT x57 AND NOT x85 AND NOT x91 AND NOT x94 AND NOT x99 AND NOT x131 AND NOT x155 AND NOT x235 AND NOT x250
Number of literals: 12
Clause #154 W:(9 7) 
Number of literals: 0
Clause #155 W:(-3 26) NOT x51 AND NOT x171 AND NOT x174
Number of literals: 3
Clause #156 W:(25 -2) NOT x20 AND NOT x21 AND NOT x53 AND NOT x77 AND NOT x119 AND NOT x140 AND NOT x238
Number of literals: 7
Clause #157 W:(10 -3) NOT x2 AND NOT x39 AND NOT x86 AND NOT x131 AND NOT x194 AND NOT x235
Number of literals: 6
Clause #158 W:(-4 17) NOT x91 AND NOT x125 AND NOT x230 AND NOT x249
Number of literals: 4
Clause #159 W:(-3 2) NOT x3 AND NOT x72
Number of literals: 2
Clause #160 W:(-1 18) NOT x29 AND NOT x83 AND NOT x213
Number of literals: 3
Clause #161 W:(9 -5) x141 AND x203 AND NOT x28 AND NOT x47 AND NOT x193 AND NOT x233
Number of literals: 6
Clause #162 W:(-1 11) NOT x42 AND NOT x64 AND NOT x85 AND NOT x105 AND NOT x232
Number of literals: 5
Clause #163 W:(0 11) NOT x27 AND NOT x44 AND NOT x50 AND NOT x62 AND NOT x68 AND NOT x180 AND NOT x189 AND NOT x225
Number of literals: 8
Clause #164 W:(11 -9) NOT x4 AND NOT x7 AND NOT x34 AND NOT x82 AND NOT x170 AND NOT x233
Number of literals: 6
Clause #165 W:(-13 -13) NOT x104 AND NOT x168 AND NOT x176 AND NOT x236
Number of literals: 4
Clause #166 W:(-2 0) NOT x210 AND NOT x215
Number of literals: 2
Clause #167 W:(9 -3) NOT x134 AND NOT x144 AND NOT x162 AND NOT x164 AND NOT x179
Number of literals: 5
Clause #168 W:(-22 -14) NOT x42 AND NOT x89 AND NOT x109 AND NOT x112 AND NOT x197
Number of literals: 5
Clause #169 W:(1 8) NOT x2 AND NOT x105 AND NOT x127 AND NOT x149 AND NOT x223 AND NOT x234
Number of literals: 6
Clause #170 W:(11 0) NOT x20 AND NOT x49 AND NOT x82 AND NOT x146 AND NOT x189 AND NOT x191 AND NOT x215
Number of literals: 7
Clause #171 W:(-2 -1) NOT x8 AND NOT x83
Number of literals: 2
Clause #172 W:(-11 12) NOT x39 AND NOT x64 AND NOT x143 AND NOT x188 AND NOT x207
Number of literals: 5
Clause #173 W:(13 1) x231 AND NOT x42 AND NOT x45 AND NOT x97 AND NOT x110 AND NOT x162 AND NOT x169 AND NOT x212 AND NOT x215 AND NOT x216
Number of literals: 10
Clause #174 W:(-4 -12) NOT x20 AND NOT x35 AND NOT x148 AND NOT x151 AND NOT x159 AND NOT x167 AND NOT x209 AND NOT x219 AND NOT x230
Number of literals: 9
Clause #175 W:(1 25) NOT x0
Number of literals: 1
Clause #176 W:(25 12) NOT x25 AND NOT x27 AND NOT x49 AND NOT x96 AND NOT x114 AND NOT x141 AND NOT x213 AND NOT x230 AND NOT x246 AND NOT x252
Number of literals: 10
Clause #177 W:(-6 -5) NOT x1 AND NOT x6 AND NOT x26 AND NOT x92 AND NOT x129 AND NOT x160 AND NOT x161 AND NOT x178 AND NOT x189 AND NOT x230
Number of literals: 10
Clause #178 W:(3 13) NOT x94 AND NOT x131 AND NOT x186 AND NOT x250
Number of literals: 4
Clause #179 W:(-20 -14) NOT x46 AND NOT x55 AND NOT x76 AND NOT x112 AND NOT x149
Number of literals: 5
Clause #180 W:(-9 -6) NOT x2 AND NOT x11 AND NOT x108 AND NOT x128 AND NOT x169 AND NOT x207 AND NOT x215 AND NOT x221 AND NOT x245
Number of literals: 9
Clause #181 W:(-11 -2) NOT x41 AND NOT x112 AND NOT x226 AND NOT x238 AND NOT x244
Number of literals: 5
Clause #182 W:(10 -32) x32 AND x102 AND x203 AND NOT x5 AND NOT x19 AND NOT x69 AND NOT x124 AND NOT x128 AND NOT x171 AND NOT x239
Number of literals: 10
Clause #183 W:(0 -5) NOT x30 AND NOT x56 AND NOT x88 AND NOT x145 AND NOT x154 AND NOT x216
Number of literals: 6
Clause #184 W:(-7 -4) NOT x3 AND NOT x18 AND NOT x46 AND NOT x108 AND NOT x119 AND NOT x163 AND NOT x191 AND NOT x215 AND NOT x242
Number of literals: 9
Clause #185 W:(23 -6) x189 AND NOT x7 AND NOT x42 AND NOT x69 AND NOT x99 AND NOT x109 AND NOT x141 AND NOT x196
Number of literals: 8
Clause #186 W:(1 6) x189 AND NOT x28 AND NOT x123 AND NOT x146 AND NOT x153 AND NOT x222 AND NOT x227
Number of literals: 7
Clause #187 W:(9 4) NOT x72 AND NOT x82 AND NOT x83 AND NOT x142 AND NOT x226
Number of literals: 5
Clause #188 W:(8 4) NOT x29 AND NOT x41 AND NOT x118 AND NOT x137 AND NOT x139 AND NOT x147 AND NOT x175 AND NOT x177 AND NOT x205 AND NOT x248
Number of literals: 10
Clause #189 W:(12 -1) x203 AND NOT x5 AND NOT x56 AND NOT x61 AND NOT x136 AND NOT x143 AND NOT x182 AND NOT x225 AND NOT x231
Number of literals: 9
Clause #190 W:(-6 -16) NOT x36 AND NOT x98 AND NOT x195 AND NOT x255
Number of literals: 4
Clause #191 W:(-13 15) NOT x24 AND NOT x30 AND NOT x35 AND NOT x91 AND NOT x114 AND NOT x153 AND NOT x239
Number of literals: 7
Clause #192 W:(-2 -7) NOT x6 AND NOT x49 AND NOT x69 AND NOT x100 AND NOT x113 AND NOT x147 AND NOT x149 AND NOT x202
Number of literals: 8
Clause #193 W:(2 3) NOT x10 AND NOT x31 AND NOT x41 AND NOT x58 AND NOT x160 AND NOT x216 AND NOT x237 AND NOT x243
Number of literals: 8
Clause #194 W:(5 -6) NOT x5 AND NOT x103 AND NOT x143 AND NOT x153 AND NOT x205 AND NOT x209 AND NOT x247
Number of literals: 7
Clause #195 W:(-27 -7) NOT x28 AND NOT x63 AND NOT x118 AND NOT x126 AND NOT x234
Number of literals: 5
Clause #196 W:(-11 -22) NOT x27 AND NOT x58 AND NOT x128 AND NOT x131 AND NOT x150 AND NOT x158 AND NOT x223
Number of literals: 7
Clause #197 W:(4 -7) 
Number of literals: 0
Clause #198 W:(20 18) NOT x6 AND NOT x56 AND NOT x71 AND NOT x94 AND NOT x104 AND NOT x148 AND NOT x200 AND NOT x208 AND NOT x227
Number of literals: 9
Clause #199 W:(-41 -12) NOT x19 AND NOT x91 AND NOT x115 AND NOT x148
Number of literals: 4
results: Results(training_time_s=2005.8838634490967, inference_time_s=0.6549637317657471, memory_usage_mb=533.20703125, accuracy=0.529, precision=0.279841, recall=0.529, f1_score=0.36604447351209946)
confusion matrix: [[0, 471], [0, 529]]
reporting runs/2024-12-18T22:05:29/results.toml
reporting runs/2024-12-18T22:05:29/confusion_matrix.csv
reporting runs/2024-12-18T22:05:29/weights.csv
