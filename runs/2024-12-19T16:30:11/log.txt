creating new run in runs/2024-12-19T16:30:11
reporting parameters in runs/2024-12-19T16:30:11/params.toml, values:
{'epochs': 150, 'number_of_clauses': 500, 't': 400, 's': 1.2421047701122085, 'depth': 7, 'hypervector_size': 512, 'hypervector_bits': 1, 'message_size': 1024, 'message_bits': 1, 'double_hashing': False, 'max_included_literals': 16}
loading dataset from /home/ask/skole-learning-systems/attempt1/data/3x3_medium.csv
hashing dataset
saving dataset report to runs/2024-12-19T16:30:11/dataset.toml, content:
{'filename': '/home/ask/skole-learning-systems/attempt1/data/3x3_medium.csv', 'hash-blake2b': 'e9bf73e53fde757aee03a9898821212a0b3ffc12b8ac80471fda9e14e5c6d7ecd20c3cf42daf290055e4d53e56700ff350d4ae6970c2f5d38736556be10fa3de', 'dimensions': 3, 'rows': 10000}
X_train shape: (9000,)
X_test shape: (1000,)
Creating training data
bytecode dump:
>          0	NOP(arg=None, lineno=72)
           2	RESUME(arg=0, lineno=72)
           4	LOAD_GLOBAL(arg=1, lineno=75)
          14	LOAD_FAST(arg=1, lineno=75)
          16	LOAD_ATTR(arg=2, lineno=75)
          36	LOAD_CONST(arg=1, lineno=75)
          38	BINARY_SUBSCR(arg=None, lineno=75)
          42	CALL(arg=1, lineno=75)
          50	GET_ITER(arg=None, lineno=75)
>         52	FOR_ITER(arg=50, lineno=75)
          56	STORE_FAST(arg=2, lineno=75)
          58	LOAD_GLOBAL(arg=1, lineno=76)
          68	LOAD_FAST(arg=0, lineno=76)
          70	LOAD_FAST(arg=0, lineno=76)
          72	LOAD_CONST(arg=2, lineno=76)
          74	BINARY_OP(arg=5, lineno=76)
          78	CALL(arg=2, lineno=76)
          86	GET_ITER(arg=None, lineno=76)
>         88	FOR_ITER(arg=30, lineno=76)
          92	STORE_FAST(arg=3, lineno=76)
          94	LOAD_FAST(arg=3, lineno=77)
          96	LOAD_CONST(arg=3, lineno=77)
          98	BINARY_OP(arg=2, lineno=77)
         102	STORE_FAST(arg=4, lineno=77)
         104	LOAD_FAST(arg=3, lineno=78)
         106	LOAD_CONST(arg=3, lineno=78)
         108	BINARY_OP(arg=6, lineno=78)
         112	STORE_FAST(arg=5, lineno=78)
         114	LOAD_FAST(arg=1, lineno=79)
         116	LOAD_FAST(arg=2, lineno=79)
         118	LOAD_FAST(arg=4, lineno=79)
         120	BUILD_TUPLE(arg=2, lineno=79)
         122	COPY(arg=2, lineno=79)
         124	COPY(arg=2, lineno=79)
         126	BINARY_SUBSCR(arg=None, lineno=79)
         130	LOAD_CONST(arg=4, lineno=79)
         132	LOAD_FAST(arg=5, lineno=79)
         134	BINARY_OP(arg=3, lineno=79)
         138	BINARY_OP(arg=20, lineno=79)
         142	SWAP(arg=3, lineno=79)
         144	SWAP(arg=2, lineno=79)
         146	STORE_SUBSCR(arg=None, lineno=79)
         150	JUMP_BACKWARD(arg=32, lineno=79)
>        152	END_FOR(arg=None, lineno=76)
         154	JUMP_BACKWARD(arg=52, lineno=76)
>        156	END_FOR(arg=None, lineno=75)
         158	RETURN_CONST(arg=0, lineno=75)
pending: deque([State(pc_initial=0 nstack_initial=0)])
stack: []
state.pc_initial: State(pc_initial=0 nstack_initial=0)
dispatch pc=0, inst=NOP(arg=None, lineno=72)
stack []
dispatch pc=2, inst=RESUME(arg=0, lineno=72)
stack []
dispatch pc=4, inst=LOAD_GLOBAL(arg=1, lineno=75)
stack []
dispatch pc=14, inst=LOAD_FAST(arg=1, lineno=75)
stack ['$null$4.1', '$4load_global.0']
dispatch pc=16, inst=LOAD_ATTR(arg=2, lineno=75)
stack ['$null$4.1', '$4load_global.0', '$X14.2']
dispatch pc=36, inst=LOAD_CONST(arg=1, lineno=75)
stack ['$null$4.1', '$4load_global.0', '$16load_attr.3']
dispatch pc=38, inst=BINARY_SUBSCR(arg=None, lineno=75)
stack ['$null$4.1', '$4load_global.0', '$16load_attr.3', '$const36.4']
dispatch pc=42, inst=CALL(arg=1, lineno=75)
stack ['$null$4.1', '$4load_global.0', '$38binary_subscr.5']
dispatch pc=50, inst=GET_ITER(arg=None, lineno=75)
stack ['$42call.6']
end state. edges=[Edge(pc=52, stack=('$50get_iter.7',), blockstack=(), npush=0)]
pending: deque([State(pc_initial=52 nstack_initial=1)])
stack: ['$phi52.0']
state.pc_initial: State(pc_initial=52 nstack_initial=1)
dispatch pc=52, inst=FOR_ITER(arg=50, lineno=75)
stack ['$phi52.0']
end state. edges=[Edge(pc=156, stack=('$phi52.0', '$52for_iter.2'), blockstack=(), npush=0), Edge(pc=56, stack=('$phi52.0', '$52for_iter.2'), blockstack=(), npush=0)]
pending: deque([State(pc_initial=156 nstack_initial=2), State(pc_initial=56 nstack_initial=2)])
stack: ['$phi156.0', '$phi156.1']
state.pc_initial: State(pc_initial=156 nstack_initial=2)
dispatch pc=156, inst=END_FOR(arg=None, lineno=75)
stack ['$phi156.0', '$phi156.1']
dispatch pc=158, inst=RETURN_CONST(arg=0, lineno=75)
stack []
end state. edges=[]
pending: deque([State(pc_initial=56 nstack_initial=2)])
stack: ['$phi56.0', '$phi56.1']
state.pc_initial: State(pc_initial=56 nstack_initial=2)
dispatch pc=56, inst=STORE_FAST(arg=2, lineno=75)
stack ['$phi56.0', '$phi56.1']
dispatch pc=58, inst=LOAD_GLOBAL(arg=1, lineno=76)
stack ['$phi56.0']
dispatch pc=68, inst=LOAD_FAST(arg=0, lineno=76)
stack ['$phi56.0', '$null$58.3', '$58load_global.2']
dispatch pc=70, inst=LOAD_FAST(arg=0, lineno=76)
stack ['$phi56.0', '$null$58.3', '$58load_global.2', '$hypervector_size68.4']
dispatch pc=72, inst=LOAD_CONST(arg=2, lineno=76)
stack ['$phi56.0', '$null$58.3', '$58load_global.2', '$hypervector_size68.4', '$hypervector_size70.5']
dispatch pc=74, inst=BINARY_OP(arg=5, lineno=76)
stack ['$phi56.0', '$null$58.3', '$58load_global.2', '$hypervector_size68.4', '$hypervector_size70.5', '$const72.6']
dispatch pc=78, inst=CALL(arg=2, lineno=76)
stack ['$phi56.0', '$null$58.3', '$58load_global.2', '$hypervector_size68.4', '$binop_mul74.7']
dispatch pc=86, inst=GET_ITER(arg=None, lineno=76)
stack ['$phi56.0', '$78call.8']
end state. edges=[Edge(pc=88, stack=('$phi56.0', '$86get_iter.9'), blockstack=(), npush=0)]
pending: deque([State(pc_initial=88 nstack_initial=2)])
stack: ['$phi88.0', '$phi88.1']
state.pc_initial: State(pc_initial=88 nstack_initial=2)
dispatch pc=88, inst=FOR_ITER(arg=30, lineno=76)
stack ['$phi88.0', '$phi88.1']
end state. edges=[Edge(pc=152, stack=('$phi88.0', '$phi88.1', '$88for_iter.3'), blockstack=(), npush=0), Edge(pc=92, stack=('$phi88.0', '$phi88.1', '$88for_iter.3'), blockstack=(), npush=0)]
pending: deque([State(pc_initial=152 nstack_initial=3), State(pc_initial=92 nstack_initial=3)])
stack: ['$phi152.0', '$phi152.1', '$phi152.2']
state.pc_initial: State(pc_initial=152 nstack_initial=3)
dispatch pc=152, inst=END_FOR(arg=None, lineno=76)
stack ['$phi152.0', '$phi152.1', '$phi152.2']
dispatch pc=154, inst=JUMP_BACKWARD(arg=52, lineno=76)
stack ['$phi152.0']
end state. edges=[Edge(pc=52, stack=('$phi152.0',), blockstack=(), npush=0)]
pending: deque([State(pc_initial=92 nstack_initial=3), State(pc_initial=52 nstack_initial=1)])
stack: ['$phi92.0', '$phi92.1', '$phi92.2']
state.pc_initial: State(pc_initial=92 nstack_initial=3)
dispatch pc=92, inst=STORE_FAST(arg=3, lineno=76)
stack ['$phi92.0', '$phi92.1', '$phi92.2']
dispatch pc=94, inst=LOAD_FAST(arg=3, lineno=77)
stack ['$phi92.0', '$phi92.1']
dispatch pc=96, inst=LOAD_CONST(arg=3, lineno=77)
stack ['$phi92.0', '$phi92.1', '$k94.3']
dispatch pc=98, inst=BINARY_OP(arg=2, lineno=77)
stack ['$phi92.0', '$phi92.1', '$k94.3', '$const96.4']
dispatch pc=102, inst=STORE_FAST(arg=4, lineno=77)
stack ['$phi92.0', '$phi92.1', '$binop_floordiv98.5']
dispatch pc=104, inst=LOAD_FAST(arg=3, lineno=78)
stack ['$phi92.0', '$phi92.1']
dispatch pc=106, inst=LOAD_CONST(arg=3, lineno=78)
stack ['$phi92.0', '$phi92.1', '$k104.6']
dispatch pc=108, inst=BINARY_OP(arg=6, lineno=78)
stack ['$phi92.0', '$phi92.1', '$k104.6', '$const106.7']
dispatch pc=112, inst=STORE_FAST(arg=5, lineno=78)
stack ['$phi92.0', '$phi92.1', '$binop_mod108.8']
dispatch pc=114, inst=LOAD_FAST(arg=1, lineno=79)
stack ['$phi92.0', '$phi92.1']
dispatch pc=116, inst=LOAD_FAST(arg=2, lineno=79)
stack ['$phi92.0', '$phi92.1', '$X114.9']
dispatch pc=118, inst=LOAD_FAST(arg=4, lineno=79)
stack ['$phi92.0', '$phi92.1', '$X114.9', '$i116.10']
dispatch pc=120, inst=BUILD_TUPLE(arg=2, lineno=79)
stack ['$phi92.0', '$phi92.1', '$X114.9', '$i116.10', '$chunk118.11']
dispatch pc=122, inst=COPY(arg=2, lineno=79)
stack ['$phi92.0', '$phi92.1', '$X114.9', '$120build_tuple.12']
dispatch pc=124, inst=COPY(arg=2, lineno=79)
stack ['$phi92.0', '$phi92.1', '$X114.9', '$120build_tuple.12', '$X114.9']
dispatch pc=126, inst=BINARY_SUBSCR(arg=None, lineno=79)
stack ['$phi92.0', '$phi92.1', '$X114.9', '$120build_tuple.12', '$X114.9', '$120build_tuple.12']
dispatch pc=130, inst=LOAD_CONST(arg=4, lineno=79)
stack ['$phi92.0', '$phi92.1', '$X114.9', '$120build_tuple.12', '$126binary_subscr.13']
dispatch pc=132, inst=LOAD_FAST(arg=5, lineno=79)
stack ['$phi92.0', '$phi92.1', '$X114.9', '$120build_tuple.12', '$126binary_subscr.13', '$const130.14']
dispatch pc=134, inst=BINARY_OP(arg=3, lineno=79)
stack ['$phi92.0', '$phi92.1', '$X114.9', '$120build_tuple.12', '$126binary_subscr.13', '$const130.14', '$pos132.15']
dispatch pc=138, inst=BINARY_OP(arg=20, lineno=79)
stack ['$phi92.0', '$phi92.1', '$X114.9', '$120build_tuple.12', '$126binary_subscr.13', '$binop_lshift134.16']
dispatch pc=142, inst=SWAP(arg=3, lineno=79)
stack ['$phi92.0', '$phi92.1', '$X114.9', '$120build_tuple.12', '$binop_ior138.17']
dispatch pc=144, inst=SWAP(arg=2, lineno=79)
stack ['$phi92.0', '$phi92.1', '$binop_ior138.17', '$120build_tuple.12', '$X114.9']
dispatch pc=146, inst=STORE_SUBSCR(arg=None, lineno=79)
stack ['$phi92.0', '$phi92.1', '$binop_ior138.17', '$X114.9', '$120build_tuple.12']
dispatch pc=150, inst=JUMP_BACKWARD(arg=32, lineno=79)
stack ['$phi92.0', '$phi92.1']
end state. edges=[Edge(pc=88, stack=('$phi92.0', '$phi92.1'), blockstack=(), npush=0)]
pending: deque([State(pc_initial=52 nstack_initial=1), State(pc_initial=88 nstack_initial=2)])
pending: deque([State(pc_initial=88 nstack_initial=2)])
-------------------------Prune PHIs-------------------------
Used_phis: defaultdict(<class 'set'>,
            {State(pc_initial=0 nstack_initial=0): set(),
             State(pc_initial=52 nstack_initial=1): {'$phi52.0'},
             State(pc_initial=56 nstack_initial=2): {'$phi56.1'},
             State(pc_initial=88 nstack_initial=2): {'$phi88.1'},
             State(pc_initial=92 nstack_initial=3): {'$phi92.2'},
             State(pc_initial=152 nstack_initial=3): set(),
             State(pc_initial=156 nstack_initial=2): set()})
defmap: {'$phi152.2': State(pc_initial=88 nstack_initial=2),
 '$phi156.1': State(pc_initial=52 nstack_initial=1),
 '$phi52.0': State(pc_initial=0 nstack_initial=0),
 '$phi56.1': State(pc_initial=52 nstack_initial=1),
 '$phi88.1': State(pc_initial=56 nstack_initial=2),
 '$phi92.2': State(pc_initial=88 nstack_initial=2)}
phismap: defaultdict(<class 'set'>,
            {'$phi152.0': {('$phi88.0', State(pc_initial=88 nstack_initial=2))},
             '$phi152.1': {('$phi88.1', State(pc_initial=88 nstack_initial=2))},
             '$phi152.2': {('$88for_iter.3',
                            State(pc_initial=88 nstack_initial=2))},
             '$phi156.0': {('$phi52.0', State(pc_initial=52 nstack_initial=1))},
             '$phi156.1': {('$52for_iter.2',
                            State(pc_initial=52 nstack_initial=1))},
             '$phi52.0': {('$50get_iter.7',
                           State(pc_initial=0 nstack_initial=0)),
                          ('$phi152.0',
                           State(pc_initial=152 nstack_initial=3))},
             '$phi56.0': {('$phi52.0', State(pc_initial=52 nstack_initial=1))},
             '$phi56.1': {('$52for_iter.2',
                           State(pc_initial=52 nstack_initial=1))},
             '$phi88.0': {('$phi56.0', State(pc_initial=56 nstack_initial=2)),
                          ('$phi92.0', State(pc_initial=92 nstack_initial=3))},
             '$phi88.1': {('$86get_iter.9',
                           State(pc_initial=56 nstack_initial=2)),
                          ('$phi92.1', State(pc_initial=92 nstack_initial=3))},
             '$phi92.0': {('$phi88.0', State(pc_initial=88 nstack_initial=2))},
             '$phi92.1': {('$phi88.1', State(pc_initial=88 nstack_initial=2))},
             '$phi92.2': {('$88for_iter.3',
                           State(pc_initial=88 nstack_initial=2))}})
changing phismap: defaultdict(<class 'set'>,
            {'$phi152.0': {('$phi56.0', State(pc_initial=56 nstack_initial=2)),
                           ('$phi92.0', State(pc_initial=92 nstack_initial=3))},
             '$phi152.1': {('$86get_iter.9',
                            State(pc_initial=56 nstack_initial=2)),
                           ('$phi92.1', State(pc_initial=92 nstack_initial=3))},
             '$phi152.2': {('$88for_iter.3',
                            State(pc_initial=88 nstack_initial=2))},
             '$phi156.0': {('$50get_iter.7',
                            State(pc_initial=0 nstack_initial=0)),
                           ('$phi152.0',
                            State(pc_initial=152 nstack_initial=3))},
             '$phi156.1': {('$52for_iter.2',
                            State(pc_initial=52 nstack_initial=1))},
             '$phi52.0': {('$50get_iter.7',
                           State(pc_initial=0 nstack_initial=0)),
                          ('$phi56.0', State(pc_initial=56 nstack_initial=2)),
                          ('$phi92.0', State(pc_initial=92 nstack_initial=3))},
             '$phi56.0': {('$50get_iter.7',
                           State(pc_initial=0 nstack_initial=0)),
                          ('$phi56.0', State(pc_initial=56 nstack_initial=2)),
                          ('$phi92.0', State(pc_initial=92 nstack_initial=3))},
             '$phi56.1': {('$52for_iter.2',
                           State(pc_initial=52 nstack_initial=1))},
             '$phi88.0': {('$50get_iter.7',
                           State(pc_initial=0 nstack_initial=0)),
                          ('$phi88.0', State(pc_initial=88 nstack_initial=2))},
             '$phi88.1': {('$86get_iter.9',
                           State(pc_initial=56 nstack_initial=2)),
                          ('$phi88.1', State(pc_initial=88 nstack_initial=2))},
             '$phi92.0': {('$50get_iter.7',
                           State(pc_initial=0 nstack_initial=0))},
             '$phi92.1': {('$86get_iter.9',
                           State(pc_initial=56 nstack_initial=2))},
             '$phi92.2': {('$88for_iter.3',
                           State(pc_initial=88 nstack_initial=2))}})
changing phismap: defaultdict(<class 'set'>,
            {'$phi152.0': {('$50get_iter.7',
                            State(pc_initial=0 nstack_initial=0))},
             '$phi152.1': {('$86get_iter.9',
                            State(pc_initial=56 nstack_initial=2))},
             '$phi152.2': {('$88for_iter.3',
                            State(pc_initial=88 nstack_initial=2))},
             '$phi156.0': {('$50get_iter.7',
                            State(pc_initial=0 nstack_initial=0))},
             '$phi156.1': {('$52for_iter.2',
                            State(pc_initial=52 nstack_initial=1))},
             '$phi52.0': {('$50get_iter.7',
                           State(pc_initial=0 nstack_initial=0))},
             '$phi56.0': {('$50get_iter.7',
                           State(pc_initial=0 nstack_initial=0))},
             '$phi56.1': {('$52for_iter.2',
                           State(pc_initial=52 nstack_initial=1))},
             '$phi88.0': {('$50get_iter.7',
                           State(pc_initial=0 nstack_initial=0))},
             '$phi88.1': {('$86get_iter.9',
                           State(pc_initial=56 nstack_initial=2))},
             '$phi92.0': {('$50get_iter.7',
                           State(pc_initial=0 nstack_initial=0))},
             '$phi92.1': {('$86get_iter.9',
                           State(pc_initial=56 nstack_initial=2))},
             '$phi92.2': {('$88for_iter.3',
                           State(pc_initial=88 nstack_initial=2))}})
changing phismap: defaultdict(<class 'set'>,
            {'$phi152.0': {('$50get_iter.7',
                            State(pc_initial=0 nstack_initial=0))},
             '$phi152.1': {('$86get_iter.9',
                            State(pc_initial=56 nstack_initial=2))},
             '$phi152.2': {('$88for_iter.3',
                            State(pc_initial=88 nstack_initial=2))},
             '$phi156.0': {('$50get_iter.7',
                            State(pc_initial=0 nstack_initial=0))},
             '$phi156.1': {('$52for_iter.2',
                            State(pc_initial=52 nstack_initial=1))},
             '$phi52.0': {('$50get_iter.7',
                           State(pc_initial=0 nstack_initial=0))},
             '$phi56.0': {('$50get_iter.7',
                           State(pc_initial=0 nstack_initial=0))},
             '$phi56.1': {('$52for_iter.2',
                           State(pc_initial=52 nstack_initial=1))},
             '$phi88.0': {('$50get_iter.7',
                           State(pc_initial=0 nstack_initial=0))},
             '$phi88.1': {('$86get_iter.9',
                           State(pc_initial=56 nstack_initial=2))},
             '$phi92.0': {('$50get_iter.7',
                           State(pc_initial=0 nstack_initial=0))},
             '$phi92.1': {('$86get_iter.9',
                           State(pc_initial=56 nstack_initial=2))},
             '$phi92.2': {('$88for_iter.3',
                           State(pc_initial=88 nstack_initial=2))}})
keep phismap: {'$phi52.0': {('$50get_iter.7', State(pc_initial=0 nstack_initial=0))},
 '$phi56.1': {('$52for_iter.2', State(pc_initial=52 nstack_initial=1))},
 '$phi88.1': {('$86get_iter.9', State(pc_initial=56 nstack_initial=2))},
 '$phi92.2': {('$88for_iter.3', State(pc_initial=88 nstack_initial=2))}}
new_out: defaultdict(<class 'dict'>,
            {State(pc_initial=0 nstack_initial=0): {'$phi52.0': '$50get_iter.7'},
             State(pc_initial=52 nstack_initial=1): {'$phi56.1': '$52for_iter.2'},
             State(pc_initial=56 nstack_initial=2): {'$phi88.1': '$86get_iter.9'},
             State(pc_initial=88 nstack_initial=2): {'$phi92.2': '$88for_iter.3'}})
----------------------DONE Prune PHIs-----------------------
block_infos State(pc_initial=0 nstack_initial=0):
AdaptBlockInfo(insts=((0, {}), (2, {}), (4, {'idx': 0, 'res': '$4load_global.0'}), (14, {'res': '$X14.2'}), (16, {'item': '$X14.2', 'res': '$16load_attr.3'}), (36, {'res': '$const36.4'}), (38, {'index': '$const36.4', 'target': '$16load_attr.3', 'res': '$38binary_subscr.5'}), (42, {'func': '$4load_global.0', 'args': ['$38binary_subscr.5'], 'kw_names': None, 'res': '$42call.6'}), (50, {'value': '$42call.6', 'res': '$50get_iter.7'})), outgoing_phis={'$phi52.0': '$50get_iter.7'}, blockstack=(), active_try_block=None, outgoing_edgepushed={52: ('$50get_iter.7',)})
block_infos State(pc_initial=52 nstack_initial=1):
AdaptBlockInfo(insts=((52, {'iterator': '$phi52.0', 'pair': '$52for_iter.1', 'indval': '$52for_iter.2', 'pred': '$52for_iter.3'}),), outgoing_phis={'$phi56.1': '$52for_iter.2'}, blockstack=(), active_try_block=None, outgoing_edgepushed={156: ('$phi52.0', '$52for_iter.2'), 56: ('$phi52.0', '$52for_iter.2')})
block_infos State(pc_initial=56 nstack_initial=2):
AdaptBlockInfo(insts=((56, {'value': '$phi56.1'}), (58, {'idx': 0, 'res': '$58load_global.2'}), (68, {'res': '$hypervector_size68.4'}), (70, {'res': '$hypervector_size70.5'}), (72, {'res': '$const72.6'}), (74, {'op': '*', 'lhs': '$hypervector_size70.5', 'rhs': '$const72.6', 'res': '$binop_mul74.7'}), (78, {'func': '$58load_global.2', 'args': ['$hypervector_size68.4', '$binop_mul74.7'], 'kw_names': None, 'res': '$78call.8'}), (86, {'value': '$78call.8', 'res': '$86get_iter.9'})), outgoing_phis={'$phi88.1': '$86get_iter.9'}, blockstack=(), active_try_block=None, outgoing_edgepushed={88: ('$phi56.0', '$86get_iter.9')})
block_infos State(pc_initial=88 nstack_initial=2):
AdaptBlockInfo(insts=((88, {'iterator': '$phi88.1', 'pair': '$88for_iter.2', 'indval': '$88for_iter.3', 'pred': '$88for_iter.4'}),), outgoing_phis={'$phi92.2': '$88for_iter.3'}, blockstack=(), active_try_block=None, outgoing_edgepushed={152: ('$phi88.0', '$phi88.1', '$88for_iter.3'), 92: ('$phi88.0', '$phi88.1', '$88for_iter.3')})
block_infos State(pc_initial=92 nstack_initial=3):
AdaptBlockInfo(insts=((92, {'value': '$phi92.2'}), (94, {'res': '$k94.3'}), (96, {'res': '$const96.4'}), (98, {'op': '//', 'lhs': '$k94.3', 'rhs': '$const96.4', 'res': '$binop_floordiv98.5'}), (102, {'value': '$binop_floordiv98.5'}), (104, {'res': '$k104.6'}), (106, {'res': '$const106.7'}), (108, {'op': '%', 'lhs': '$k104.6', 'rhs': '$const106.7', 'res': '$binop_mod108.8'}), (112, {'value': '$binop_mod108.8'}), (114, {'res': '$X114.9'}), (116, {'res': '$i116.10'}), (118, {'res': '$chunk118.11'}), (120, {'items': ['$i116.10', '$chunk118.11'], 'res': '$120build_tuple.12'}), (126, {'index': '$120build_tuple.12', 'target': '$X114.9', 'res': '$126binary_subscr.13'}), (130, {'res': '$const130.14'}), (132, {'res': '$pos132.15'}), (134, {'op': '<<', 'lhs': '$const130.14', 'rhs': '$pos132.15', 'res': '$binop_lshift134.16'}), (138, {'op': '|=', 'lhs': '$126binary_subscr.13', 'rhs': '$binop_lshift134.16', 'res': '$binop_ior138.17'}), (146, {'target': '$X114.9', 'index': '$120build_tuple.12', 'value': '$binop_ior138.17'}), (150, {})), outgoing_phis={}, blockstack=(), active_try_block=None, outgoing_edgepushed={88: ('$phi92.0', '$phi92.1')})
block_infos State(pc_initial=152 nstack_initial=3):
AdaptBlockInfo(insts=((154, {}),), outgoing_phis={}, blockstack=(), active_try_block=None, outgoing_edgepushed={52: ('$phi152.0',)})
block_infos State(pc_initial=156 nstack_initial=2):
AdaptBlockInfo(insts=((158, {'retval': '$const158.2', 'castval': '$158return_const.3'}),), outgoing_phis={}, blockstack=(), active_try_block=None, outgoing_edgepushed={})
label 0:
    hypervector_size = arg(0, name=hypervector_size) ['hypervector_size']
    X = arg(1, name=X)                       ['X']
    $4load_global.0 = global(range: <class 'range'>) ['$4load_global.0']
    $16load_attr.3 = getattr(value=X, attr=shape) ['$16load_attr.3', 'X']
    $const36.4 = const(int, 0)               ['$const36.4']
    $38binary_subscr.5 = getitem(value=$16load_attr.3, index=$const36.4, fn=<built-in function getitem>) ['$16load_attr.3', '$38binary_subscr.5', '$const36.4']
    $42call.6 = call $4load_global.0($38binary_subscr.5, func=$4load_global.0, args=[Var($38binary_subscr.5, graphs.py:75)], kws=(), vararg=None, varkwarg=None, target=None) ['$38binary_subscr.5', '$42call.6', '$4load_global.0']
    $50get_iter.7 = getiter(value=$42call.6) ['$42call.6', '$50get_iter.7']
    $phi52.0 = $50get_iter.7                 ['$50get_iter.7', '$phi52.0']
    jump 52                                  []
label 52:
    $52for_iter.1 = iternext(value=$phi52.0) ['$52for_iter.1', '$phi52.0']
    $52for_iter.2 = pair_first(value=$52for_iter.1) ['$52for_iter.1', '$52for_iter.2']
    $52for_iter.3 = pair_second(value=$52for_iter.1) ['$52for_iter.1', '$52for_iter.3']
    $phi56.1 = $52for_iter.2                 ['$52for_iter.2', '$phi56.1']
    branch $52for_iter.3, 56, 156            ['$52for_iter.3']
label 56:
    i = $phi56.1                             ['$phi56.1', 'i']
    $58load_global.2 = global(range: <class 'range'>) ['$58load_global.2']
    $const72.6 = const(int, 2)               ['$const72.6']
    $binop_mul74.7 = hypervector_size * $const72.6 ['$binop_mul74.7', '$const72.6', 'hypervector_size']
    $78call.8 = call $58load_global.2(hypervector_size, $binop_mul74.7, func=$58load_global.2, args=[Var(hypervector_size, graphs.py:72), Var($binop_mul74.7, graphs.py:76)], kws=(), vararg=None, varkwarg=None, target=None) ['$58load_global.2', '$78call.8', '$binop_mul74.7', 'hypervector_size']
    $86get_iter.9 = getiter(value=$78call.8) ['$78call.8', '$86get_iter.9']
    $phi88.1 = $86get_iter.9                 ['$86get_iter.9', '$phi88.1']
    jump 88                                  []
label 88:
    $88for_iter.2 = iternext(value=$phi88.1) ['$88for_iter.2', '$phi88.1']
    $88for_iter.3 = pair_first(value=$88for_iter.2) ['$88for_iter.2', '$88for_iter.3']
    $88for_iter.4 = pair_second(value=$88for_iter.2) ['$88for_iter.2', '$88for_iter.4']
    $phi92.2 = $88for_iter.3                 ['$88for_iter.3', '$phi92.2']
    branch $88for_iter.4, 92, 152            ['$88for_iter.4']
label 92:
    k = $phi92.2                             ['$phi92.2', 'k']
    $const96.4 = const(int, 32)              ['$const96.4']
    chunk = k // $const96.4                  ['$const96.4', 'chunk', 'k']
    $const106.7 = const(int, 32)             ['$const106.7']
    pos = k % $const106.7                    ['$const106.7', 'k', 'pos']
    $120build_tuple.12 = build_tuple(items=[Var(i, graphs.py:75), Var(chunk, graphs.py:77)]) ['$120build_tuple.12', 'chunk', 'i']
    $126binary_subscr.13 = getitem(value=X, index=$120build_tuple.12, fn=<built-in function getitem>) ['$120build_tuple.12', '$126binary_subscr.13', 'X']
    $const130.14 = const(int, 1)             ['$const130.14']
    $binop_lshift134.16 = $const130.14 << pos ['$binop_lshift134.16', '$const130.14', 'pos']
    $binop_ior138.17 = inplace_binop(fn=<built-in function ior>, immutable_fn=<built-in function or_>, lhs=$126binary_subscr.13, rhs=$binop_lshift134.16, static_lhs=Undefined, static_rhs=Undefined) ['$126binary_subscr.13', '$binop_ior138.17', '$binop_lshift134.16']
    X[$120build_tuple.12] = $binop_ior138.17 ['$120build_tuple.12', '$binop_ior138.17', 'X']
    jump 88                                  []
label 152:
    jump 52                                  []
label 156:
    $const158.2 = const(NoneType, None)      ['$const158.2']
    $158return_const.3 = cast(value=$const158.2) ['$158return_const.3', '$const158.2']
    return $158return_const.3                ['$158return_const.3']

==== SSA block analysis pass on 0
Running <numba.core.ssa._GatherDefsHandler object at 0x7dc527f33d10>
on stmt: hypervector_size = arg(0, name=hypervector_size)
on stmt: X = arg(1, name=X)
on stmt: $4load_global.0 = global(range: <class 'range'>)
on stmt: $16load_attr.3 = getattr(value=X, attr=shape)
on stmt: $const36.4 = const(int, 0)
on stmt: $38binary_subscr.5 = static_getitem(value=$16load_attr.3, index=0, index_var=$const36.4, fn=<built-in function getitem>)
on stmt: $42call.6 = call $4load_global.0($38binary_subscr.5, func=$4load_global.0, args=[Var($38binary_subscr.5, graphs.py:75)], kws=(), vararg=None, varkwarg=None, target=None)
on stmt: $50get_iter.7 = getiter(value=$42call.6)
on stmt: $phi52.0 = $50get_iter.7
on stmt: jump 52
==== SSA block analysis pass on 52
Running <numba.core.ssa._GatherDefsHandler object at 0x7dc527f33d10>
on stmt: $52for_iter.1 = iternext(value=$phi52.0)
on stmt: $52for_iter.2 = pair_first(value=$52for_iter.1)
on stmt: $52for_iter.3 = pair_second(value=$52for_iter.1)
on stmt: $phi56.1 = $52for_iter.2
on stmt: branch $52for_iter.3, 56, 156
==== SSA block analysis pass on 56
Running <numba.core.ssa._GatherDefsHandler object at 0x7dc527f33d10>
on stmt: i = $phi56.1
on stmt: $58load_global.2 = global(range: <class 'range'>)
on stmt: $const72.6 = const(int, 2)
on stmt: $binop_mul74.7 = hypervector_size * $const72.6
on stmt: $78call.8 = call $58load_global.2(hypervector_size, $binop_mul74.7, func=$58load_global.2, args=[Var(hypervector_size, graphs.py:72), Var($binop_mul74.7, graphs.py:76)], kws=(), vararg=None, varkwarg=None, target=None)
on stmt: $86get_iter.9 = getiter(value=$78call.8)
on stmt: $phi88.1 = $86get_iter.9
on stmt: jump 88
==== SSA block analysis pass on 88
Running <numba.core.ssa._GatherDefsHandler object at 0x7dc527f33d10>
on stmt: $88for_iter.2 = iternext(value=$phi88.1)
on stmt: $88for_iter.3 = pair_first(value=$88for_iter.2)
on stmt: $88for_iter.4 = pair_second(value=$88for_iter.2)
on stmt: $phi92.2 = $88for_iter.3
on stmt: branch $88for_iter.4, 92, 152
==== SSA block analysis pass on 92
Running <numba.core.ssa._GatherDefsHandler object at 0x7dc527f33d10>
on stmt: k = $phi92.2
on stmt: $const96.4 = const(int, 32)
on stmt: chunk = k // $const96.4
on stmt: $const106.7 = const(int, 32)
on stmt: pos = k % $const106.7
on stmt: $120build_tuple.12 = build_tuple(items=[Var(i, graphs.py:75), Var(chunk, graphs.py:77)])
on stmt: $126binary_subscr.13 = getitem(value=X, index=$120build_tuple.12, fn=<built-in function getitem>)
on stmt: $const130.14 = const(int, 1)
on stmt: $binop_lshift134.16 = $const130.14 << pos
on stmt: $binop_ior138.17 = inplace_binop(fn=<built-in function ior>, immutable_fn=<built-in function or_>, lhs=$126binary_subscr.13, rhs=$binop_lshift134.16, static_lhs=Undefined, static_rhs=Undefined)
on stmt: X[$120build_tuple.12] = $binop_ior138.17
on stmt: jump 88
==== SSA block analysis pass on 152
Running <numba.core.ssa._GatherDefsHandler object at 0x7dc527f33d10>
on stmt: jump 52
==== SSA block analysis pass on 156
Running <numba.core.ssa._GatherDefsHandler object at 0x7dc527f33d10>
on stmt: $const158.2 = const(NoneType, None)
on stmt: $158return_const.3 = cast(value=$const158.2)
on stmt: return $158return_const.3
defs defaultdict(<class 'list'>,
            {'$120build_tuple.12': [(<numba.core.ir.Assign object at 0x7dc527f33d40>,
                                     92)],
             '$126binary_subscr.13': [(<numba.core.ir.Assign object at 0x7dc527f33e90>,
                                       92)],
             '$158return_const.3': [(<numba.core.ir.Assign object at 0x7dc527f580e0>,
                                     156)],
             '$16load_attr.3': [(<numba.core.ir.Assign object at 0x7dc527f31760>,
                                 0)],
             '$38binary_subscr.5': [(<numba.core.ir.Assign object at 0x7dc527f31ac0>,
                                     0)],
             '$42call.6': [(<numba.core.ir.Assign object at 0x7dc527f325d0>,
                            0)],
             '$4load_global.0': [(<numba.core.ir.Assign object at 0x7dc527f32390>,
                                  0)],
             '$50get_iter.7': [(<numba.core.ir.Assign object at 0x7dc527f32660>,
                                0)],
             '$52for_iter.1': [(<numba.core.ir.Assign object at 0x7dc527f32810>,
                                52)],
             '$52for_iter.2': [(<numba.core.ir.Assign object at 0x7dc527f328a0>,
                                52)],
             '$52for_iter.3': [(<numba.core.ir.Assign object at 0x7dc527f32930>,
                                52)],
             '$58load_global.2': [(<numba.core.ir.Assign object at 0x7dc527f32b40>,
                                   56)],
             '$78call.8': [(<numba.core.ir.Assign object at 0x7dc527f32f00>,
                            56)],
             '$86get_iter.9': [(<numba.core.ir.Assign object at 0x7dc527f32f90>,
                                56)],
             '$88for_iter.2': [(<numba.core.ir.Assign object at 0x7dc527f33110>,
                                88)],
             '$88for_iter.3': [(<numba.core.ir.Assign object at 0x7dc527f331d0>,
                                88)],
             '$88for_iter.4': [(<numba.core.ir.Assign object at 0x7dc527f332c0>,
                                88)],
             '$binop_ior138.17': [(<numba.core.ir.Assign object at 0x7dc527f58320>,
                                   92)],
             '$binop_lshift134.16': [(<numba.core.ir.Assign object at 0x7dc527f58200>,
                                      92)],
             '$binop_mul74.7': [(<numba.core.ir.Assign object at 0x7dc527f32e10>,
                                 56)],
             '$const106.7': [(<numba.core.ir.Assign object at 0x7dc527f33b00>,
                              92)],
             '$const130.14': [(<numba.core.ir.Assign object at 0x7dc527f33f80>,
                               92)],
             '$const158.2': [(<numba.core.ir.Assign object at 0x7dc527f31130>,
                              156)],
             '$const36.4': [(<numba.core.ir.Assign object at 0x7dc527f32450>,
                             0)],
             '$const72.6': [(<numba.core.ir.Assign object at 0x7dc527f32d20>,
                             56)],
             '$const96.4': [(<numba.core.ir.Assign object at 0x7dc527f336e0>,
                             92)],
             '$phi52.0': [(<numba.core.ir.Assign object at 0x7dc527f32270>, 0)],
             '$phi56.1': [(<numba.core.ir.Assign object at 0x7dc527f32780>,
                           52)],
             '$phi88.1': [(<numba.core.ir.Assign object at 0x7dc527f32c60>,
                           56)],
             '$phi92.2': [(<numba.core.ir.Assign object at 0x7dc527f33350>,
                           88)],
             'X': [(<numba.core.ir.Assign object at 0x7dc527f323f0>, 0)],
             'chunk': [(<numba.core.ir.Assign object at 0x7dc527f33830>, 92)],
             'hypervector_size': [(<numba.core.ir.Assign object at 0x7dc527f31340>,
                                   0)],
             'i': [(<numba.core.ir.Assign object at 0x7dc527f32a80>, 56)],
             'k': [(<numba.core.ir.Assign object at 0x7dc527f334d0>, 92)],
             'pos': [(<numba.core.ir.Assign object at 0x7dc527f33c50>, 92)]})
SSA violators <numba.core.utils.OrderedSet object at 0x7dc527f33d10>
bytecode dump:
>          0	NOP(arg=None, lineno=121)
           2	RESUME(arg=0, lineno=121)
           4	LOAD_FAST(arg=0, lineno=124)
           6	LOAD_FAST(arg=4, lineno=124)
           8	LOAD_CONST(arg=0, lineno=124)
          10	LOAD_CONST(arg=0, lineno=124)
          12	BUILD_SLICE(arg=2, lineno=124)
          14	BUILD_TUPLE(arg=2, lineno=124)
          16	BINARY_SUBSCR(arg=None, lineno=124)
          20	GET_ITER(arg=None, lineno=124)
>         22	FOR_ITER(arg=71, lineno=124)
          26	STORE_FAST(arg=6, lineno=124)
          28	LOAD_FAST(arg=6, lineno=125)
          30	LOAD_CONST(arg=1, lineno=125)
          32	BINARY_OP(arg=2, lineno=125)
          36	STORE_FAST(arg=7, lineno=125)
          38	LOAD_FAST(arg=6, lineno=126)
          40	LOAD_CONST(arg=1, lineno=126)
          42	BINARY_OP(arg=6, lineno=126)
          46	STORE_FAST(arg=8, lineno=126)
          48	LOAD_FAST(arg=5, lineno=128)
          50	LOAD_FAST(arg=2, lineno=128)
          52	LOAD_FAST(arg=3, lineno=128)
          54	BINARY_OP(arg=0, lineno=128)
          58	LOAD_FAST(arg=7, lineno=128)
          60	BUILD_TUPLE(arg=2, lineno=128)
          62	COPY(arg=2, lineno=128)
          64	COPY(arg=2, lineno=128)
          66	BINARY_SUBSCR(arg=None, lineno=128)
          70	LOAD_CONST(arg=2, lineno=128)
          72	LOAD_FAST(arg=8, lineno=128)
          74	BINARY_OP(arg=3, lineno=128)
          78	BINARY_OP(arg=20, lineno=128)
          82	SWAP(arg=3, lineno=128)
          84	SWAP(arg=2, lineno=128)
          86	STORE_SUBSCR(arg=None, lineno=128)
          90	LOAD_FAST(arg=6, lineno=130)
          92	LOAD_FAST(arg=1, lineno=130)
          94	BINARY_OP(arg=0, lineno=130)
          98	LOAD_CONST(arg=1, lineno=130)
         100	BINARY_OP(arg=2, lineno=130)
         104	STORE_FAST(arg=7, lineno=130)
         106	LOAD_FAST(arg=6, lineno=131)
         108	LOAD_FAST(arg=1, lineno=131)
         110	BINARY_OP(arg=0, lineno=131)
         114	LOAD_CONST(arg=1, lineno=131)
         116	BINARY_OP(arg=6, lineno=131)
         120	STORE_FAST(arg=8, lineno=131)
         122	LOAD_FAST(arg=5, lineno=132)
         124	LOAD_FAST(arg=2, lineno=132)
         126	LOAD_FAST(arg=3, lineno=132)
         128	BINARY_OP(arg=0, lineno=132)
         132	LOAD_FAST(arg=7, lineno=132)
         134	BUILD_TUPLE(arg=2, lineno=132)
         136	COPY(arg=2, lineno=132)
         138	COPY(arg=2, lineno=132)
         140	BINARY_SUBSCR(arg=None, lineno=132)
         144	LOAD_CONST(arg=2, lineno=132)
         146	LOAD_FAST(arg=8, lineno=132)
         148	BINARY_OP(arg=3, lineno=132)
         152	UNARY_INVERT(arg=None, lineno=132)
         154	BINARY_OP(arg=14, lineno=132)
         158	SWAP(arg=3, lineno=132)
         160	SWAP(arg=2, lineno=132)
         162	STORE_SUBSCR(arg=None, lineno=132)
         166	JUMP_BACKWARD(arg=73, lineno=132)
>        168	END_FOR(arg=None, lineno=124)
         170	RETURN_CONST(arg=0, lineno=124)
pending: deque([State(pc_initial=0 nstack_initial=0)])
stack: []
state.pc_initial: State(pc_initial=0 nstack_initial=0)
dispatch pc=0, inst=NOP(arg=None, lineno=121)
stack []
dispatch pc=2, inst=RESUME(arg=0, lineno=121)
stack []
dispatch pc=4, inst=LOAD_FAST(arg=0, lineno=124)
stack []
dispatch pc=6, inst=LOAD_FAST(arg=4, lineno=124)
stack ['$hypervectors4.0']
dispatch pc=8, inst=LOAD_CONST(arg=0, lineno=124)
stack ['$hypervectors4.0', '$symbol6.1']
dispatch pc=10, inst=LOAD_CONST(arg=0, lineno=124)
stack ['$hypervectors4.0', '$symbol6.1', '$const8.2']
dispatch pc=12, inst=BUILD_SLICE(arg=2, lineno=124)
stack ['$hypervectors4.0', '$symbol6.1', '$const8.2', '$const10.3']
dispatch pc=14, inst=BUILD_TUPLE(arg=2, lineno=124)
stack ['$hypervectors4.0', '$symbol6.1', '$12build_slice.5']
dispatch pc=16, inst=BINARY_SUBSCR(arg=None, lineno=124)
stack ['$hypervectors4.0', '$14build_tuple.6']
dispatch pc=20, inst=GET_ITER(arg=None, lineno=124)
stack ['$16binary_subscr.7']
end state. edges=[Edge(pc=22, stack=('$20get_iter.8',), blockstack=(), npush=0)]
pending: deque([State(pc_initial=22 nstack_initial=1)])
stack: ['$phi22.0']
state.pc_initial: State(pc_initial=22 nstack_initial=1)
dispatch pc=22, inst=FOR_ITER(arg=71, lineno=124)
stack ['$phi22.0']
end state. edges=[Edge(pc=168, stack=('$phi22.0', '$22for_iter.2'), blockstack=(), npush=0), Edge(pc=26, stack=('$phi22.0', '$22for_iter.2'), blockstack=(), npush=0)]
pending: deque([State(pc_initial=168 nstack_initial=2), State(pc_initial=26 nstack_initial=2)])
stack: ['$phi168.0', '$phi168.1']
state.pc_initial: State(pc_initial=168 nstack_initial=2)
dispatch pc=168, inst=END_FOR(arg=None, lineno=124)
stack ['$phi168.0', '$phi168.1']
dispatch pc=170, inst=RETURN_CONST(arg=0, lineno=124)
stack []
end state. edges=[]
pending: deque([State(pc_initial=26 nstack_initial=2)])
stack: ['$phi26.0', '$phi26.1']
state.pc_initial: State(pc_initial=26 nstack_initial=2)
dispatch pc=26, inst=STORE_FAST(arg=6, lineno=124)
stack ['$phi26.0', '$phi26.1']
dispatch pc=28, inst=LOAD_FAST(arg=6, lineno=125)
stack ['$phi26.0']
dispatch pc=30, inst=LOAD_CONST(arg=1, lineno=125)
stack ['$phi26.0', '$k28.2']
dispatch pc=32, inst=BINARY_OP(arg=2, lineno=125)
stack ['$phi26.0', '$k28.2', '$const30.3']
dispatch pc=36, inst=STORE_FAST(arg=7, lineno=125)
stack ['$phi26.0', '$binop_floordiv32.4']
dispatch pc=38, inst=LOAD_FAST(arg=6, lineno=126)
stack ['$phi26.0']
dispatch pc=40, inst=LOAD_CONST(arg=1, lineno=126)
stack ['$phi26.0', '$k38.5']
dispatch pc=42, inst=BINARY_OP(arg=6, lineno=126)
stack ['$phi26.0', '$k38.5', '$const40.6']
dispatch pc=46, inst=STORE_FAST(arg=8, lineno=126)
stack ['$phi26.0', '$binop_mod42.7']
dispatch pc=48, inst=LOAD_FAST(arg=5, lineno=128)
stack ['$phi26.0']
dispatch pc=50, inst=LOAD_FAST(arg=2, lineno=128)
stack ['$phi26.0', '$X48.8']
dispatch pc=52, inst=LOAD_FAST(arg=3, lineno=128)
stack ['$phi26.0', '$X48.8', '$graph_index50.9']
dispatch pc=54, inst=BINARY_OP(arg=0, lineno=128)
stack ['$phi26.0', '$X48.8', '$graph_index50.9', '$node52.10']
dispatch pc=58, inst=LOAD_FAST(arg=7, lineno=128)
stack ['$phi26.0', '$X48.8', '$binop_add54.11']
dispatch pc=60, inst=BUILD_TUPLE(arg=2, lineno=128)
stack ['$phi26.0', '$X48.8', '$binop_add54.11', '$chunk58.12']
dispatch pc=62, inst=COPY(arg=2, lineno=128)
stack ['$phi26.0', '$X48.8', '$60build_tuple.13']
dispatch pc=64, inst=COPY(arg=2, lineno=128)
stack ['$phi26.0', '$X48.8', '$60build_tuple.13', '$X48.8']
dispatch pc=66, inst=BINARY_SUBSCR(arg=None, lineno=128)
stack ['$phi26.0', '$X48.8', '$60build_tuple.13', '$X48.8', '$60build_tuple.13']
dispatch pc=70, inst=LOAD_CONST(arg=2, lineno=128)
stack ['$phi26.0', '$X48.8', '$60build_tuple.13', '$66binary_subscr.14']
dispatch pc=72, inst=LOAD_FAST(arg=8, lineno=128)
stack ['$phi26.0', '$X48.8', '$60build_tuple.13', '$66binary_subscr.14', '$const70.15']
dispatch pc=74, inst=BINARY_OP(arg=3, lineno=128)
stack ['$phi26.0', '$X48.8', '$60build_tuple.13', '$66binary_subscr.14', '$const70.15', '$pos72.16']
dispatch pc=78, inst=BINARY_OP(arg=20, lineno=128)
stack ['$phi26.0', '$X48.8', '$60build_tuple.13', '$66binary_subscr.14', '$binop_lshift74.17']
dispatch pc=82, inst=SWAP(arg=3, lineno=128)
stack ['$phi26.0', '$X48.8', '$60build_tuple.13', '$binop_ior78.18']
dispatch pc=84, inst=SWAP(arg=2, lineno=128)
stack ['$phi26.0', '$binop_ior78.18', '$60build_tuple.13', '$X48.8']
dispatch pc=86, inst=STORE_SUBSCR(arg=None, lineno=128)
stack ['$phi26.0', '$binop_ior78.18', '$X48.8', '$60build_tuple.13']
dispatch pc=90, inst=LOAD_FAST(arg=6, lineno=130)
stack ['$phi26.0']
dispatch pc=92, inst=LOAD_FAST(arg=1, lineno=130)
stack ['$phi26.0', '$k90.19']
dispatch pc=94, inst=BINARY_OP(arg=0, lineno=130)
stack ['$phi26.0', '$k90.19', '$hypervector_size92.20']
dispatch pc=98, inst=LOAD_CONST(arg=1, lineno=130)
stack ['$phi26.0', '$binop_add94.21']
dispatch pc=100, inst=BINARY_OP(arg=2, lineno=130)
stack ['$phi26.0', '$binop_add94.21', '$const98.22']
dispatch pc=104, inst=STORE_FAST(arg=7, lineno=130)
stack ['$phi26.0', '$binop_floordiv100.23']
dispatch pc=106, inst=LOAD_FAST(arg=6, lineno=131)
stack ['$phi26.0']
dispatch pc=108, inst=LOAD_FAST(arg=1, lineno=131)
stack ['$phi26.0', '$k106.24']
dispatch pc=110, inst=BINARY_OP(arg=0, lineno=131)
stack ['$phi26.0', '$k106.24', '$hypervector_size108.25']
dispatch pc=114, inst=LOAD_CONST(arg=1, lineno=131)
stack ['$phi26.0', '$binop_add110.26']
dispatch pc=116, inst=BINARY_OP(arg=6, lineno=131)
stack ['$phi26.0', '$binop_add110.26', '$const114.27']
dispatch pc=120, inst=STORE_FAST(arg=8, lineno=131)
stack ['$phi26.0', '$binop_mod116.28']
dispatch pc=122, inst=LOAD_FAST(arg=5, lineno=132)
stack ['$phi26.0']
dispatch pc=124, inst=LOAD_FAST(arg=2, lineno=132)
stack ['$phi26.0', '$X122.29']
dispatch pc=126, inst=LOAD_FAST(arg=3, lineno=132)
stack ['$phi26.0', '$X122.29', '$graph_index124.30']
dispatch pc=128, inst=BINARY_OP(arg=0, lineno=132)
stack ['$phi26.0', '$X122.29', '$graph_index124.30', '$node126.31']
dispatch pc=132, inst=LOAD_FAST(arg=7, lineno=132)
stack ['$phi26.0', '$X122.29', '$binop_add128.32']
dispatch pc=134, inst=BUILD_TUPLE(arg=2, lineno=132)
stack ['$phi26.0', '$X122.29', '$binop_add128.32', '$chunk132.33']
dispatch pc=136, inst=COPY(arg=2, lineno=132)
stack ['$phi26.0', '$X122.29', '$134build_tuple.34']
dispatch pc=138, inst=COPY(arg=2, lineno=132)
stack ['$phi26.0', '$X122.29', '$134build_tuple.34', '$X122.29']
dispatch pc=140, inst=BINARY_SUBSCR(arg=None, lineno=132)
stack ['$phi26.0', '$X122.29', '$134build_tuple.34', '$X122.29', '$134build_tuple.34']
dispatch pc=144, inst=LOAD_CONST(arg=2, lineno=132)
stack ['$phi26.0', '$X122.29', '$134build_tuple.34', '$140binary_subscr.35']
dispatch pc=146, inst=LOAD_FAST(arg=8, lineno=132)
stack ['$phi26.0', '$X122.29', '$134build_tuple.34', '$140binary_subscr.35', '$const144.36']
dispatch pc=148, inst=BINARY_OP(arg=3, lineno=132)
stack ['$phi26.0', '$X122.29', '$134build_tuple.34', '$140binary_subscr.35', '$const144.36', '$pos146.37']
dispatch pc=152, inst=UNARY_INVERT(arg=None, lineno=132)
stack ['$phi26.0', '$X122.29', '$134build_tuple.34', '$140binary_subscr.35', '$binop_lshift148.38']
dispatch pc=154, inst=BINARY_OP(arg=14, lineno=132)
stack ['$phi26.0', '$X122.29', '$134build_tuple.34', '$140binary_subscr.35', '$152unary_invert.39']
dispatch pc=158, inst=SWAP(arg=3, lineno=132)
stack ['$phi26.0', '$X122.29', '$134build_tuple.34', '$binop_iand154.40']
dispatch pc=160, inst=SWAP(arg=2, lineno=132)
stack ['$phi26.0', '$binop_iand154.40', '$134build_tuple.34', '$X122.29']
dispatch pc=162, inst=STORE_SUBSCR(arg=None, lineno=132)
stack ['$phi26.0', '$binop_iand154.40', '$X122.29', '$134build_tuple.34']
dispatch pc=166, inst=JUMP_BACKWARD(arg=73, lineno=132)
stack ['$phi26.0']
end state. edges=[Edge(pc=22, stack=('$phi26.0',), blockstack=(), npush=0)]
pending: deque([State(pc_initial=22 nstack_initial=1)])
-------------------------Prune PHIs-------------------------
Used_phis: defaultdict(<class 'set'>,
            {State(pc_initial=0 nstack_initial=0): set(),
             State(pc_initial=22 nstack_initial=1): {'$phi22.0'},
             State(pc_initial=26 nstack_initial=2): {'$phi26.1'},
             State(pc_initial=168 nstack_initial=2): set()})
defmap: {'$phi168.1': State(pc_initial=22 nstack_initial=1),
 '$phi22.0': State(pc_initial=0 nstack_initial=0),
 '$phi26.1': State(pc_initial=22 nstack_initial=1)}
phismap: defaultdict(<class 'set'>,
            {'$phi168.0': {('$phi22.0', State(pc_initial=22 nstack_initial=1))},
             '$phi168.1': {('$22for_iter.2',
                            State(pc_initial=22 nstack_initial=1))},
             '$phi22.0': {('$20get_iter.8',
                           State(pc_initial=0 nstack_initial=0)),
                          ('$phi26.0', State(pc_initial=26 nstack_initial=2))},
             '$phi26.0': {('$phi22.0', State(pc_initial=22 nstack_initial=1))},
             '$phi26.1': {('$22for_iter.2',
                           State(pc_initial=22 nstack_initial=1))}})
changing phismap: defaultdict(<class 'set'>,
            {'$phi168.0': {('$20get_iter.8',
                            State(pc_initial=0 nstack_initial=0)),
                           ('$phi26.0', State(pc_initial=26 nstack_initial=2))},
             '$phi168.1': {('$22for_iter.2',
                            State(pc_initial=22 nstack_initial=1))},
             '$phi22.0': {('$20get_iter.8',
                           State(pc_initial=0 nstack_initial=0)),
                          ('$phi22.0', State(pc_initial=22 nstack_initial=1))},
             '$phi26.0': {('$20get_iter.8',
                           State(pc_initial=0 nstack_initial=0))},
             '$phi26.1': {('$22for_iter.2',
                           State(pc_initial=22 nstack_initial=1))}})
changing phismap: defaultdict(<class 'set'>,
            {'$phi168.0': {('$20get_iter.8',
                            State(pc_initial=0 nstack_initial=0))},
             '$phi168.1': {('$22for_iter.2',
                            State(pc_initial=22 nstack_initial=1))},
             '$phi22.0': {('$20get_iter.8',
                           State(pc_initial=0 nstack_initial=0))},
             '$phi26.0': {('$20get_iter.8',
                           State(pc_initial=0 nstack_initial=0))},
             '$phi26.1': {('$22for_iter.2',
                           State(pc_initial=22 nstack_initial=1))}})
changing phismap: defaultdict(<class 'set'>,
            {'$phi168.0': {('$20get_iter.8',
                            State(pc_initial=0 nstack_initial=0))},
             '$phi168.1': {('$22for_iter.2',
                            State(pc_initial=22 nstack_initial=1))},
             '$phi22.0': {('$20get_iter.8',
                           State(pc_initial=0 nstack_initial=0))},
             '$phi26.0': {('$20get_iter.8',
                           State(pc_initial=0 nstack_initial=0))},
             '$phi26.1': {('$22for_iter.2',
                           State(pc_initial=22 nstack_initial=1))}})
keep phismap: {'$phi22.0': {('$20get_iter.8', State(pc_initial=0 nstack_initial=0))},
 '$phi26.1': {('$22for_iter.2', State(pc_initial=22 nstack_initial=1))}}
new_out: defaultdict(<class 'dict'>,
            {State(pc_initial=0 nstack_initial=0): {'$phi22.0': '$20get_iter.8'},
             State(pc_initial=22 nstack_initial=1): {'$phi26.1': '$22for_iter.2'}})
----------------------DONE Prune PHIs-----------------------
block_infos State(pc_initial=0 nstack_initial=0):
AdaptBlockInfo(insts=((0, {}), (2, {}), (4, {'res': '$hypervectors4.0'}), (6, {'res': '$symbol6.1'}), (8, {'res': '$const8.2'}), (10, {'res': '$const10.3'}), (12, {'start': '$const8.2', 'stop': '$const10.3', 'step': None, 'res': '$12build_slice.5', 'slicevar': '$12build_slice.4'}), (14, {'items': ['$symbol6.1', '$12build_slice.5'], 'res': '$14build_tuple.6'}), (16, {'index': '$14build_tuple.6', 'target': '$hypervectors4.0', 'res': '$16binary_subscr.7'}), (20, {'value': '$16binary_subscr.7', 'res': '$20get_iter.8'})), outgoing_phis={'$phi22.0': '$20get_iter.8'}, blockstack=(), active_try_block=None, outgoing_edgepushed={22: ('$20get_iter.8',)})
block_infos State(pc_initial=22 nstack_initial=1):
AdaptBlockInfo(insts=((22, {'iterator': '$phi22.0', 'pair': '$22for_iter.1', 'indval': '$22for_iter.2', 'pred': '$22for_iter.3'}),), outgoing_phis={'$phi26.1': '$22for_iter.2'}, blockstack=(), active_try_block=None, outgoing_edgepushed={168: ('$phi22.0', '$22for_iter.2'), 26: ('$phi22.0', '$22for_iter.2')})
block_infos State(pc_initial=26 nstack_initial=2):
AdaptBlockInfo(insts=((26, {'value': '$phi26.1'}), (28, {'res': '$k28.2'}), (30, {'res': '$const30.3'}), (32, {'op': '//', 'lhs': '$k28.2', 'rhs': '$const30.3', 'res': '$binop_floordiv32.4'}), (36, {'value': '$binop_floordiv32.4'}), (38, {'res': '$k38.5'}), (40, {'res': '$const40.6'}), (42, {'op': '%', 'lhs': '$k38.5', 'rhs': '$const40.6', 'res': '$binop_mod42.7'}), (46, {'value': '$binop_mod42.7'}), (48, {'res': '$X48.8'}), (50, {'res': '$graph_index50.9'}), (52, {'res': '$node52.10'}), (54, {'op': '+', 'lhs': '$graph_index50.9', 'rhs': '$node52.10', 'res': '$binop_add54.11'}), (58, {'res': '$chunk58.12'}), (60, {'items': ['$binop_add54.11', '$chunk58.12'], 'res': '$60build_tuple.13'}), (66, {'index': '$60build_tuple.13', 'target': '$X48.8', 'res': '$66binary_subscr.14'}), (70, {'res': '$const70.15'}), (72, {'res': '$pos72.16'}), (74, {'op': '<<', 'lhs': '$const70.15', 'rhs': '$pos72.16', 'res': '$binop_lshift74.17'}), (78, {'op': '|=', 'lhs': '$66binary_subscr.14', 'rhs': '$binop_lshift74.17', 'res': '$binop_ior78.18'}), (86, {'target': '$X48.8', 'index': '$60build_tuple.13', 'value': '$binop_ior78.18'}), (90, {'res': '$k90.19'}), (92, {'res': '$hypervector_size92.20'}), (94, {'op': '+', 'lhs': '$k90.19', 'rhs': '$hypervector_size92.20', 'res': '$binop_add94.21'}), (98, {'res': '$const98.22'}), (100, {'op': '//', 'lhs': '$binop_add94.21', 'rhs': '$const98.22', 'res': '$binop_floordiv100.23'}), (104, {'value': '$binop_floordiv100.23'}), (106, {'res': '$k106.24'}), (108, {'res': '$hypervector_size108.25'}), (110, {'op': '+', 'lhs': '$k106.24', 'rhs': '$hypervector_size108.25', 'res': '$binop_add110.26'}), (114, {'res': '$const114.27'}), (116, {'op': '%', 'lhs': '$binop_add110.26', 'rhs': '$const114.27', 'res': '$binop_mod116.28'}), (120, {'value': '$binop_mod116.28'}), (122, {'res': '$X122.29'}), (124, {'res': '$graph_index124.30'}), (126, {'res': '$node126.31'}), (128, {'op': '+', 'lhs': '$graph_index124.30', 'rhs': '$node126.31', 'res': '$binop_add128.32'}), (132, {'res': '$chunk132.33'}), (134, {'items': ['$binop_add128.32', '$chunk132.33'], 'res': '$134build_tuple.34'}), (140, {'index': '$134build_tuple.34', 'target': '$X122.29', 'res': '$140binary_subscr.35'}), (144, {'res': '$const144.36'}), (146, {'res': '$pos146.37'}), (148, {'op': '<<', 'lhs': '$const144.36', 'rhs': '$pos146.37', 'res': '$binop_lshift148.38'}), (152, {'value': '$binop_lshift148.38', 'res': '$152unary_invert.39'}), (154, {'op': '&=', 'lhs': '$140binary_subscr.35', 'rhs': '$152unary_invert.39', 'res': '$binop_iand154.40'}), (162, {'target': '$X122.29', 'index': '$134build_tuple.34', 'value': '$binop_iand154.40'}), (166, {})), outgoing_phis={}, blockstack=(), active_try_block=None, outgoing_edgepushed={22: ('$phi26.0',)})
block_infos State(pc_initial=168 nstack_initial=2):
AdaptBlockInfo(insts=((170, {'retval': '$const170.2', 'castval': '$170return_const.3'}),), outgoing_phis={}, blockstack=(), active_try_block=None, outgoing_edgepushed={})
label 0:
    hypervectors = arg(0, name=hypervectors) ['hypervectors']
    hypervector_size = arg(1, name=hypervector_size) ['hypervector_size']
    graph_index = arg(2, name=graph_index)   ['graph_index']
    node = arg(3, name=node)                 ['node']
    symbol = arg(4, name=symbol)             ['symbol']
    X = arg(5, name=X)                       ['X']
    $const8.2 = const(NoneType, None)        ['$const8.2']
    $const10.3 = const(NoneType, None)       ['$const10.3']
    $12build_slice.4 = global(slice: <class 'slice'>) ['$12build_slice.4']
    $12build_slice.5 = call $12build_slice.4($const8.2, $const10.3, func=$12build_slice.4, args=(Var($const8.2, graphs.py:124), Var($const10.3, graphs.py:124)), kws=(), vararg=None, varkwarg=None, target=None) ['$12build_slice.4', '$12build_slice.5', '$const10.3', '$const8.2']
    $14build_tuple.6 = build_tuple(items=[Var(symbol, graphs.py:121), Var($12build_slice.5, graphs.py:124)]) ['$12build_slice.5', '$14build_tuple.6', 'symbol']
    $16binary_subscr.7 = getitem(value=hypervectors, index=$14build_tuple.6, fn=<built-in function getitem>) ['$14build_tuple.6', '$16binary_subscr.7', 'hypervectors']
    $20get_iter.8 = getiter(value=$16binary_subscr.7) ['$16binary_subscr.7', '$20get_iter.8']
    $phi22.0 = $20get_iter.8                 ['$20get_iter.8', '$phi22.0']
    jump 22                                  []
label 22:
    $22for_iter.1 = iternext(value=$phi22.0) ['$22for_iter.1', '$phi22.0']
    $22for_iter.2 = pair_first(value=$22for_iter.1) ['$22for_iter.1', '$22for_iter.2']
    $22for_iter.3 = pair_second(value=$22for_iter.1) ['$22for_iter.1', '$22for_iter.3']
    $phi26.1 = $22for_iter.2                 ['$22for_iter.2', '$phi26.1']
    branch $22for_iter.3, 26, 168            ['$22for_iter.3']
label 26:
    k = $phi26.1                             ['$phi26.1', 'k']
    $const30.3 = const(int, 32)              ['$const30.3']
    chunk = k // $const30.3                  ['$const30.3', 'chunk', 'k']
    $const40.6 = const(int, 32)              ['$const40.6']
    pos = k % $const40.6                     ['$const40.6', 'k', 'pos']
    $binop_add54.11 = graph_index + node     ['$binop_add54.11', 'graph_index', 'node']
    $60build_tuple.13 = build_tuple(items=[Var($binop_add54.11, graphs.py:128), Var(chunk, graphs.py:125)]) ['$60build_tuple.13', '$binop_add54.11', 'chunk']
    $66binary_subscr.14 = getitem(value=X, index=$60build_tuple.13, fn=<built-in function getitem>) ['$60build_tuple.13', '$66binary_subscr.14', 'X']
    $const70.15 = const(int, 1)              ['$const70.15']
    $binop_lshift74.17 = $const70.15 << pos  ['$binop_lshift74.17', '$const70.15', 'pos']
    $binop_ior78.18 = inplace_binop(fn=<built-in function ior>, immutable_fn=<built-in function or_>, lhs=$66binary_subscr.14, rhs=$binop_lshift74.17, static_lhs=Undefined, static_rhs=Undefined) ['$66binary_subscr.14', '$binop_ior78.18', '$binop_lshift74.17']
    X[$60build_tuple.13] = $binop_ior78.18   ['$60build_tuple.13', '$binop_ior78.18', 'X']
    $binop_add94.21 = k + hypervector_size   ['$binop_add94.21', 'hypervector_size', 'k']
    $const98.22 = const(int, 32)             ['$const98.22']
    chunk = $binop_add94.21 // $const98.22   ['$binop_add94.21', '$const98.22', 'chunk']
    $binop_add110.26 = k + hypervector_size  ['$binop_add110.26', 'hypervector_size', 'k']
    $const114.27 = const(int, 32)            ['$const114.27']
    pos = $binop_add110.26 % $const114.27    ['$binop_add110.26', '$const114.27', 'pos']
    $binop_add128.32 = graph_index + node    ['$binop_add128.32', 'graph_index', 'node']
    $134build_tuple.34 = build_tuple(items=[Var($binop_add128.32, graphs.py:132), Var(chunk, graphs.py:125)]) ['$134build_tuple.34', '$binop_add128.32', 'chunk']
    $140binary_subscr.35 = getitem(value=X, index=$134build_tuple.34, fn=<built-in function getitem>) ['$134build_tuple.34', '$140binary_subscr.35', 'X']
    $const144.36 = const(int, 1)             ['$const144.36']
    $binop_lshift148.38 = $const144.36 << pos ['$binop_lshift148.38', '$const144.36', 'pos']
    $152unary_invert.39 = unary(fn=<built-in function invert>, value=$binop_lshift148.38) ['$152unary_invert.39', '$binop_lshift148.38']
    $binop_iand154.40 = inplace_binop(fn=<built-in function iand>, immutable_fn=<built-in function and_>, lhs=$140binary_subscr.35, rhs=$152unary_invert.39, static_lhs=Undefined, static_rhs=Undefined) ['$140binary_subscr.35', '$152unary_invert.39', '$binop_iand154.40']
    X[$134build_tuple.34] = $binop_iand154.40 ['$134build_tuple.34', '$binop_iand154.40', 'X']
    jump 22                                  []
label 168:
    $const170.2 = const(NoneType, None)      ['$const170.2']
    $170return_const.3 = cast(value=$const170.2) ['$170return_const.3', '$const170.2']
    return $170return_const.3                ['$170return_const.3']

==== SSA block analysis pass on 0
Running <numba.core.ssa._GatherDefsHandler object at 0x7dc527cacd70>
on stmt: hypervectors = arg(0, name=hypervectors)
on stmt: hypervector_size = arg(1, name=hypervector_size)
on stmt: graph_index = arg(2, name=graph_index)
on stmt: node = arg(3, name=node)
on stmt: symbol = arg(4, name=symbol)
on stmt: X = arg(5, name=X)
on stmt: $const8.2 = const(NoneType, None)
on stmt: $const10.3 = const(NoneType, None)
on stmt: $12build_slice.4 = global(slice: <class 'slice'>)
on stmt: $12build_slice.5 = call $12build_slice.4($const8.2, $const10.3, func=$12build_slice.4, args=(Var($const8.2, graphs.py:124), Var($const10.3, graphs.py:124)), kws=(), vararg=None, varkwarg=None, target=None)
on stmt: $14build_tuple.6 = build_tuple(items=[Var(symbol, graphs.py:121), Var($12build_slice.5, graphs.py:124)])
on stmt: $16binary_subscr.7 = getitem(value=hypervectors, index=$14build_tuple.6, fn=<built-in function getitem>)
on stmt: $20get_iter.8 = getiter(value=$16binary_subscr.7)
on stmt: $phi22.0 = $20get_iter.8
on stmt: jump 22
==== SSA block analysis pass on 22
Running <numba.core.ssa._GatherDefsHandler object at 0x7dc527cacd70>
on stmt: $22for_iter.1 = iternext(value=$phi22.0)
on stmt: $22for_iter.2 = pair_first(value=$22for_iter.1)
on stmt: $22for_iter.3 = pair_second(value=$22for_iter.1)
on stmt: $phi26.1 = $22for_iter.2
on stmt: branch $22for_iter.3, 26, 168
==== SSA block analysis pass on 26
Running <numba.core.ssa._GatherDefsHandler object at 0x7dc527cacd70>
on stmt: k = $phi26.1
on stmt: $const30.3 = const(int, 32)
on stmt: chunk = k // $const30.3
on stmt: $const40.6 = const(int, 32)
on stmt: pos = k % $const40.6
on stmt: $binop_add54.11 = graph_index + node
on stmt: $60build_tuple.13 = build_tuple(items=[Var($binop_add54.11, graphs.py:128), Var(chunk, graphs.py:125)])
on stmt: $66binary_subscr.14 = getitem(value=X, index=$60build_tuple.13, fn=<built-in function getitem>)
on stmt: $const70.15 = const(int, 1)
on stmt: $binop_lshift74.17 = $const70.15 << pos
on stmt: $binop_ior78.18 = inplace_binop(fn=<built-in function ior>, immutable_fn=<built-in function or_>, lhs=$66binary_subscr.14, rhs=$binop_lshift74.17, static_lhs=Undefined, static_rhs=Undefined)
on stmt: X[$60build_tuple.13] = $binop_ior78.18
on stmt: $binop_add94.21 = k + hypervector_size
on stmt: $const98.22 = const(int, 32)
on stmt: chunk = $binop_add94.21 // $const98.22
on stmt: $binop_add110.26 = k + hypervector_size
on stmt: $const114.27 = const(int, 32)
on stmt: pos = $binop_add110.26 % $const114.27
on stmt: $binop_add128.32 = graph_index + node
on stmt: $134build_tuple.34 = build_tuple(items=[Var($binop_add128.32, graphs.py:132), Var(chunk, graphs.py:125)])
on stmt: $140binary_subscr.35 = getitem(value=X, index=$134build_tuple.34, fn=<built-in function getitem>)
on stmt: $const144.36 = const(int, 1)
on stmt: $binop_lshift148.38 = $const144.36 << pos
on stmt: $152unary_invert.39 = unary(fn=<built-in function invert>, value=$binop_lshift148.38)
on stmt: $binop_iand154.40 = inplace_binop(fn=<built-in function iand>, immutable_fn=<built-in function and_>, lhs=$140binary_subscr.35, rhs=$152unary_invert.39, static_lhs=Undefined, static_rhs=Undefined)
on stmt: X[$134build_tuple.34] = $binop_iand154.40
on stmt: jump 22
==== SSA block analysis pass on 168
Running <numba.core.ssa._GatherDefsHandler object at 0x7dc527cacd70>
on stmt: $const170.2 = const(NoneType, None)
on stmt: $170return_const.3 = cast(value=$const170.2)
on stmt: return $170return_const.3
defs defaultdict(<class 'list'>,
            {'$12build_slice.4': [(<numba.core.ir.Assign object at 0x7dc527cadd00>,
                                   0)],
             '$12build_slice.5': [(<numba.core.ir.Assign object at 0x7dc527caddf0>,
                                   0)],
             '$134build_tuple.34': [(<numba.core.ir.Assign object at 0x7dc527b59040>,
                                     26)],
             '$140binary_subscr.35': [(<numba.core.ir.Assign object at 0x7dc527b591c0>,
                                       26)],
             '$14build_tuple.6': [(<numba.core.ir.Assign object at 0x7dc527cadf10>,
                                   0)],
             '$152unary_invert.39': [(<numba.core.ir.Assign object at 0x7dc527b59640>,
                                      26)],
             '$16binary_subscr.7': [(<numba.core.ir.Assign object at 0x7dc527cae060>,
                                     0)],
             '$170return_const.3': [(<numba.core.ir.Assign object at 0x7dc527caf5c0>,
                                     168)],
             '$20get_iter.8': [(<numba.core.ir.Assign object at 0x7dc527cae180>,
                                0)],
             '$22for_iter.1': [(<numba.core.ir.Assign object at 0x7dc527cae390>,
                                22)],
             '$22for_iter.2': [(<numba.core.ir.Assign object at 0x7dc527cae4b0>,
                                22)],
             '$22for_iter.3': [(<numba.core.ir.Assign object at 0x7dc527cae5d0>,
                                22)],
             '$60build_tuple.13': [(<numba.core.ir.Assign object at 0x7dc527caf6e0>,
                                    26)],
             '$66binary_subscr.14': [(<numba.core.ir.Assign object at 0x7dc527caf860>,
                                      26)],
             '$binop_add110.26': [(<numba.core.ir.Assign object at 0x7dc527b58710>,
                                   26)],
             '$binop_add128.32': [(<numba.core.ir.Assign object at 0x7dc527b58e30>,
                                   26)],
             '$binop_add54.11': [(<numba.core.ir.Assign object at 0x7dc527caf500>,
                                  26)],
             '$binop_add94.21': [(<numba.core.ir.Assign object at 0x7dc527b580e0>,
                                  26)],
             '$binop_iand154.40': [(<numba.core.ir.Assign object at 0x7dc527b597c0>,
                                    26)],
             '$binop_ior78.18': [(<numba.core.ir.Assign object at 0x7dc527cafd10>,
                                  26)],
             '$binop_lshift148.38': [(<numba.core.ir.Assign object at 0x7dc527b59520>,
                                      26)],
             '$binop_lshift74.17': [(<numba.core.ir.Assign object at 0x7dc527cafbc0>,
                                     26)],
             '$const10.3': [(<numba.core.ir.Assign object at 0x7dc527cadbe0>,
                             0)],
             '$const114.27': [(<numba.core.ir.Assign object at 0x7dc527b58800>,
                               26)],
             '$const144.36': [(<numba.core.ir.Assign object at 0x7dc527b592b0>,
                               26)],
             '$const170.2': [(<numba.core.ir.Assign object at 0x7dc527caf1a0>,
                              168)],
             '$const30.3': [(<numba.core.ir.Assign object at 0x7dc527caea20>,
                             26)],
             '$const40.6': [(<numba.core.ir.Assign object at 0x7dc527caee70>,
                             26)],
             '$const70.15': [(<numba.core.ir.Assign object at 0x7dc527caf950>,
                              26)],
             '$const8.2': [(<numba.core.ir.Assign object at 0x7dc527cadac0>,
                            0)],
             '$const98.22': [(<numba.core.ir.Assign object at 0x7dc527b581d0>,
                              26)],
             '$phi22.0': [(<numba.core.ir.Assign object at 0x7dc527cad9a0>, 0)],
             '$phi26.1': [(<numba.core.ir.Assign object at 0x7dc527cae660>,
                           22)],
             'X': [(<numba.core.ir.Assign object at 0x7dc527cad7c0>, 0)],
             'chunk': [(<numba.core.ir.Assign object at 0x7dc527caeba0>, 26),
                       (<numba.core.ir.Assign object at 0x7dc527b58350>, 26)],
             'graph_index': [(<numba.core.ir.Assign object at 0x7dc527cad4f0>,
                              0)],
             'hypervector_size': [(<numba.core.ir.Assign object at 0x7dc527cad2e0>,
                                   0)],
             'hypervectors': [(<numba.core.ir.Assign object at 0x7dc527cad370>,
                               0)],
             'k': [(<numba.core.ir.Assign object at 0x7dc527cae810>, 26)],
             'node': [(<numba.core.ir.Assign object at 0x7dc527cad5e0>, 0)],
             'pos': [(<numba.core.ir.Assign object at 0x7dc527caeff0>, 26),
                     (<numba.core.ir.Assign object at 0x7dc527b58980>, 26)],
             'symbol': [(<numba.core.ir.Assign object at 0x7dc527cad6d0>, 0)]})
SSA violators <numba.core.utils.OrderedSet object at 0x7dc527f58d10>
Fix SSA violator on var chunk
==== SSA block rewrite pass on 0
Running <numba.core.ssa._FreshVarHandler object at 0x7dc529fde360>
on stmt: hypervectors = arg(0, name=hypervectors)
on stmt: hypervector_size = arg(1, name=hypervector_size)
on stmt: graph_index = arg(2, name=graph_index)
on stmt: node = arg(3, name=node)
on stmt: symbol = arg(4, name=symbol)
on stmt: X = arg(5, name=X)
on stmt: $const8.2 = const(NoneType, None)
on stmt: $const10.3 = const(NoneType, None)
on stmt: $12build_slice.4 = global(slice: <class 'slice'>)
on stmt: $12build_slice.5 = call $12build_slice.4($const8.2, $const10.3, func=$12build_slice.4, args=(Var($const8.2, graphs.py:124), Var($const10.3, graphs.py:124)), kws=(), vararg=None, varkwarg=None, target=None)
on stmt: $14build_tuple.6 = build_tuple(items=[Var(symbol, graphs.py:121), Var($12build_slice.5, graphs.py:124)])
on stmt: $16binary_subscr.7 = getitem(value=hypervectors, index=$14build_tuple.6, fn=<built-in function getitem>)
on stmt: $20get_iter.8 = getiter(value=$16binary_subscr.7)
on stmt: $phi22.0 = $20get_iter.8
on stmt: jump 22
==== SSA block rewrite pass on 22
Running <numba.core.ssa._FreshVarHandler object at 0x7dc529fde360>
on stmt: $22for_iter.1 = iternext(value=$phi22.0)
on stmt: $22for_iter.2 = pair_first(value=$22for_iter.1)
on stmt: $22for_iter.3 = pair_second(value=$22for_iter.1)
on stmt: $phi26.1 = $22for_iter.2
on stmt: branch $22for_iter.3, 26, 168
==== SSA block rewrite pass on 26
Running <numba.core.ssa._FreshVarHandler object at 0x7dc529fde360>
on stmt: k = $phi26.1
on stmt: $const30.3 = const(int, 32)
on stmt: chunk = k // $const30.3
first assign: chunk
replaced with: chunk = k // $const30.3
on stmt: $const40.6 = const(int, 32)
on stmt: pos = k % $const40.6
on stmt: $binop_add54.11 = graph_index + node
on stmt: $60build_tuple.13 = build_tuple(items=[Var($binop_add54.11, graphs.py:128), Var(chunk, graphs.py:125)])
on stmt: $66binary_subscr.14 = getitem(value=X, index=$60build_tuple.13, fn=<built-in function getitem>)
on stmt: $const70.15 = const(int, 1)
on stmt: $binop_lshift74.17 = $const70.15 << pos
on stmt: $binop_ior78.18 = inplace_binop(fn=<built-in function ior>, immutable_fn=<built-in function or_>, lhs=$66binary_subscr.14, rhs=$binop_lshift74.17, static_lhs=Undefined, static_rhs=Undefined)
on stmt: X[$60build_tuple.13] = $binop_ior78.18
on stmt: $binop_add94.21 = k + hypervector_size
on stmt: $const98.22 = const(int, 32)
on stmt: chunk = $binop_add94.21 // $const98.22
replaced with: chunk.1 = $binop_add94.21 // $const98.22
on stmt: $binop_add110.26 = k + hypervector_size
on stmt: $const114.27 = const(int, 32)
on stmt: pos = $binop_add110.26 % $const114.27
on stmt: $binop_add128.32 = graph_index + node
on stmt: $134build_tuple.34 = build_tuple(items=[Var($binop_add128.32, graphs.py:132), Var(chunk, graphs.py:125)])
on stmt: $140binary_subscr.35 = getitem(value=X, index=$134build_tuple.34, fn=<built-in function getitem>)
on stmt: $const144.36 = const(int, 1)
on stmt: $binop_lshift148.38 = $const144.36 << pos
on stmt: $152unary_invert.39 = unary(fn=<built-in function invert>, value=$binop_lshift148.38)
on stmt: $binop_iand154.40 = inplace_binop(fn=<built-in function iand>, immutable_fn=<built-in function and_>, lhs=$140binary_subscr.35, rhs=$152unary_invert.39, static_lhs=Undefined, static_rhs=Undefined)
on stmt: X[$134build_tuple.34] = $binop_iand154.40
on stmt: jump 22
==== SSA block rewrite pass on 168
Running <numba.core.ssa._FreshVarHandler object at 0x7dc529fde360>
on stmt: $const170.2 = const(NoneType, None)
on stmt: $170return_const.3 = cast(value=$const170.2)
on stmt: return $170return_const.3
Replaced assignments: defaultdict(<class 'list'>,
            {26: [<numba.core.ir.Assign object at 0x7dc5291fe6f0>,
                  <numba.core.ir.Assign object at 0x7dc527f326c0>]})
==== SSA block rewrite pass on 0
Running <numba.core.ssa._FixSSAVars object at 0x7dc529fde360>
on stmt: hypervectors = arg(0, name=hypervectors)
on stmt: hypervector_size = arg(1, name=hypervector_size)
on stmt: graph_index = arg(2, name=graph_index)
on stmt: node = arg(3, name=node)
on stmt: symbol = arg(4, name=symbol)
on stmt: X = arg(5, name=X)
on stmt: $const8.2 = const(NoneType, None)
on stmt: $const10.3 = const(NoneType, None)
on stmt: $12build_slice.4 = global(slice: <class 'slice'>)
on stmt: $12build_slice.5 = call $12build_slice.4($const8.2, $const10.3, func=$12build_slice.4, args=(Var($const8.2, graphs.py:124), Var($const10.3, graphs.py:124)), kws=(), vararg=None, varkwarg=None, target=None)
on stmt: $14build_tuple.6 = build_tuple(items=[Var(symbol, graphs.py:121), Var($12build_slice.5, graphs.py:124)])
on stmt: $16binary_subscr.7 = getitem(value=hypervectors, index=$14build_tuple.6, fn=<built-in function getitem>)
on stmt: $20get_iter.8 = getiter(value=$16binary_subscr.7)
on stmt: $phi22.0 = $20get_iter.8
on stmt: jump 22
==== SSA block rewrite pass on 22
Running <numba.core.ssa._FixSSAVars object at 0x7dc529fde360>
on stmt: $22for_iter.1 = iternext(value=$phi22.0)
on stmt: $22for_iter.2 = pair_first(value=$22for_iter.1)
on stmt: $22for_iter.3 = pair_second(value=$22for_iter.1)
on stmt: $phi26.1 = $22for_iter.2
on stmt: branch $22for_iter.3, 26, 168
==== SSA block rewrite pass on 26
Running <numba.core.ssa._FixSSAVars object at 0x7dc529fde360>
on stmt: k = $phi26.1
on stmt: $const30.3 = const(int, 32)
on stmt: chunk = k // $const30.3
on stmt: $const40.6 = const(int, 32)
on stmt: pos = k % $const40.6
on stmt: $binop_add54.11 = graph_index + node
on stmt: $60build_tuple.13 = build_tuple(items=[Var($binop_add54.11, graphs.py:128), Var(chunk, graphs.py:125)])
find_def var='chunk' stmt=$60build_tuple.13 = build_tuple(items=[Var($binop_add54.11, graphs.py:128), Var(chunk, graphs.py:125)])
on stmt: $66binary_subscr.14 = getitem(value=X, index=$60build_tuple.13, fn=<built-in function getitem>)
on stmt: $const70.15 = const(int, 1)
on stmt: $binop_lshift74.17 = $const70.15 << pos
on stmt: $binop_ior78.18 = inplace_binop(fn=<built-in function ior>, immutable_fn=<built-in function or_>, lhs=$66binary_subscr.14, rhs=$binop_lshift74.17, static_lhs=Undefined, static_rhs=Undefined)
on stmt: X[$60build_tuple.13] = $binop_ior78.18
on stmt: $binop_add94.21 = k + hypervector_size
on stmt: $const98.22 = const(int, 32)
on stmt: chunk.1 = $binop_add94.21 // $const98.22
on stmt: $binop_add110.26 = k + hypervector_size
on stmt: $const114.27 = const(int, 32)
on stmt: pos = $binop_add110.26 % $const114.27
on stmt: $binop_add128.32 = graph_index + node
on stmt: $134build_tuple.34 = build_tuple(items=[Var($binop_add128.32, graphs.py:132), Var(chunk, graphs.py:125)])
find_def var='chunk' stmt=$134build_tuple.34 = build_tuple(items=[Var($binop_add128.32, graphs.py:132), Var(chunk, graphs.py:125)])
replaced with: $134build_tuple.34 = build_tuple(items=[Var($binop_add128.32, graphs.py:132), Var(chunk.1, graphs.py:130)])
on stmt: $140binary_subscr.35 = getitem(value=X, index=$134build_tuple.34, fn=<built-in function getitem>)
on stmt: $const144.36 = const(int, 1)
on stmt: $binop_lshift148.38 = $const144.36 << pos
on stmt: $152unary_invert.39 = unary(fn=<built-in function invert>, value=$binop_lshift148.38)
on stmt: $binop_iand154.40 = inplace_binop(fn=<built-in function iand>, immutable_fn=<built-in function and_>, lhs=$140binary_subscr.35, rhs=$152unary_invert.39, static_lhs=Undefined, static_rhs=Undefined)
on stmt: X[$134build_tuple.34] = $binop_iand154.40
on stmt: jump 22
==== SSA block rewrite pass on 168
Running <numba.core.ssa._FixSSAVars object at 0x7dc529fde360>
on stmt: $const170.2 = const(NoneType, None)
on stmt: $170return_const.3 = cast(value=$const170.2)
on stmt: return $170return_const.3
Fix SSA violator on var pos
==== SSA block rewrite pass on 0
Running <numba.core.ssa._FreshVarHandler object at 0x7dc5285368a0>
on stmt: hypervectors = arg(0, name=hypervectors)
on stmt: hypervector_size = arg(1, name=hypervector_size)
on stmt: graph_index = arg(2, name=graph_index)
on stmt: node = arg(3, name=node)
on stmt: symbol = arg(4, name=symbol)
on stmt: X = arg(5, name=X)
on stmt: $const8.2 = const(NoneType, None)
on stmt: $const10.3 = const(NoneType, None)
on stmt: $12build_slice.4 = global(slice: <class 'slice'>)
on stmt: $12build_slice.5 = call $12build_slice.4($const8.2, $const10.3, func=$12build_slice.4, args=(Var($const8.2, graphs.py:124), Var($const10.3, graphs.py:124)), kws=(), vararg=None, varkwarg=None, target=None)
on stmt: $14build_tuple.6 = build_tuple(items=[Var(symbol, graphs.py:121), Var($12build_slice.5, graphs.py:124)])
on stmt: $16binary_subscr.7 = getitem(value=hypervectors, index=$14build_tuple.6, fn=<built-in function getitem>)
on stmt: $20get_iter.8 = getiter(value=$16binary_subscr.7)
on stmt: $phi22.0 = $20get_iter.8
on stmt: jump 22
==== SSA block rewrite pass on 22
Running <numba.core.ssa._FreshVarHandler object at 0x7dc5285368a0>
on stmt: $22for_iter.1 = iternext(value=$phi22.0)
on stmt: $22for_iter.2 = pair_first(value=$22for_iter.1)
on stmt: $22for_iter.3 = pair_second(value=$22for_iter.1)
on stmt: $phi26.1 = $22for_iter.2
on stmt: branch $22for_iter.3, 26, 168
==== SSA block rewrite pass on 26
Running <numba.core.ssa._FreshVarHandler object at 0x7dc5285368a0>
on stmt: k = $phi26.1
on stmt: $const30.3 = const(int, 32)
on stmt: chunk = k // $const30.3
on stmt: $const40.6 = const(int, 32)
on stmt: pos = k % $const40.6
first assign: pos
replaced with: pos = k % $const40.6
on stmt: $binop_add54.11 = graph_index + node
on stmt: $60build_tuple.13 = build_tuple(items=[Var($binop_add54.11, graphs.py:128), Var(chunk, graphs.py:125)])
on stmt: $66binary_subscr.14 = getitem(value=X, index=$60build_tuple.13, fn=<built-in function getitem>)
on stmt: $const70.15 = const(int, 1)
on stmt: $binop_lshift74.17 = $const70.15 << pos
on stmt: $binop_ior78.18 = inplace_binop(fn=<built-in function ior>, immutable_fn=<built-in function or_>, lhs=$66binary_subscr.14, rhs=$binop_lshift74.17, static_lhs=Undefined, static_rhs=Undefined)
on stmt: X[$60build_tuple.13] = $binop_ior78.18
on stmt: $binop_add94.21 = k + hypervector_size
on stmt: $const98.22 = const(int, 32)
on stmt: chunk.1 = $binop_add94.21 // $const98.22
on stmt: $binop_add110.26 = k + hypervector_size
on stmt: $const114.27 = const(int, 32)
on stmt: pos = $binop_add110.26 % $const114.27
replaced with: pos.1 = $binop_add110.26 % $const114.27
on stmt: $binop_add128.32 = graph_index + node
on stmt: $134build_tuple.34 = build_tuple(items=[Var($binop_add128.32, graphs.py:132), Var(chunk.1, graphs.py:130)])
on stmt: $140binary_subscr.35 = getitem(value=X, index=$134build_tuple.34, fn=<built-in function getitem>)
on stmt: $const144.36 = const(int, 1)
on stmt: $binop_lshift148.38 = $const144.36 << pos
on stmt: $152unary_invert.39 = unary(fn=<built-in function invert>, value=$binop_lshift148.38)
on stmt: $binop_iand154.40 = inplace_binop(fn=<built-in function iand>, immutable_fn=<built-in function and_>, lhs=$140binary_subscr.35, rhs=$152unary_invert.39, static_lhs=Undefined, static_rhs=Undefined)
on stmt: X[$134build_tuple.34] = $binop_iand154.40
on stmt: jump 22
==== SSA block rewrite pass on 168
Running <numba.core.ssa._FreshVarHandler object at 0x7dc5285368a0>
on stmt: $const170.2 = const(NoneType, None)
on stmt: $170return_const.3 = cast(value=$const170.2)
on stmt: return $170return_const.3
Replaced assignments: defaultdict(<class 'list'>,
            {26: [<numba.core.ir.Assign object at 0x7dc529fdc200>,
                  <numba.core.ir.Assign object at 0x7dc527cace30>]})
==== SSA block rewrite pass on 0
Running <numba.core.ssa._FixSSAVars object at 0x7dc527cac8f0>
on stmt: hypervectors = arg(0, name=hypervectors)
on stmt: hypervector_size = arg(1, name=hypervector_size)
on stmt: graph_index = arg(2, name=graph_index)
on stmt: node = arg(3, name=node)
on stmt: symbol = arg(4, name=symbol)
on stmt: X = arg(5, name=X)
on stmt: $const8.2 = const(NoneType, None)
on stmt: $const10.3 = const(NoneType, None)
on stmt: $12build_slice.4 = global(slice: <class 'slice'>)
on stmt: $12build_slice.5 = call $12build_slice.4($const8.2, $const10.3, func=$12build_slice.4, args=(Var($const8.2, graphs.py:124), Var($const10.3, graphs.py:124)), kws=(), vararg=None, varkwarg=None, target=None)
on stmt: $14build_tuple.6 = build_tuple(items=[Var(symbol, graphs.py:121), Var($12build_slice.5, graphs.py:124)])
on stmt: $16binary_subscr.7 = getitem(value=hypervectors, index=$14build_tuple.6, fn=<built-in function getitem>)
on stmt: $20get_iter.8 = getiter(value=$16binary_subscr.7)
on stmt: $phi22.0 = $20get_iter.8
on stmt: jump 22
==== SSA block rewrite pass on 22
Running <numba.core.ssa._FixSSAVars object at 0x7dc527cac8f0>
on stmt: $22for_iter.1 = iternext(value=$phi22.0)
on stmt: $22for_iter.2 = pair_first(value=$22for_iter.1)
on stmt: $22for_iter.3 = pair_second(value=$22for_iter.1)
on stmt: $phi26.1 = $22for_iter.2
on stmt: branch $22for_iter.3, 26, 168
==== SSA block rewrite pass on 26
Running <numba.core.ssa._FixSSAVars object at 0x7dc527cac8f0>
on stmt: k = $phi26.1
on stmt: $const30.3 = const(int, 32)
on stmt: chunk = k // $const30.3
on stmt: $const40.6 = const(int, 32)
on stmt: pos = k % $const40.6
on stmt: $binop_add54.11 = graph_index + node
on stmt: $60build_tuple.13 = build_tuple(items=[Var($binop_add54.11, graphs.py:128), Var(chunk, graphs.py:125)])
on stmt: $66binary_subscr.14 = getitem(value=X, index=$60build_tuple.13, fn=<built-in function getitem>)
on stmt: $const70.15 = const(int, 1)
on stmt: $binop_lshift74.17 = $const70.15 << pos
find_def var='pos' stmt=$binop_lshift74.17 = $const70.15 << pos
on stmt: $binop_ior78.18 = inplace_binop(fn=<built-in function ior>, immutable_fn=<built-in function or_>, lhs=$66binary_subscr.14, rhs=$binop_lshift74.17, static_lhs=Undefined, static_rhs=Undefined)
on stmt: X[$60build_tuple.13] = $binop_ior78.18
on stmt: $binop_add94.21 = k + hypervector_size
on stmt: $const98.22 = const(int, 32)
on stmt: chunk.1 = $binop_add94.21 // $const98.22
on stmt: $binop_add110.26 = k + hypervector_size
on stmt: $const114.27 = const(int, 32)
on stmt: pos.1 = $binop_add110.26 % $const114.27
on stmt: $binop_add128.32 = graph_index + node
on stmt: $134build_tuple.34 = build_tuple(items=[Var($binop_add128.32, graphs.py:132), Var(chunk.1, graphs.py:130)])
on stmt: $140binary_subscr.35 = getitem(value=X, index=$134build_tuple.34, fn=<built-in function getitem>)
on stmt: $const144.36 = const(int, 1)
on stmt: $binop_lshift148.38 = $const144.36 << pos
find_def var='pos' stmt=$binop_lshift148.38 = $const144.36 << pos
replaced with: $binop_lshift148.38 = $const144.36 << pos.1
on stmt: $152unary_invert.39 = unary(fn=<built-in function invert>, value=$binop_lshift148.38)
on stmt: $binop_iand154.40 = inplace_binop(fn=<built-in function iand>, immutable_fn=<built-in function and_>, lhs=$140binary_subscr.35, rhs=$152unary_invert.39, static_lhs=Undefined, static_rhs=Undefined)
on stmt: X[$134build_tuple.34] = $binop_iand154.40
on stmt: jump 22
==== SSA block rewrite pass on 168
Running <numba.core.ssa._FixSSAVars object at 0x7dc527cac8f0>
on stmt: $const170.2 = const(NoneType, None)
on stmt: $170return_const.3 = cast(value=$const170.2)
on stmt: return $170return_const.3
Creating test data
Epoch#1 -- Accuracy train: 0.6643333333333333 -- Accuracy test: 0.681 
Epoch#2 -- Accuracy train: 0.8656666666666667 -- Accuracy test: 0.88 
Epoch#3 -- Accuracy train: 0.8284444444444444 -- Accuracy test: 0.85 
Epoch#4 -- Accuracy train: 0.43133333333333335 -- Accuracy test: 0.423 
Epoch#5 -- Accuracy train: 0.772 -- Accuracy test: 0.786 
Epoch#6 -- Accuracy train: 0.7416666666666667 -- Accuracy test: 0.767 
Epoch#7 -- Accuracy train: 0.8611111111111112 -- Accuracy test: 0.869 
Epoch#8 -- Accuracy train: 0.7916666666666666 -- Accuracy test: 0.805 
Epoch#9 -- Accuracy train: 0.8028888888888889 -- Accuracy test: 0.817 
Epoch#10 -- Accuracy train: 0.8537777777777777 -- Accuracy test: 0.869 
Epoch#11 -- Accuracy train: 0.8718888888888889 -- Accuracy test: 0.866 
Epoch#12 -- Accuracy train: 0.8134444444444444 -- Accuracy test: 0.829 
Epoch#13 -- Accuracy train: 0.7933333333333333 -- Accuracy test: 0.807 
Epoch#14 -- Accuracy train: 0.8177777777777778 -- Accuracy test: 0.829 
Epoch#15 -- Accuracy train: 0.6992222222222222 -- Accuracy test: 0.701 
Epoch#16 -- Accuracy train: 0.7553333333333333 -- Accuracy test: 0.754 
Epoch#17 -- Accuracy train: 0.7888888888888889 -- Accuracy test: 0.787 
Epoch#18 -- Accuracy train: 0.7708888888888888 -- Accuracy test: 0.774 
Epoch#19 -- Accuracy train: 0.8094444444444444 -- Accuracy test: 0.805 
Epoch#20 -- Accuracy train: 0.6988888888888889 -- Accuracy test: 0.708 
Epoch#21 -- Accuracy train: 0.802 -- Accuracy test: 0.826 
Epoch#22 -- Accuracy train: 0.7842222222222223 -- Accuracy test: 0.786 
Epoch#23 -- Accuracy train: 0.8971111111111111 -- Accuracy test: 0.893 
Epoch#24 -- Accuracy train: 0.9074444444444445 -- Accuracy test: 0.909 
Epoch#25 -- Accuracy train: 0.9091111111111111 -- Accuracy test: 0.908 
Epoch#26 -- Accuracy train: 0.8314444444444444 -- Accuracy test: 0.832 
Epoch#27 -- Accuracy train: 0.8992222222222223 -- Accuracy test: 0.91 
Epoch#28 -- Accuracy train: 0.7304444444444445 -- Accuracy test: 0.743 
Epoch#29 -- Accuracy train: 0.82 -- Accuracy test: 0.816 
Epoch#30 -- Accuracy train: 0.3423333333333333 -- Accuracy test: 0.322 
Epoch#31 -- Accuracy train: 0.8206666666666667 -- Accuracy test: 0.829 
Epoch#32 -- Accuracy train: 0.7031111111111111 -- Accuracy test: 0.71 
Epoch#33 -- Accuracy train: 0.701 -- Accuracy test: 0.699 
Epoch#34 -- Accuracy train: 0.7252222222222222 -- Accuracy test: 0.733 
Epoch#35 -- Accuracy train: 0.8263333333333334 -- Accuracy test: 0.819 
Epoch#36 -- Accuracy train: 0.8467777777777777 -- Accuracy test: 0.845 
Epoch#37 -- Accuracy train: 0.7753333333333333 -- Accuracy test: 0.787 
Epoch#38 -- Accuracy train: 0.8646666666666667 -- Accuracy test: 0.869 
Epoch#39 -- Accuracy train: 0.8346666666666667 -- Accuracy test: 0.831 
Epoch#40 -- Accuracy train: 0.8632222222222222 -- Accuracy test: 0.868 
Epoch#41 -- Accuracy train: 0.9307777777777778 -- Accuracy test: 0.94 
Epoch#42 -- Accuracy train: 0.9436666666666667 -- Accuracy test: 0.945 
Epoch#43 -- Accuracy train: 0.9334444444444444 -- Accuracy test: 0.929 
Epoch#44 -- Accuracy train: 0.9325555555555556 -- Accuracy test: 0.945 
Epoch#45 -- Accuracy train: 0.9195555555555556 -- Accuracy test: 0.927 
Epoch#46 -- Accuracy train: 0.8704444444444445 -- Accuracy test: 0.883 
Epoch#47 -- Accuracy train: 0.8858888888888888 -- Accuracy test: 0.895 
Epoch#48 -- Accuracy train: 0.8403333333333334 -- Accuracy test: 0.861 
Epoch#49 -- Accuracy train: 0.9051111111111111 -- Accuracy test: 0.915 
Epoch#50 -- Accuracy train: 0.8971111111111111 -- Accuracy test: 0.897 
Epoch#51 -- Accuracy train: 0.899 -- Accuracy test: 0.911 
Epoch#52 -- Accuracy train: 0.8726666666666667 -- Accuracy test: 0.876 
Epoch#53 -- Accuracy train: 0.8477777777777777 -- Accuracy test: 0.859 
Epoch#54 -- Accuracy train: 0.8376666666666667 -- Accuracy test: 0.842 
Epoch#55 -- Accuracy train: 0.8175555555555556 -- Accuracy test: 0.83 
Epoch#56 -- Accuracy train: 0.875 -- Accuracy test: 0.899 
Epoch#57 -- Accuracy train: 0.9304444444444444 -- Accuracy test: 0.933 
Epoch#58 -- Accuracy train: 0.9288888888888889 -- Accuracy test: 0.941 
Epoch#59 -- Accuracy train: 0.9353333333333333 -- Accuracy test: 0.932 
Epoch#60 -- Accuracy train: 0.9501111111111111 -- Accuracy test: 0.945 
Epoch#61 -- Accuracy train: 0.9293333333333333 -- Accuracy test: 0.927 
Epoch#62 -- Accuracy train: 0.8774444444444445 -- Accuracy test: 0.887 
Epoch#63 -- Accuracy train: 0.9325555555555556 -- Accuracy test: 0.937 
Epoch#64 -- Accuracy train: 0.6563333333333333 -- Accuracy test: 0.678 
Epoch#65 -- Accuracy train: 0.7073333333333334 -- Accuracy test: 0.704 
Epoch#66 -- Accuracy train: 0.8585555555555555 -- Accuracy test: 0.856 
Epoch#67 -- Accuracy train: 0.9007777777777778 -- Accuracy test: 0.892 
Epoch#68 -- Accuracy train: 0.8208888888888889 -- Accuracy test: 0.828 
Epoch#69 -- Accuracy train: 0.7722222222222223 -- Accuracy test: 0.77 
Epoch#70 -- Accuracy train: 0.8217777777777778 -- Accuracy test: 0.82 
Epoch#71 -- Accuracy train: 0.7206666666666667 -- Accuracy test: 0.729 
Epoch#72 -- Accuracy train: 0.6855555555555556 -- Accuracy test: 0.71 
Epoch#73 -- Accuracy train: 0.7893333333333333 -- Accuracy test: 0.801 
Epoch#74 -- Accuracy train: 0.7374444444444445 -- Accuracy test: 0.747 
Epoch#75 -- Accuracy train: 0.8734444444444445 -- Accuracy test: 0.883 
Epoch#76 -- Accuracy train: 0.8291111111111111 -- Accuracy test: 0.833 
Epoch#77 -- Accuracy train: 0.6836666666666666 -- Accuracy test: 0.691 
Epoch#78 -- Accuracy train: 0.6904444444444444 -- Accuracy test: 0.692 
Epoch#79 -- Accuracy train: 0.6971111111111111 -- Accuracy test: 0.719 
Epoch#80 -- Accuracy train: 0.7168888888888889 -- Accuracy test: 0.743 
Epoch#81 -- Accuracy train: 0.7387777777777778 -- Accuracy test: 0.76 
Epoch#82 -- Accuracy train: 0.7061111111111111 -- Accuracy test: 0.703 
Epoch#83 -- Accuracy train: 0.8168888888888889 -- Accuracy test: 0.841 
Epoch#84 -- Accuracy train: 0.8026666666666666 -- Accuracy test: 0.82 
Epoch#85 -- Accuracy train: 0.8632222222222222 -- Accuracy test: 0.868 
Epoch#86 -- Accuracy train: 0.7244444444444444 -- Accuracy test: 0.737 
Epoch#87 -- Accuracy train: 0.8422222222222222 -- Accuracy test: 0.849 
Epoch#88 -- Accuracy train: 0.8675555555555555 -- Accuracy test: 0.882 
Epoch#89 -- Accuracy train: 0.8047777777777778 -- Accuracy test: 0.823 
Epoch#90 -- Accuracy train: 0.42677777777777776 -- Accuracy test: 0.414 
Epoch#91 -- Accuracy train: 0.7495555555555555 -- Accuracy test: 0.743 
Epoch#92 -- Accuracy train: 0.8112222222222222 -- Accuracy test: 0.807 
Epoch#93 -- Accuracy train: 0.899 -- Accuracy test: 0.907 
Epoch#94 -- Accuracy train: 0.9052222222222223 -- Accuracy test: 0.913 
Epoch#95 -- Accuracy train: 0.8224444444444444 -- Accuracy test: 0.832 
Epoch#96 -- Accuracy train: 0.8371111111111111 -- Accuracy test: 0.834 
Epoch#97 -- Accuracy train: 0.9092222222222223 -- Accuracy test: 0.913 
Epoch#98 -- Accuracy train: 0.8177777777777778 -- Accuracy test: 0.827 
Epoch#99 -- Accuracy train: 0.6816666666666666 -- Accuracy test: 0.687 
Epoch#100 -- Accuracy train: 0.8728888888888889 -- Accuracy test: 0.878 
Epoch#101 -- Accuracy train: 0.8766666666666667 -- Accuracy test: 0.879 
Epoch#102 -- Accuracy train: 0.7404444444444445 -- Accuracy test: 0.747 
Epoch#103 -- Accuracy train: 0.837 -- Accuracy test: 0.853 
Epoch#104 -- Accuracy train: 0.7901111111111111 -- Accuracy test: 0.802 
Epoch#105 -- Accuracy train: 0.8294444444444444 -- Accuracy test: 0.83 
Epoch#106 -- Accuracy train: 0.6931111111111111 -- Accuracy test: 0.708 
Epoch#107 -- Accuracy train: 0.8196666666666667 -- Accuracy test: 0.836 
Epoch#108 -- Accuracy train: 0.7364444444444445 -- Accuracy test: 0.736 
Epoch#109 -- Accuracy train: 0.6651111111111111 -- Accuracy test: 0.675 
Epoch#110 -- Accuracy train: 0.7957777777777778 -- Accuracy test: 0.816 
Epoch#111 -- Accuracy train: 0.6845555555555556 -- Accuracy test: 0.686 
Epoch#112 -- Accuracy train: 0.7758888888888889 -- Accuracy test: 0.78 
Epoch#113 -- Accuracy train: 0.7681111111111111 -- Accuracy test: 0.788 
Epoch#114 -- Accuracy train: 0.8576666666666667 -- Accuracy test: 0.874 
Epoch#115 -- Accuracy train: 0.8333333333333334 -- Accuracy test: 0.831 
Epoch#116 -- Accuracy train: 0.8774444444444445 -- Accuracy test: 0.884 
Epoch#117 -- Accuracy train: 0.9116666666666666 -- Accuracy test: 0.914 
Epoch#118 -- Accuracy train: 0.8497777777777777 -- Accuracy test: 0.863 
Epoch#119 -- Accuracy train: 0.6902222222222222 -- Accuracy test: 0.71 
Epoch#120 -- Accuracy train: 0.6852222222222222 -- Accuracy test: 0.692 
Epoch#121 -- Accuracy train: 0.708 -- Accuracy test: 0.708 
Epoch#122 -- Accuracy train: 0.6676666666666666 -- Accuracy test: 0.667 
Epoch#123 -- Accuracy train: 0.8167777777777778 -- Accuracy test: 0.833 
Epoch#124 -- Accuracy train: 0.687 -- Accuracy test: 0.704 
Epoch#125 -- Accuracy train: 0.6562222222222223 -- Accuracy test: 0.669 
Epoch#126 -- Accuracy train: 0.7467777777777778 -- Accuracy test: 0.75 
Epoch#127 -- Accuracy train: 0.6995555555555556 -- Accuracy test: 0.701 
Epoch#128 -- Accuracy train: 0.6342222222222222 -- Accuracy test: 0.626 
Epoch#129 -- Accuracy train: 0.7962222222222223 -- Accuracy test: 0.8 
Epoch#130 -- Accuracy train: 0.811 -- Accuracy test: 0.825 
Epoch#131 -- Accuracy train: 0.6925555555555556 -- Accuracy test: 0.707 
Epoch#132 -- Accuracy train: 0.6674444444444444 -- Accuracy test: 0.677 
Epoch#133 -- Accuracy train: 0.7108888888888889 -- Accuracy test: 0.7 
Epoch#134 -- Accuracy train: 0.8262222222222222 -- Accuracy test: 0.827 
Epoch#135 -- Accuracy train: 0.6228888888888889 -- Accuracy test: 0.638 
Epoch#136 -- Accuracy train: 0.6106666666666667 -- Accuracy test: 0.601 
Epoch#137 -- Accuracy train: 0.7845555555555556 -- Accuracy test: 0.799 
Epoch#138 -- Accuracy train: 0.6643333333333333 -- Accuracy test: 0.681 
Epoch#139 -- Accuracy train: 0.776 -- Accuracy test: 0.794 
Epoch#140 -- Accuracy train: 0.7585555555555555 -- Accuracy test: 0.777 
Epoch#141 -- Accuracy train: 0.7876666666666666 -- Accuracy test: 0.801 
Epoch#142 -- Accuracy train: 0.7921111111111111 -- Accuracy test: 0.811 
Epoch#143 -- Accuracy train: 0.7416666666666667 -- Accuracy test: 0.767 
Epoch#144 -- Accuracy train: 0.8763333333333333 -- Accuracy test: 0.891 
Epoch#145 -- Accuracy train: 0.8511111111111112 -- Accuracy test: 0.865 
Epoch#146 -- Accuracy train: 0.7852222222222223 -- Accuracy test: 0.802 
Epoch#147 -- Accuracy train: 0.6897777777777778 -- Accuracy test: 0.705 
Epoch#148 -- Accuracy train: 0.8451111111111111 -- Accuracy test: 0.848 
Epoch#149 -- Accuracy train: 0.6402222222222222 -- Accuracy test: 0.645 
Epoch#150 -- Accuracy train: 0.7904444444444444 -- Accuracy test: 0.797 
Time: 4237.835685968399
Clause #0 W:(26 5) 
Number of literals: 0
Clause #1 W:(14 11) 
Number of literals: 0
Clause #2 W:(-8 -16) NOT x247
Number of literals: 1
Clause #3 W:(-5 13) NOT x209 AND NOT x312 AND NOT x504
Number of literals: 3
Clause #4 W:(9 20) NOT x196 AND NOT x257 AND NOT x364
Number of literals: 3
Clause #5 W:(-6 -27) 
Number of literals: 0
Clause #6 W:(-15 -9) NOT x462
Number of literals: 1
Clause #7 W:(-36 -29) 
Number of literals: 0
Clause #8 W:(8 10) 
Number of literals: 0
Clause #9 W:(-27 -5) NOT x453 AND NOT x487
Number of literals: 2
Clause #10 W:(0 1) 
Number of literals: 0
Clause #11 W:(-28 33) NOT x273
Number of literals: 1
Clause #12 W:(70 69) NOT x70 AND NOT x99 AND NOT x172
Number of literals: 3
Clause #13 W:(2 19) NOT x372
Number of literals: 1
Clause #14 W:(37 -6) 
Number of literals: 0
Clause #15 W:(-34 -2) NOT x322 AND NOT x326
Number of literals: 2
Clause #16 W:(4 11) 
Number of literals: 0
Clause #17 W:(-1 -7) NOT x274
Number of literals: 1
Clause #18 W:(-11 -39) 
Number of literals: 0
Clause #19 W:(37 53) NOT x256 AND NOT x456
Number of literals: 2
Clause #20 W:(-22 -11) NOT x167
Number of literals: 1
Clause #21 W:(15 -16) 
Number of literals: 0
Clause #22 W:(15 25) 
Number of literals: 0
Clause #23 W:(2 6) NOT x116
Number of literals: 1
Clause #24 W:(-126 -45) NOT x189
Number of literals: 1
Clause #25 W:(0 -15) 
Number of literals: 0
Clause #26 W:(-12 -3) x3
Number of literals: 1
Clause #27 W:(25 -17) 
Number of literals: 0
Clause #28 W:(-15 -22) NOT x208 AND NOT x380
Number of literals: 2
Clause #29 W:(-23 3) 
Number of literals: 0
Clause #30 W:(10 -14) NOT x479
Number of literals: 1
Clause #31 W:(-1 -18) 
Number of literals: 0
Clause #32 W:(8 -17) 
Number of literals: 0
Clause #33 W:(56 44) NOT x263 AND NOT x350 AND NOT x458
Number of literals: 3
Clause #34 W:(-36 -9) 
Number of literals: 0
Clause #35 W:(-17 -42) 
Number of literals: 0
Clause #36 W:(-21 4) NOT x273 AND NOT x334 AND NOT x406
Number of literals: 3
Clause #37 W:(-43 24) NOT x55
Number of literals: 1
Clause #38 W:(-20 -37) 
Number of literals: 0
Clause #39 W:(32 37) NOT x5 AND NOT x435
Number of literals: 2
Clause #40 W:(-56 -20) 
Number of literals: 0
Clause #41 W:(33 -53) 
Number of literals: 0
Clause #42 W:(16 -47) NOT x314 AND NOT x447
Number of literals: 2
Clause #43 W:(0 -31) 
Number of literals: 0
Clause #44 W:(-2 -16) NOT x273 AND NOT x325
Number of literals: 2
Clause #45 W:(-25 7) NOT x263 AND NOT x406
Number of literals: 2
Clause #46 W:(-25 -11) NOT x276
Number of literals: 1
Clause #47 W:(-4 23) NOT x106 AND NOT x273 AND NOT x274
Number of literals: 3
Clause #48 W:(-19 -27) NOT x38
Number of literals: 1
Clause #49 W:(-10 -48) 
Number of literals: 0
Clause #50 W:(17 8) NOT x212 AND NOT x219
Number of literals: 2
Clause #51 W:(-7 16) 
Number of literals: 0
Clause #52 W:(-8 1) 
Number of literals: 0
Clause #53 W:(-18 -1) 
Number of literals: 0
Clause #54 W:(8 6) NOT x126 AND NOT x278
Number of literals: 2
Clause #55 W:(36 10) 
Number of literals: 0
Clause #56 W:(-32 23) 
Number of literals: 0
Clause #57 W:(65 -41) NOT x243 AND NOT x484
Number of literals: 2
Clause #58 W:(-14 -5) 
Number of literals: 0
Clause #59 W:(29 47) 
Number of literals: 0
Clause #60 W:(52 -29) x273 AND NOT x195
Number of literals: 2
Clause #61 W:(-18 4) 
Number of literals: 0
Clause #62 W:(10 -16) 
Number of literals: 0
Clause #63 W:(42 2) NOT x417
Number of literals: 1
Clause #64 W:(30 12) 
Number of literals: 0
Clause #65 W:(-11 -12) NOT x202
Number of literals: 1
Clause #66 W:(-21 9) NOT x253
Number of literals: 1
Clause #67 W:(-46 -1) x14 AND NOT x14
Number of literals: 2
Clause #68 W:(-39 -33) NOT x241
Number of literals: 1
Clause #69 W:(-34 -36) NOT x394 AND NOT x426 AND NOT x469
Number of literals: 3
Clause #70 W:(-30 24) 
Number of literals: 0
Clause #71 W:(-20 -67) NOT x155
Number of literals: 1
Clause #72 W:(86 17) NOT x167
Number of literals: 1
Clause #73 W:(25 20) NOT x389 AND NOT x480
Number of literals: 2
Clause #74 W:(-1 15) NOT x26 AND NOT x195
Number of literals: 2
Clause #75 W:(6 -13) 
Number of literals: 0
Clause #76 W:(-2 -1) NOT x326
Number of literals: 1
Clause #77 W:(18 4) NOT x25
Number of literals: 1
Clause #78 W:(-24 -8) 
Number of literals: 0
Clause #79 W:(-28 -6) NOT x253
Number of literals: 1
Clause #80 W:(-8 -8) 
Number of literals: 0
Clause #81 W:(11 -25) 
Number of literals: 0
Clause #82 W:(49 35) 
Number of literals: 0
Clause #83 W:(8 -27) 
Number of literals: 0
Clause #84 W:(-20 16) NOT x208 AND NOT x291
Number of literals: 2
Clause #85 W:(24 7) NOT x224
Number of literals: 1
Clause #86 W:(-24 -17) NOT x318 AND NOT x328 AND NOT x339 AND NOT x412 AND NOT x425
Number of literals: 5
Clause #87 W:(54 23) NOT x47 AND NOT x164
Number of literals: 2
Clause #88 W:(58 7) NOT x328
Number of literals: 1
Clause #89 W:(-6 22) NOT x51 AND NOT x344
Number of literals: 2
Clause #90 W:(-9 -10) 
Number of literals: 0
Clause #91 W:(-46 0) 
Number of literals: 0
Clause #92 W:(-43 -6) NOT x77
Number of literals: 1
Clause #93 W:(-157 143) NOT x195 AND NOT x237 AND NOT x398
Number of literals: 3
Clause #94 W:(-13 -25) NOT x3 AND NOT x480 AND NOT x491
Number of literals: 3
Clause #95 W:(-19 -21) NOT x207
Number of literals: 1
Clause #96 W:(3 34) NOT x136 AND NOT x138
Number of literals: 2
Clause #97 W:(10 -43) NOT x77 AND NOT x90 AND NOT x506
Number of literals: 3
Clause #98 W:(-9 -20) 
Number of literals: 0
Clause #99 W:(-43 -25) 
Number of literals: 0
Clause #100 W:(-31 -9) NOT x273
Number of literals: 1
Clause #101 W:(-45 24) NOT x303
Number of literals: 1
Clause #102 W:(-10 -27) NOT x450
Number of literals: 1
Clause #103 W:(56 -7) NOT x18 AND NOT x227 AND NOT x305 AND NOT x327
Number of literals: 4
Clause #104 W:(11 -9) NOT x358
Number of literals: 1
Clause #105 W:(0 7) NOT x77 AND NOT x329 AND NOT x427
Number of literals: 3
Clause #106 W:(-22 -8) x273
Number of literals: 1
Clause #107 W:(28 54) 
Number of literals: 0
Clause #108 W:(18 -3) 
Number of literals: 0
Clause #109 W:(0 -2) NOT x445 AND NOT x467
Number of literals: 2
Clause #110 W:(9 33) NOT x426
Number of literals: 1
Clause #111 W:(-27 21) NOT x419
Number of literals: 1
Clause #112 W:(17 21) 
Number of literals: 0
Clause #113 W:(-36 -11) NOT x139 AND NOT x220 AND NOT x303
Number of literals: 3
Clause #114 W:(4 11) 
Number of literals: 0
Clause #115 W:(41 -35) 
Number of literals: 0
Clause #116 W:(-5 3) 
Number of literals: 0
Clause #117 W:(25 7) x273
Number of literals: 1
Clause #118 W:(-8 22) NOT x82
Number of literals: 1
Clause #119 W:(21 21) NOT x166 AND NOT x315
Number of literals: 2
Clause #120 W:(-89 -15) 
Number of literals: 0
Clause #121 W:(17 -23) 
Number of literals: 0
Clause #122 W:(12 27) NOT x495
Number of literals: 1
Clause #123 W:(10 22) NOT x158 AND NOT x505
Number of literals: 2
Clause #124 W:(0 52) 
Number of literals: 0
Clause #125 W:(27 16) NOT x35
Number of literals: 1
Clause #126 W:(-13 13) NOT x207 AND NOT x241 AND NOT x273
Number of literals: 3
Clause #127 W:(1 91) NOT x26 AND NOT x305
Number of literals: 2
Clause #128 W:(-29 3) NOT x25 AND NOT x273
Number of literals: 2
Clause #129 W:(-2 18) NOT x273
Number of literals: 1
Clause #130 W:(-33 -31) NOT x477
Number of literals: 1
Clause #131 W:(64 -8) NOT x230
Number of literals: 1
Clause #132 W:(5 31) 
Number of literals: 0
Clause #133 W:(-9 27) NOT x486
Number of literals: 1
Clause #134 W:(9 18) 
Number of literals: 0
Clause #135 W:(27 -23) NOT x87 AND NOT x150 AND NOT x499
Number of literals: 3
Clause #136 W:(-30 -1) NOT x49
Number of literals: 1
Clause #137 W:(17 22) NOT x243
Number of literals: 1
Clause #138 W:(15 -32) 
Number of literals: 0
Clause #139 W:(-5 -74) NOT x236
Number of literals: 1
Clause #140 W:(25 -3) NOT x25 AND NOT x437
Number of literals: 2
Clause #141 W:(-13 44) 
Number of literals: 0
Clause #142 W:(14 -64) NOT x98
Number of literals: 1
Clause #143 W:(-5 -6) NOT x87
Number of literals: 1
Clause #144 W:(-4 44) NOT x187 AND NOT x232
Number of literals: 2
Clause #145 W:(52 -60) NOT x234
Number of literals: 1
Clause #146 W:(14 23) NOT x113 AND NOT x222
Number of literals: 2
Clause #147 W:(0 -9) NOT x347
Number of literals: 1
Clause #148 W:(-18 -62) NOT x142 AND NOT x231 AND NOT x504
Number of literals: 3
Clause #149 W:(7 -12) NOT x208 AND NOT x273 AND NOT x274
Number of literals: 3
Clause #150 W:(19 -5) 
Number of literals: 0
Clause #151 W:(153 -133) NOT x56 AND NOT x368 AND NOT x446
Number of literals: 3
Clause #152 W:(2 -1) 
Number of literals: 0
Clause #153 W:(-17 9) NOT x86 AND NOT x179 AND NOT x273
Number of literals: 3
Clause #154 W:(0 1) NOT x291
Number of literals: 1
Clause #155 W:(4 3) NOT x367 AND NOT x372
Number of literals: 2
Clause #156 W:(-37 -11) NOT x14 AND NOT x299
Number of literals: 2
Clause #157 W:(-57 -62) NOT x94
Number of literals: 1
Clause #158 W:(13 -9) x273 AND NOT x11
Number of literals: 2
Clause #159 W:(-21 10) 
Number of literals: 0
Clause #160 W:(36 -7) NOT x357
Number of literals: 1
Clause #161 W:(-8 -7) NOT x507
Number of literals: 1
Clause #162 W:(3 16) NOT x415
Number of literals: 1
Clause #163 W:(0 -2) NOT x298 AND NOT x448
Number of literals: 2
Clause #164 W:(4 -50) 
Number of literals: 0
Clause #165 W:(-18 38) 
Number of literals: 0
Clause #166 W:(78 -7) NOT x372 AND NOT x499
Number of literals: 2
Clause #167 W:(30 38) NOT x262
Number of literals: 1
Clause #168 W:(17 -13) NOT x129 AND NOT x209
Number of literals: 2
Clause #169 W:(-60 33) NOT x213
Number of literals: 1
Clause #170 W:(-51 52) NOT x289
Number of literals: 1
Clause #171 W:(-36 -16) 
Number of literals: 0
Clause #172 W:(10 5) NOT x484
Number of literals: 1
Clause #173 W:(-68 -20) NOT x448
Number of literals: 1
Clause #174 W:(-22 -12) NOT x1 AND NOT x244
Number of literals: 2
Clause #175 W:(4 43) NOT x260 AND NOT x474 AND NOT x477
Number of literals: 3
Clause #176 W:(16 -13) 
Number of literals: 0
Clause #177 W:(16 -4) 
Number of literals: 0
Clause #178 W:(50 -50) NOT x224 AND NOT x356
Number of literals: 2
Clause #179 W:(38 -2) NOT x354 AND NOT x377
Number of literals: 2
Clause #180 W:(-17 -39) NOT x295
Number of literals: 1
Clause #181 W:(13 18) NOT x337
Number of literals: 1
Clause #182 W:(19 54) 
Number of literals: 0
Clause #183 W:(17 13) 
Number of literals: 0
Clause #184 W:(-3 10) 
Number of literals: 0
Clause #185 W:(0 -1) NOT x358
Number of literals: 1
Clause #186 W:(-38 25) 
Number of literals: 0
Clause #187 W:(36 -11) 
Number of literals: 0
Clause #188 W:(-19 -18) x273
Number of literals: 1
Clause #189 W:(424 -439) x77 AND NOT x169
Number of literals: 2
Clause #190 W:(27 20) 
Number of literals: 0
Clause #191 W:(41 -31) 
Number of literals: 0
Clause #192 W:(-15 -80) 
Number of literals: 0
Clause #193 W:(-45 -51) NOT x318
Number of literals: 1
Clause #194 W:(-42 35) NOT x172 AND NOT x269 AND NOT x273
Number of literals: 3
Clause #195 W:(10 -8) NOT x187 AND NOT x316
Number of literals: 2
Clause #196 W:(-44 20) NOT x56 AND NOT x449
Number of literals: 2
Clause #197 W:(-12 -30) 
Number of literals: 0
Clause #198 W:(-13 32) NOT x382
Number of literals: 1
Clause #199 W:(62 -15) NOT x307 AND NOT x445
Number of literals: 2
Clause #200 W:(-9 26) NOT x273
Number of literals: 1
Clause #201 W:(-51 -62) 
Number of literals: 0
Clause #202 W:(3 -29) 
Number of literals: 0
Clause #203 W:(-37 -1) NOT x9
Number of literals: 1
Clause #204 W:(3 14) NOT x310
Number of literals: 1
Clause #205 W:(34 22) 
Number of literals: 0
Clause #206 W:(-48 -6) NOT x28 AND NOT x51
Number of literals: 2
Clause #207 W:(-6 -29) NOT x354
Number of literals: 1
Clause #208 W:(-7 23) NOT x11 AND NOT x491
Number of literals: 2
Clause #209 W:(-12 30) NOT x39 AND NOT x357
Number of literals: 2
Clause #210 W:(-7 -1) 
Number of literals: 0
Clause #211 W:(13 9) NOT x48 AND NOT x328 AND NOT x451
Number of literals: 3
Clause #212 W:(-2 4) 
Number of literals: 0
Clause #213 W:(-10 0) 
Number of literals: 0
Clause #214 W:(-9 -10) 
Number of literals: 0
Clause #215 W:(57 27) NOT x278
Number of literals: 1
Clause #216 W:(-25 4) NOT x501
Number of literals: 1
Clause #217 W:(-37 21) NOT x179 AND NOT x208 AND NOT x273 AND NOT x463
Number of literals: 4
Clause #218 W:(-18 26) NOT x2 AND NOT x225
Number of literals: 2
Clause #219 W:(-52 -1) NOT x468
Number of literals: 1
Clause #220 W:(30 23) NOT x324 AND NOT x477
Number of literals: 2
Clause #221 W:(-11 -61) NOT x140 AND NOT x474
Number of literals: 2
Clause #222 W:(54 -44) NOT x324
Number of literals: 1
Clause #223 W:(-58 -40) NOT x160 AND NOT x400 AND NOT x407
Number of literals: 3
Clause #224 W:(6 17) 
Number of literals: 0
Clause #225 W:(-20 3) NOT x61 AND NOT x273 AND NOT x318 AND NOT x357
Number of literals: 4
Clause #226 W:(-17 25) NOT x15
Number of literals: 1
Clause #227 W:(15 10) NOT x384
Number of literals: 1
Clause #228 W:(-27 70) 
Number of literals: 0
Clause #229 W:(-11 -12) NOT x387 AND NOT x397 AND NOT x398
Number of literals: 3
Clause #230 W:(46 43) NOT x23 AND NOT x395
Number of literals: 2
Clause #231 W:(-25 -17) NOT x347
Number of literals: 1
Clause #232 W:(44 13) 
Number of literals: 0
Clause #233 W:(35 38) NOT x198 AND NOT x353
Number of literals: 2
Clause #234 W:(-16 47) 
Number of literals: 0
Clause #235 W:(-8 4) 
Number of literals: 0
Clause #236 W:(7 -4) 
Number of literals: 0
Clause #237 W:(-19 30) 
Number of literals: 0
Clause #238 W:(-7 11) NOT x183
Number of literals: 1
Clause #239 W:(-8 19) NOT x382
Number of literals: 1
Clause #240 W:(-3 -13) NOT x191 AND NOT x425
Number of literals: 2
Clause #241 W:(0 34) 
Number of literals: 0
Clause #242 W:(-42 12) NOT x293 AND NOT x447 AND NOT x508
Number of literals: 3
Clause #243 W:(11 34) NOT x68
Number of literals: 1
Clause #244 W:(-7 -35) NOT x163 AND NOT x262 AND NOT x313
Number of literals: 3
Clause #245 W:(5 94) NOT x180 AND NOT x316
Number of literals: 2
Clause #246 W:(-9 6) NOT x405
Number of literals: 1
Clause #247 W:(3 47) NOT x84 AND NOT x125
Number of literals: 2
Clause #248 W:(-29 -31) 
Number of literals: 0
Clause #249 W:(-17 5) NOT x230 AND NOT x324
Number of literals: 2
Clause #250 W:(29 -24) NOT x77 AND NOT x448
Number of literals: 2
Clause #251 W:(43 -2) NOT x509
Number of literals: 1
Clause #252 W:(69 20) NOT x12 AND NOT x100 AND NOT x205 AND NOT x253
Number of literals: 4
Clause #253 W:(21 21) NOT x159 AND NOT x267 AND NOT x478
Number of literals: 3
Clause #254 W:(-12 23) NOT x275
Number of literals: 1
Clause #255 W:(-9 -3) NOT x451
Number of literals: 1
Clause #256 W:(15 6) NOT x73 AND NOT x113 AND NOT x240
Number of literals: 3
Clause #257 W:(-1 -13) NOT x286
Number of literals: 1
Clause #258 W:(15 -18) NOT x258
Number of literals: 1
Clause #259 W:(-16 -2) NOT x51 AND NOT x266
Number of literals: 2
Clause #260 W:(12 -21) x273
Number of literals: 1
Clause #261 W:(-6 9) 
Number of literals: 0
Clause #262 W:(29 13) NOT x64 AND NOT x145
Number of literals: 2
Clause #263 W:(27 -49) NOT x6 AND NOT x238 AND NOT x273
Number of literals: 3
Clause #264 W:(-5 48) NOT x273 AND NOT x501
Number of literals: 2
Clause #265 W:(0 -8) NOT x154
Number of literals: 1
Clause #266 W:(-11 -2) x273 AND NOT x100 AND NOT x107 AND NOT x398
Number of literals: 4
Clause #267 W:(-30 -12) 
Number of literals: 0
Clause #268 W:(-4 13) NOT x262
Number of literals: 1
Clause #269 W:(16 3) NOT x161 AND NOT x244 AND NOT x349 AND NOT x365
Number of literals: 4
Clause #270 W:(18 -11) NOT x39 AND NOT x216 AND NOT x356
Number of literals: 3
Clause #271 W:(0 -1) NOT x366
Number of literals: 1
Clause #272 W:(-2 0) 
Number of literals: 0
Clause #273 W:(43 -6) 
Number of literals: 0
Clause #274 W:(15 -2) NOT x105 AND NOT x110
Number of literals: 2
Clause #275 W:(-19 -33) NOT x466
Number of literals: 1
Clause #276 W:(-55 26) NOT x281 AND NOT x341 AND NOT x397 AND NOT x398
Number of literals: 4
Clause #277 W:(12 28) NOT x35
Number of literals: 1
Clause #278 W:(-7 19) NOT x373 AND NOT x381
Number of literals: 2
Clause #279 W:(-2 5) NOT x89 AND NOT x296 AND NOT x448
Number of literals: 3
Clause #280 W:(12 52) NOT x273 AND NOT x348
Number of literals: 2
Clause #281 W:(-3 36) 
Number of literals: 0
Clause #282 W:(1 -7) NOT x373
Number of literals: 1
Clause #283 W:(-21 18) 
Number of literals: 0
Clause #284 W:(36 68) NOT x458
Number of literals: 1
Clause #285 W:(53 -26) 
Number of literals: 0
Clause #286 W:(-2 11) 
Number of literals: 0
Clause #287 W:(2 -12) NOT x488
Number of literals: 1
Clause #288 W:(-4 -39) NOT x354
Number of literals: 1
Clause #289 W:(-37 -35) NOT x485
Number of literals: 1
Clause #290 W:(1 1) 
Number of literals: 0
Clause #291 W:(3 20) 
Number of literals: 0
Clause #292 W:(0 3) NOT x199 AND NOT x208 AND NOT x273
Number of literals: 3
Clause #293 W:(2 5) 
Number of literals: 0
Clause #294 W:(17 -37) NOT x77
Number of literals: 1
Clause #295 W:(-7 -1) NOT x85 AND NOT x130
Number of literals: 2
Clause #296 W:(-3 -3) NOT x367
Number of literals: 1
Clause #297 W:(22 7) NOT x102 AND NOT x390
Number of literals: 2
Clause #298 W:(35 -13) 
Number of literals: 0
Clause #299 W:(198 -225) x77 AND NOT x273 AND NOT x451
Number of literals: 3
Clause #300 W:(2 0) NOT x173 AND NOT x357
Number of literals: 2
Clause #301 W:(-6 -3) NOT x219 AND NOT x398 AND NOT x511
Number of literals: 3
Clause #302 W:(2 -94) NOT x398
Number of literals: 1
Clause #303 W:(6 8) NOT x71 AND NOT x225 AND NOT x273 AND NOT x470
Number of literals: 4
Clause #304 W:(-57 12) NOT x345 AND NOT x376 AND NOT x470
Number of literals: 3
Clause #305 W:(-37 -33) NOT x181 AND NOT x311 AND NOT x397
Number of literals: 3
Clause #306 W:(0 -3) NOT x257
Number of literals: 1
Clause #307 W:(13 18) NOT x339 AND NOT x400 AND NOT x401
Number of literals: 3
Clause #308 W:(26 -27) NOT x472 AND NOT x491
Number of literals: 2
Clause #309 W:(6 -3) NOT x128 AND NOT x508
Number of literals: 2
Clause #310 W:(31 57) NOT x355
Number of literals: 1
Clause #311 W:(-98 45) NOT x66
Number of literals: 1
Clause #312 W:(28 -12) NOT x349 AND NOT x383
Number of literals: 2
Clause #313 W:(-15 23) 
Number of literals: 0
Clause #314 W:(-12 53) NOT x95 AND NOT x144
Number of literals: 2
Clause #315 W:(-17 21) NOT x184 AND NOT x334
Number of literals: 2
Clause #316 W:(0 27) NOT x363 AND NOT x497
Number of literals: 2
Clause #317 W:(-6 -5) 
Number of literals: 0
Clause #318 W:(6 7) NOT x110 AND NOT x389
Number of literals: 2
Clause #319 W:(-36 -11) 
Number of literals: 0
Clause #320 W:(-1 -5) 
Number of literals: 0
Clause #321 W:(38 -6) 
Number of literals: 0
Clause #322 W:(-62 62) NOT x138 AND NOT x334
Number of literals: 2
Clause #323 W:(-70 -9) NOT x97
Number of literals: 1
Clause #324 W:(-29 18) NOT x273 AND NOT x479
Number of literals: 2
Clause #325 W:(29 3) NOT x29 AND NOT x87
Number of literals: 2
Clause #326 W:(-33 6) NOT x240 AND NOT x423
Number of literals: 2
Clause #327 W:(23 -15) 
Number of literals: 0
Clause #328 W:(4 0) 
Number of literals: 0
Clause #329 W:(15 59) NOT x187 AND NOT x465 AND NOT x479
Number of literals: 3
Clause #330 W:(2 8) NOT x122
Number of literals: 1
Clause #331 W:(-7 16) 
Number of literals: 0
Clause #332 W:(2 19) NOT x273
Number of literals: 1
Clause #333 W:(26 -1) 
Number of literals: 0
Clause #334 W:(33 45) NOT x282 AND NOT x354 AND NOT x511
Number of literals: 3
Clause #335 W:(24 80) NOT x99
Number of literals: 1
Clause #336 W:(-7 16) 
Number of literals: 0
Clause #337 W:(0 -3) 
Number of literals: 0
Clause #338 W:(16 30) NOT x407
Number of literals: 1
Clause #339 W:(-33 53) 
Number of literals: 0
Clause #340 W:(-26 1) 
Number of literals: 0
Clause #341 W:(20 -43) NOT x442
Number of literals: 1
Clause #342 W:(-53 37) NOT x343 AND NOT x407
Number of literals: 2
Clause #343 W:(6 13) x398 AND NOT x305
Number of literals: 2
Clause #344 W:(31 -46) 
Number of literals: 0
Clause #345 W:(37 33) NOT x459 AND NOT x463
Number of literals: 2
Clause #346 W:(-1 9) NOT x273 AND NOT x403
Number of literals: 2
Clause #347 W:(14 45) 
Number of literals: 0
Clause #348 W:(43 15) NOT x94 AND NOT x282
Number of literals: 2
Clause #349 W:(2 33) NOT x25 AND NOT x347
Number of literals: 2
Clause #350 W:(-15 -2) 
Number of literals: 0
Clause #351 W:(-6 -2) 
Number of literals: 0
Clause #352 W:(-29 -7) 
Number of literals: 0
Clause #353 W:(-9 23) NOT x451
Number of literals: 1
Clause #354 W:(32 1) NOT x226 AND NOT x232 AND NOT x381
Number of literals: 3
Clause #355 W:(4 -48) NOT x277
Number of literals: 1
Clause #356 W:(-38 -44) NOT x351 AND NOT x385
Number of literals: 2
Clause #357 W:(-26 -61) NOT x202
Number of literals: 1
Clause #358 W:(-36 21) NOT x229 AND NOT x337
Number of literals: 2
Clause #359 W:(9 -18) NOT x374
Number of literals: 1
Clause #360 W:(6 35) NOT x8 AND NOT x331
Number of literals: 2
Clause #361 W:(16 32) NOT x398
Number of literals: 1
Clause #362 W:(-32 -49) NOT x439
Number of literals: 1
Clause #363 W:(9 -40) NOT x44 AND NOT x60
Number of literals: 2
Clause #364 W:(0 0) NOT x254 AND NOT x385
Number of literals: 2
Clause #365 W:(-44 -5) NOT x288
Number of literals: 1
Clause #366 W:(45 40) 
Number of literals: 0
Clause #367 W:(19 23) 
Number of literals: 0
Clause #368 W:(23 60) NOT x68 AND NOT x310
Number of literals: 2
Clause #369 W:(33 2) NOT x359 AND NOT x406 AND NOT x413
Number of literals: 3
Clause #370 W:(-52 -43) NOT x258
Number of literals: 1
Clause #371 W:(0 -20) NOT x14 AND NOT x439
Number of literals: 2
Clause #372 W:(-37 -50) NOT x234
Number of literals: 1
Clause #373 W:(-9 -1) NOT x65
Number of literals: 1
Clause #374 W:(-47 -42) NOT x111 AND NOT x442 AND NOT x505
Number of literals: 3
Clause #375 W:(6 4) NOT x417
Number of literals: 1
Clause #376 W:(-36 -4) 
Number of literals: 0
Clause #377 W:(-4 -28) 
Number of literals: 0
Clause #378 W:(0 0) NOT x223 AND NOT x408
Number of literals: 2
Clause #379 W:(-1 64) NOT x505
Number of literals: 1
Clause #380 W:(3 -6) NOT x53 AND NOT x303
Number of literals: 2
Clause #381 W:(37 25) NOT x5 AND NOT x170
Number of literals: 2
Clause #382 W:(40 0) x273 AND NOT x49
Number of literals: 2
Clause #383 W:(-40 3) 
Number of literals: 0
Clause #384 W:(1 -4) NOT x35
Number of literals: 1
Clause #385 W:(-14 -55) 
Number of literals: 0
Clause #386 W:(-8 17) 
Number of literals: 0
Clause #387 W:(-13 20) NOT x329
Number of literals: 1
Clause #388 W:(-66 -35) NOT x110 AND NOT x151 AND NOT x283 AND NOT x310
Number of literals: 4
Clause #389 W:(-49 20) NOT x291 AND NOT x398
Number of literals: 2
Clause #390 W:(9 7) NOT x236 AND NOT x507
Number of literals: 2
Clause #391 W:(-13 2) NOT x312 AND NOT x502
Number of literals: 2
Clause #392 W:(18 38) 
Number of literals: 0
Clause #393 W:(-21 -21) NOT x4 AND NOT x410
Number of literals: 2
Clause #394 W:(31 -20) NOT x457
Number of literals: 1
Clause #395 W:(56 25) NOT x214
Number of literals: 1
Clause #396 W:(13 -38) NOT x223 AND NOT x446 AND NOT x463
Number of literals: 3
Clause #397 W:(-23 43) 
Number of literals: 0
Clause #398 W:(82 -65) x77
Number of literals: 1
Clause #399 W:(48 86) NOT x409
Number of literals: 1
Clause #400 W:(-18 -29) NOT x67
Number of literals: 1
Clause #401 W:(-12 9) NOT x232 AND NOT x486
Number of literals: 2
Clause #402 W:(14 -4) 
Number of literals: 0
Clause #403 W:(84 -21) NOT x39 AND NOT x410
Number of literals: 2
Clause #404 W:(-12 -30) x273 AND NOT x398
Number of literals: 2
Clause #405 W:(19 38) NOT x149 AND NOT x402
Number of literals: 2
Clause #406 W:(-100 -45) NOT x174
Number of literals: 1
Clause #407 W:(-21 54) NOT x104
Number of literals: 1
Clause #408 W:(-16 57) NOT x240
Number of literals: 1
Clause #409 W:(0 33) NOT x153
Number of literals: 1
Clause #410 W:(-19 2) NOT x300
Number of literals: 1
Clause #411 W:(4 -2) NOT x231
Number of literals: 1
Clause #412 W:(-2 0) NOT x190 AND NOT x324
Number of literals: 2
Clause #413 W:(17 11) 
Number of literals: 0
Clause #414 W:(-15 -97) NOT x35 AND NOT x107
Number of literals: 2
Clause #415 W:(14 1) NOT x245 AND NOT x252
Number of literals: 2
Clause #416 W:(24 -13) NOT x43 AND NOT x169 AND NOT x306
Number of literals: 3
Clause #417 W:(-11 7) NOT x113
Number of literals: 1
Clause #418 W:(-4 15) NOT x141 AND NOT x422
Number of literals: 2
Clause #419 W:(-75 3) NOT x42 AND NOT x173 AND NOT x231 AND NOT x312 AND NOT x313
Number of literals: 5
Clause #420 W:(7 -51) NOT x305 AND NOT x327
Number of literals: 2
Clause #421 W:(7 22) 
Number of literals: 0
Clause #422 W:(-24 27) 
Number of literals: 0
Clause #423 W:(38 1) NOT x42 AND NOT x238 AND NOT x279 AND NOT x357
Number of literals: 4
Clause #424 W:(11 11) NOT x273
Number of literals: 1
Clause #425 W:(6 -2) NOT x177
Number of literals: 1
Clause #426 W:(-23 34) NOT x118 AND NOT x321
Number of literals: 2
Clause #427 W:(0 -15) 
Number of literals: 0
Clause #428 W:(-7 -6) NOT x495
Number of literals: 1
Clause #429 W:(11 -12) NOT x31 AND NOT x290 AND NOT x398
Number of literals: 3
Clause #430 W:(-11 2) NOT x289
Number of literals: 1
Clause #431 W:(-53 -18) NOT x450
Number of literals: 1
Clause #432 W:(5 -15) NOT x108
Number of literals: 1
Clause #433 W:(2 -44) NOT x209 AND NOT x238
Number of literals: 2
Clause #434 W:(-9 19) NOT x400
Number of literals: 1
Clause #435 W:(51 29) 
Number of literals: 0
Clause #436 W:(-7 33) 
Number of literals: 0
Clause #437 W:(37 32) NOT x81 AND NOT x273
Number of literals: 2
Clause #438 W:(5 14) 
Number of literals: 0
Clause #439 W:(-15 16) NOT x291 AND NOT x371
Number of literals: 2
Clause #440 W:(31 8) NOT x248 AND NOT x398
Number of literals: 2
Clause #441 W:(-4 -23) NOT x31 AND NOT x365
Number of literals: 2
Clause #442 W:(24 -23) 
Number of literals: 0
Clause #443 W:(-21 -15) NOT x476
Number of literals: 1
Clause #444 W:(-8 -43) NOT x138 AND NOT x223 AND NOT x273 AND NOT x491
Number of literals: 4
Clause #445 W:(-19 -13) 
Number of literals: 0
Clause #446 W:(-60 7) NOT x460
Number of literals: 1
Clause #447 W:(-7 21) 
Number of literals: 0
Clause #448 W:(3 3) 
Number of literals: 0
Clause #449 W:(9 20) NOT x1
Number of literals: 1
Clause #450 W:(-30 -3) NOT x73 AND NOT x238 AND NOT x248 AND NOT x288
Number of literals: 4
Clause #451 W:(76 33) NOT x330 AND NOT x385
Number of literals: 2
Clause #452 W:(30 31) NOT x273 AND NOT x316
Number of literals: 2
Clause #453 W:(24 37) 
Number of literals: 0
Clause #454 W:(-48 30) 
Number of literals: 0
Clause #455 W:(7 -16) NOT x114
Number of literals: 1
Clause #456 W:(-79 25) NOT x273
Number of literals: 1
Clause #457 W:(19 118) 
Number of literals: 0
Clause #458 W:(-10 -9) 
Number of literals: 0
Clause #459 W:(10 23) NOT x380
Number of literals: 1
Clause #460 W:(32 38) NOT x45 AND NOT x89 AND NOT x114 AND NOT x238 AND NOT x339
Number of literals: 5
Clause #461 W:(-20 57) NOT x17
Number of literals: 1
Clause #462 W:(-4 79) NOT x273 AND NOT x445
Number of literals: 2
Clause #463 W:(-1 7) 
Number of literals: 0
Clause #464 W:(44 40) NOT x33 AND NOT x38 AND NOT x172
Number of literals: 3
Clause #465 W:(-23 6) 
Number of literals: 0
Clause #466 W:(-51 2) 
Number of literals: 0
Clause #467 W:(10 31) NOT x119 AND NOT x458 AND NOT x500
Number of literals: 3
Clause #468 W:(12 0) 
Number of literals: 0
Clause #469 W:(9 -1) NOT x81 AND NOT x509
Number of literals: 2
Clause #470 W:(34 28) NOT x46 AND NOT x247
Number of literals: 2
Clause #471 W:(-9 -61) NOT x373
Number of literals: 1
Clause #472 W:(-39 -33) NOT x50 AND NOT x55
Number of literals: 2
Clause #473 W:(-4 -4) 
Number of literals: 0
Clause #474 W:(48 -24) x273
Number of literals: 1
Clause #475 W:(-19 -4) NOT x129 AND NOT x398
Number of literals: 2
Clause #476 W:(-21 -67) NOT x20
Number of literals: 1
Clause #477 W:(-2 7) 
Number of literals: 0
Clause #478 W:(-14 14) NOT x293
Number of literals: 1
Clause #479 W:(-70 6) 
Number of literals: 0
Clause #480 W:(3 2) NOT x192 AND NOT x413
Number of literals: 2
Clause #481 W:(20 9) 
Number of literals: 0
Clause #482 W:(20 74) NOT x137
Number of literals: 1
Clause #483 W:(-45 -64) NOT x352
Number of literals: 1
Clause #484 W:(-16 13) 
Number of literals: 0
Clause #485 W:(6 0) 
Number of literals: 0
Clause #486 W:(-2 -3) NOT x255
Number of literals: 1
Clause #487 W:(-31 48) 
Number of literals: 0
Clause #488 W:(-60 6) NOT x266
Number of literals: 1
Clause #489 W:(30 -14) NOT x273
Number of literals: 1
Clause #490 W:(-11 2) 
Number of literals: 0
Clause #491 W:(-3 47) NOT x140
Number of literals: 1
Clause #492 W:(9 20) NOT x59 AND NOT x241
Number of literals: 2
Clause #493 W:(-20 -7) 
Number of literals: 0
Clause #494 W:(-65 -3) NOT x277 AND NOT x294 AND NOT x353
Number of literals: 3
Clause #495 W:(15 -20) NOT x296
Number of literals: 1
Clause #496 W:(-40 -15) NOT x336
Number of literals: 1
Clause #497 W:(0 -25) NOT x136 AND NOT x345 AND NOT x400
Number of literals: 3
Clause #498 W:(-25 -49) NOT x298
Number of literals: 1
Clause #499 W:(-30 13) NOT x273 AND NOT x467
Number of literals: 2
results: Results(training_time_s=4237.835685968399, inference_time_s=0.4041934013366699, memory_usage_mb=299.4140625, accuracy=0.797, precision=0.7941288125376732, recall=0.797, f1_score=0.7836070854414072)
confusion matrix: [[163, 156], [47, 634]]
reporting runs/2024-12-19T16:30:11/results.toml
reporting runs/2024-12-19T16:30:11/confusion_matrix.csv
reporting runs/2024-12-19T16:30:11/weights.csv
