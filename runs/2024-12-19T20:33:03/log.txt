creating new run in runs/2024-12-19T20:33:03
reporting parameters in runs/2024-12-19T20:33:03/params.toml, values:
{'epochs': 50, 'number_of_clauses': 500, 't': 800, 's': 2.653089126778159, 'depth': 7, 'hypervector_size': 1024, 'hypervector_bits': 4, 'message_size': 256, 'message_bits': 1, 'double_hashing': False, 'max_included_literals': 8}
loading dataset from /home/ask/skole-learning-systems/attempt1/data/3x3_medium.csv
hashing dataset
saving dataset report to runs/2024-12-19T20:33:03/dataset.toml, content:
{'filename': '/home/ask/skole-learning-systems/attempt1/data/3x3_medium.csv', 'hash-blake2b': 'e9bf73e53fde757aee03a9898821212a0b3ffc12b8ac80471fda9e14e5c6d7ecd20c3cf42daf290055e4d53e56700ff350d4ae6970c2f5d38736556be10fa3de', 'dimensions': 3, 'rows': 10000}
X_train shape: (9000,)
X_test shape: (1000,)
Creating training data
bytecode dump:
>          0	NOP(arg=None, lineno=72)
           2	RESUME(arg=0, lineno=72)
           4	LOAD_GLOBAL(arg=1, lineno=75)
          14	LOAD_FAST(arg=1, lineno=75)
          16	LOAD_ATTR(arg=2, lineno=75)
          36	LOAD_CONST(arg=1, lineno=75)
          38	BINARY_SUBSCR(arg=None, lineno=75)
          42	CALL(arg=1, lineno=75)
          50	GET_ITER(arg=None, lineno=75)
>         52	FOR_ITER(arg=50, lineno=75)
          56	STORE_FAST(arg=2, lineno=75)
          58	LOAD_GLOBAL(arg=1, lineno=76)
          68	LOAD_FAST(arg=0, lineno=76)
          70	LOAD_FAST(arg=0, lineno=76)
          72	LOAD_CONST(arg=2, lineno=76)
          74	BINARY_OP(arg=5, lineno=76)
          78	CALL(arg=2, lineno=76)
          86	GET_ITER(arg=None, lineno=76)
>         88	FOR_ITER(arg=30, lineno=76)
          92	STORE_FAST(arg=3, lineno=76)
          94	LOAD_FAST(arg=3, lineno=77)
          96	LOAD_CONST(arg=3, lineno=77)
          98	BINARY_OP(arg=2, lineno=77)
         102	STORE_FAST(arg=4, lineno=77)
         104	LOAD_FAST(arg=3, lineno=78)
         106	LOAD_CONST(arg=3, lineno=78)
         108	BINARY_OP(arg=6, lineno=78)
         112	STORE_FAST(arg=5, lineno=78)
         114	LOAD_FAST(arg=1, lineno=79)
         116	LOAD_FAST(arg=2, lineno=79)
         118	LOAD_FAST(arg=4, lineno=79)
         120	BUILD_TUPLE(arg=2, lineno=79)
         122	COPY(arg=2, lineno=79)
         124	COPY(arg=2, lineno=79)
         126	BINARY_SUBSCR(arg=None, lineno=79)
         130	LOAD_CONST(arg=4, lineno=79)
         132	LOAD_FAST(arg=5, lineno=79)
         134	BINARY_OP(arg=3, lineno=79)
         138	BINARY_OP(arg=20, lineno=79)
         142	SWAP(arg=3, lineno=79)
         144	SWAP(arg=2, lineno=79)
         146	STORE_SUBSCR(arg=None, lineno=79)
         150	JUMP_BACKWARD(arg=32, lineno=79)
>        152	END_FOR(arg=None, lineno=76)
         154	JUMP_BACKWARD(arg=52, lineno=76)
>        156	END_FOR(arg=None, lineno=75)
         158	RETURN_CONST(arg=0, lineno=75)
pending: deque([State(pc_initial=0 nstack_initial=0)])
stack: []
state.pc_initial: State(pc_initial=0 nstack_initial=0)
dispatch pc=0, inst=NOP(arg=None, lineno=72)
stack []
dispatch pc=2, inst=RESUME(arg=0, lineno=72)
stack []
dispatch pc=4, inst=LOAD_GLOBAL(arg=1, lineno=75)
stack []
dispatch pc=14, inst=LOAD_FAST(arg=1, lineno=75)
stack ['$null$4.1', '$4load_global.0']
dispatch pc=16, inst=LOAD_ATTR(arg=2, lineno=75)
stack ['$null$4.1', '$4load_global.0', '$X14.2']
dispatch pc=36, inst=LOAD_CONST(arg=1, lineno=75)
stack ['$null$4.1', '$4load_global.0', '$16load_attr.3']
dispatch pc=38, inst=BINARY_SUBSCR(arg=None, lineno=75)
stack ['$null$4.1', '$4load_global.0', '$16load_attr.3', '$const36.4']
dispatch pc=42, inst=CALL(arg=1, lineno=75)
stack ['$null$4.1', '$4load_global.0', '$38binary_subscr.5']
dispatch pc=50, inst=GET_ITER(arg=None, lineno=75)
stack ['$42call.6']
end state. edges=[Edge(pc=52, stack=('$50get_iter.7',), blockstack=(), npush=0)]
pending: deque([State(pc_initial=52 nstack_initial=1)])
stack: ['$phi52.0']
state.pc_initial: State(pc_initial=52 nstack_initial=1)
dispatch pc=52, inst=FOR_ITER(arg=50, lineno=75)
stack ['$phi52.0']
end state. edges=[Edge(pc=156, stack=('$phi52.0', '$52for_iter.2'), blockstack=(), npush=0), Edge(pc=56, stack=('$phi52.0', '$52for_iter.2'), blockstack=(), npush=0)]
pending: deque([State(pc_initial=156 nstack_initial=2), State(pc_initial=56 nstack_initial=2)])
stack: ['$phi156.0', '$phi156.1']
state.pc_initial: State(pc_initial=156 nstack_initial=2)
dispatch pc=156, inst=END_FOR(arg=None, lineno=75)
stack ['$phi156.0', '$phi156.1']
dispatch pc=158, inst=RETURN_CONST(arg=0, lineno=75)
stack []
end state. edges=[]
pending: deque([State(pc_initial=56 nstack_initial=2)])
stack: ['$phi56.0', '$phi56.1']
state.pc_initial: State(pc_initial=56 nstack_initial=2)
dispatch pc=56, inst=STORE_FAST(arg=2, lineno=75)
stack ['$phi56.0', '$phi56.1']
dispatch pc=58, inst=LOAD_GLOBAL(arg=1, lineno=76)
stack ['$phi56.0']
dispatch pc=68, inst=LOAD_FAST(arg=0, lineno=76)
stack ['$phi56.0', '$null$58.3', '$58load_global.2']
dispatch pc=70, inst=LOAD_FAST(arg=0, lineno=76)
stack ['$phi56.0', '$null$58.3', '$58load_global.2', '$hypervector_size68.4']
dispatch pc=72, inst=LOAD_CONST(arg=2, lineno=76)
stack ['$phi56.0', '$null$58.3', '$58load_global.2', '$hypervector_size68.4', '$hypervector_size70.5']
dispatch pc=74, inst=BINARY_OP(arg=5, lineno=76)
stack ['$phi56.0', '$null$58.3', '$58load_global.2', '$hypervector_size68.4', '$hypervector_size70.5', '$const72.6']
dispatch pc=78, inst=CALL(arg=2, lineno=76)
stack ['$phi56.0', '$null$58.3', '$58load_global.2', '$hypervector_size68.4', '$binop_mul74.7']
dispatch pc=86, inst=GET_ITER(arg=None, lineno=76)
stack ['$phi56.0', '$78call.8']
end state. edges=[Edge(pc=88, stack=('$phi56.0', '$86get_iter.9'), blockstack=(), npush=0)]
pending: deque([State(pc_initial=88 nstack_initial=2)])
stack: ['$phi88.0', '$phi88.1']
state.pc_initial: State(pc_initial=88 nstack_initial=2)
dispatch pc=88, inst=FOR_ITER(arg=30, lineno=76)
stack ['$phi88.0', '$phi88.1']
end state. edges=[Edge(pc=152, stack=('$phi88.0', '$phi88.1', '$88for_iter.3'), blockstack=(), npush=0), Edge(pc=92, stack=('$phi88.0', '$phi88.1', '$88for_iter.3'), blockstack=(), npush=0)]
pending: deque([State(pc_initial=152 nstack_initial=3), State(pc_initial=92 nstack_initial=3)])
stack: ['$phi152.0', '$phi152.1', '$phi152.2']
state.pc_initial: State(pc_initial=152 nstack_initial=3)
dispatch pc=152, inst=END_FOR(arg=None, lineno=76)
stack ['$phi152.0', '$phi152.1', '$phi152.2']
dispatch pc=154, inst=JUMP_BACKWARD(arg=52, lineno=76)
stack ['$phi152.0']
end state. edges=[Edge(pc=52, stack=('$phi152.0',), blockstack=(), npush=0)]
pending: deque([State(pc_initial=92 nstack_initial=3), State(pc_initial=52 nstack_initial=1)])
stack: ['$phi92.0', '$phi92.1', '$phi92.2']
state.pc_initial: State(pc_initial=92 nstack_initial=3)
dispatch pc=92, inst=STORE_FAST(arg=3, lineno=76)
stack ['$phi92.0', '$phi92.1', '$phi92.2']
dispatch pc=94, inst=LOAD_FAST(arg=3, lineno=77)
stack ['$phi92.0', '$phi92.1']
dispatch pc=96, inst=LOAD_CONST(arg=3, lineno=77)
stack ['$phi92.0', '$phi92.1', '$k94.3']
dispatch pc=98, inst=BINARY_OP(arg=2, lineno=77)
stack ['$phi92.0', '$phi92.1', '$k94.3', '$const96.4']
dispatch pc=102, inst=STORE_FAST(arg=4, lineno=77)
stack ['$phi92.0', '$phi92.1', '$binop_floordiv98.5']
dispatch pc=104, inst=LOAD_FAST(arg=3, lineno=78)
stack ['$phi92.0', '$phi92.1']
dispatch pc=106, inst=LOAD_CONST(arg=3, lineno=78)
stack ['$phi92.0', '$phi92.1', '$k104.6']
dispatch pc=108, inst=BINARY_OP(arg=6, lineno=78)
stack ['$phi92.0', '$phi92.1', '$k104.6', '$const106.7']
dispatch pc=112, inst=STORE_FAST(arg=5, lineno=78)
stack ['$phi92.0', '$phi92.1', '$binop_mod108.8']
dispatch pc=114, inst=LOAD_FAST(arg=1, lineno=79)
stack ['$phi92.0', '$phi92.1']
dispatch pc=116, inst=LOAD_FAST(arg=2, lineno=79)
stack ['$phi92.0', '$phi92.1', '$X114.9']
dispatch pc=118, inst=LOAD_FAST(arg=4, lineno=79)
stack ['$phi92.0', '$phi92.1', '$X114.9', '$i116.10']
dispatch pc=120, inst=BUILD_TUPLE(arg=2, lineno=79)
stack ['$phi92.0', '$phi92.1', '$X114.9', '$i116.10', '$chunk118.11']
dispatch pc=122, inst=COPY(arg=2, lineno=79)
stack ['$phi92.0', '$phi92.1', '$X114.9', '$120build_tuple.12']
dispatch pc=124, inst=COPY(arg=2, lineno=79)
stack ['$phi92.0', '$phi92.1', '$X114.9', '$120build_tuple.12', '$X114.9']
dispatch pc=126, inst=BINARY_SUBSCR(arg=None, lineno=79)
stack ['$phi92.0', '$phi92.1', '$X114.9', '$120build_tuple.12', '$X114.9', '$120build_tuple.12']
dispatch pc=130, inst=LOAD_CONST(arg=4, lineno=79)
stack ['$phi92.0', '$phi92.1', '$X114.9', '$120build_tuple.12', '$126binary_subscr.13']
dispatch pc=132, inst=LOAD_FAST(arg=5, lineno=79)
stack ['$phi92.0', '$phi92.1', '$X114.9', '$120build_tuple.12', '$126binary_subscr.13', '$const130.14']
dispatch pc=134, inst=BINARY_OP(arg=3, lineno=79)
stack ['$phi92.0', '$phi92.1', '$X114.9', '$120build_tuple.12', '$126binary_subscr.13', '$const130.14', '$pos132.15']
dispatch pc=138, inst=BINARY_OP(arg=20, lineno=79)
stack ['$phi92.0', '$phi92.1', '$X114.9', '$120build_tuple.12', '$126binary_subscr.13', '$binop_lshift134.16']
dispatch pc=142, inst=SWAP(arg=3, lineno=79)
stack ['$phi92.0', '$phi92.1', '$X114.9', '$120build_tuple.12', '$binop_ior138.17']
dispatch pc=144, inst=SWAP(arg=2, lineno=79)
stack ['$phi92.0', '$phi92.1', '$binop_ior138.17', '$120build_tuple.12', '$X114.9']
dispatch pc=146, inst=STORE_SUBSCR(arg=None, lineno=79)
stack ['$phi92.0', '$phi92.1', '$binop_ior138.17', '$X114.9', '$120build_tuple.12']
dispatch pc=150, inst=JUMP_BACKWARD(arg=32, lineno=79)
stack ['$phi92.0', '$phi92.1']
end state. edges=[Edge(pc=88, stack=('$phi92.0', '$phi92.1'), blockstack=(), npush=0)]
pending: deque([State(pc_initial=52 nstack_initial=1), State(pc_initial=88 nstack_initial=2)])
pending: deque([State(pc_initial=88 nstack_initial=2)])
-------------------------Prune PHIs-------------------------
Used_phis: defaultdict(<class 'set'>,
            {State(pc_initial=0 nstack_initial=0): set(),
             State(pc_initial=52 nstack_initial=1): {'$phi52.0'},
             State(pc_initial=56 nstack_initial=2): {'$phi56.1'},
             State(pc_initial=88 nstack_initial=2): {'$phi88.1'},
             State(pc_initial=92 nstack_initial=3): {'$phi92.2'},
             State(pc_initial=152 nstack_initial=3): set(),
             State(pc_initial=156 nstack_initial=2): set()})
defmap: {'$phi152.2': State(pc_initial=88 nstack_initial=2),
 '$phi156.1': State(pc_initial=52 nstack_initial=1),
 '$phi52.0': State(pc_initial=0 nstack_initial=0),
 '$phi56.1': State(pc_initial=52 nstack_initial=1),
 '$phi88.1': State(pc_initial=56 nstack_initial=2),
 '$phi92.2': State(pc_initial=88 nstack_initial=2)}
phismap: defaultdict(<class 'set'>,
            {'$phi152.0': {('$phi88.0', State(pc_initial=88 nstack_initial=2))},
             '$phi152.1': {('$phi88.1', State(pc_initial=88 nstack_initial=2))},
             '$phi152.2': {('$88for_iter.3',
                            State(pc_initial=88 nstack_initial=2))},
             '$phi156.0': {('$phi52.0', State(pc_initial=52 nstack_initial=1))},
             '$phi156.1': {('$52for_iter.2',
                            State(pc_initial=52 nstack_initial=1))},
             '$phi52.0': {('$50get_iter.7',
                           State(pc_initial=0 nstack_initial=0)),
                          ('$phi152.0',
                           State(pc_initial=152 nstack_initial=3))},
             '$phi56.0': {('$phi52.0', State(pc_initial=52 nstack_initial=1))},
             '$phi56.1': {('$52for_iter.2',
                           State(pc_initial=52 nstack_initial=1))},
             '$phi88.0': {('$phi56.0', State(pc_initial=56 nstack_initial=2)),
                          ('$phi92.0', State(pc_initial=92 nstack_initial=3))},
             '$phi88.1': {('$86get_iter.9',
                           State(pc_initial=56 nstack_initial=2)),
                          ('$phi92.1', State(pc_initial=92 nstack_initial=3))},
             '$phi92.0': {('$phi88.0', State(pc_initial=88 nstack_initial=2))},
             '$phi92.1': {('$phi88.1', State(pc_initial=88 nstack_initial=2))},
             '$phi92.2': {('$88for_iter.3',
                           State(pc_initial=88 nstack_initial=2))}})
changing phismap: defaultdict(<class 'set'>,
            {'$phi152.0': {('$phi56.0', State(pc_initial=56 nstack_initial=2)),
                           ('$phi92.0', State(pc_initial=92 nstack_initial=3))},
             '$phi152.1': {('$86get_iter.9',
                            State(pc_initial=56 nstack_initial=2)),
                           ('$phi92.1', State(pc_initial=92 nstack_initial=3))},
             '$phi152.2': {('$88for_iter.3',
                            State(pc_initial=88 nstack_initial=2))},
             '$phi156.0': {('$50get_iter.7',
                            State(pc_initial=0 nstack_initial=0)),
                           ('$phi152.0',
                            State(pc_initial=152 nstack_initial=3))},
             '$phi156.1': {('$52for_iter.2',
                            State(pc_initial=52 nstack_initial=1))},
             '$phi52.0': {('$50get_iter.7',
                           State(pc_initial=0 nstack_initial=0)),
                          ('$phi56.0', State(pc_initial=56 nstack_initial=2)),
                          ('$phi92.0', State(pc_initial=92 nstack_initial=3))},
             '$phi56.0': {('$50get_iter.7',
                           State(pc_initial=0 nstack_initial=0)),
                          ('$phi56.0', State(pc_initial=56 nstack_initial=2)),
                          ('$phi92.0', State(pc_initial=92 nstack_initial=3))},
             '$phi56.1': {('$52for_iter.2',
                           State(pc_initial=52 nstack_initial=1))},
             '$phi88.0': {('$50get_iter.7',
                           State(pc_initial=0 nstack_initial=0)),
                          ('$phi88.0', State(pc_initial=88 nstack_initial=2))},
             '$phi88.1': {('$86get_iter.9',
                           State(pc_initial=56 nstack_initial=2)),
                          ('$phi88.1', State(pc_initial=88 nstack_initial=2))},
             '$phi92.0': {('$50get_iter.7',
                           State(pc_initial=0 nstack_initial=0))},
             '$phi92.1': {('$86get_iter.9',
                           State(pc_initial=56 nstack_initial=2))},
             '$phi92.2': {('$88for_iter.3',
                           State(pc_initial=88 nstack_initial=2))}})
changing phismap: defaultdict(<class 'set'>,
            {'$phi152.0': {('$50get_iter.7',
                            State(pc_initial=0 nstack_initial=0))},
             '$phi152.1': {('$86get_iter.9',
                            State(pc_initial=56 nstack_initial=2))},
             '$phi152.2': {('$88for_iter.3',
                            State(pc_initial=88 nstack_initial=2))},
             '$phi156.0': {('$50get_iter.7',
                            State(pc_initial=0 nstack_initial=0))},
             '$phi156.1': {('$52for_iter.2',
                            State(pc_initial=52 nstack_initial=1))},
             '$phi52.0': {('$50get_iter.7',
                           State(pc_initial=0 nstack_initial=0))},
             '$phi56.0': {('$50get_iter.7',
                           State(pc_initial=0 nstack_initial=0))},
             '$phi56.1': {('$52for_iter.2',
                           State(pc_initial=52 nstack_initial=1))},
             '$phi88.0': {('$50get_iter.7',
                           State(pc_initial=0 nstack_initial=0))},
             '$phi88.1': {('$86get_iter.9',
                           State(pc_initial=56 nstack_initial=2))},
             '$phi92.0': {('$50get_iter.7',
                           State(pc_initial=0 nstack_initial=0))},
             '$phi92.1': {('$86get_iter.9',
                           State(pc_initial=56 nstack_initial=2))},
             '$phi92.2': {('$88for_iter.3',
                           State(pc_initial=88 nstack_initial=2))}})
changing phismap: defaultdict(<class 'set'>,
            {'$phi152.0': {('$50get_iter.7',
                            State(pc_initial=0 nstack_initial=0))},
             '$phi152.1': {('$86get_iter.9',
                            State(pc_initial=56 nstack_initial=2))},
             '$phi152.2': {('$88for_iter.3',
                            State(pc_initial=88 nstack_initial=2))},
             '$phi156.0': {('$50get_iter.7',
                            State(pc_initial=0 nstack_initial=0))},
             '$phi156.1': {('$52for_iter.2',
                            State(pc_initial=52 nstack_initial=1))},
             '$phi52.0': {('$50get_iter.7',
                           State(pc_initial=0 nstack_initial=0))},
             '$phi56.0': {('$50get_iter.7',
                           State(pc_initial=0 nstack_initial=0))},
             '$phi56.1': {('$52for_iter.2',
                           State(pc_initial=52 nstack_initial=1))},
             '$phi88.0': {('$50get_iter.7',
                           State(pc_initial=0 nstack_initial=0))},
             '$phi88.1': {('$86get_iter.9',
                           State(pc_initial=56 nstack_initial=2))},
             '$phi92.0': {('$50get_iter.7',
                           State(pc_initial=0 nstack_initial=0))},
             '$phi92.1': {('$86get_iter.9',
                           State(pc_initial=56 nstack_initial=2))},
             '$phi92.2': {('$88for_iter.3',
                           State(pc_initial=88 nstack_initial=2))}})
keep phismap: {'$phi52.0': {('$50get_iter.7', State(pc_initial=0 nstack_initial=0))},
 '$phi56.1': {('$52for_iter.2', State(pc_initial=52 nstack_initial=1))},
 '$phi88.1': {('$86get_iter.9', State(pc_initial=56 nstack_initial=2))},
 '$phi92.2': {('$88for_iter.3', State(pc_initial=88 nstack_initial=2))}}
new_out: defaultdict(<class 'dict'>,
            {State(pc_initial=0 nstack_initial=0): {'$phi52.0': '$50get_iter.7'},
             State(pc_initial=52 nstack_initial=1): {'$phi56.1': '$52for_iter.2'},
             State(pc_initial=56 nstack_initial=2): {'$phi88.1': '$86get_iter.9'},
             State(pc_initial=88 nstack_initial=2): {'$phi92.2': '$88for_iter.3'}})
----------------------DONE Prune PHIs-----------------------
block_infos State(pc_initial=0 nstack_initial=0):
AdaptBlockInfo(insts=((0, {}), (2, {}), (4, {'idx': 0, 'res': '$4load_global.0'}), (14, {'res': '$X14.2'}), (16, {'item': '$X14.2', 'res': '$16load_attr.3'}), (36, {'res': '$const36.4'}), (38, {'index': '$const36.4', 'target': '$16load_attr.3', 'res': '$38binary_subscr.5'}), (42, {'func': '$4load_global.0', 'args': ['$38binary_subscr.5'], 'kw_names': None, 'res': '$42call.6'}), (50, {'value': '$42call.6', 'res': '$50get_iter.7'})), outgoing_phis={'$phi52.0': '$50get_iter.7'}, blockstack=(), active_try_block=None, outgoing_edgepushed={52: ('$50get_iter.7',)})
block_infos State(pc_initial=52 nstack_initial=1):
AdaptBlockInfo(insts=((52, {'iterator': '$phi52.0', 'pair': '$52for_iter.1', 'indval': '$52for_iter.2', 'pred': '$52for_iter.3'}),), outgoing_phis={'$phi56.1': '$52for_iter.2'}, blockstack=(), active_try_block=None, outgoing_edgepushed={156: ('$phi52.0', '$52for_iter.2'), 56: ('$phi52.0', '$52for_iter.2')})
block_infos State(pc_initial=56 nstack_initial=2):
AdaptBlockInfo(insts=((56, {'value': '$phi56.1'}), (58, {'idx': 0, 'res': '$58load_global.2'}), (68, {'res': '$hypervector_size68.4'}), (70, {'res': '$hypervector_size70.5'}), (72, {'res': '$const72.6'}), (74, {'op': '*', 'lhs': '$hypervector_size70.5', 'rhs': '$const72.6', 'res': '$binop_mul74.7'}), (78, {'func': '$58load_global.2', 'args': ['$hypervector_size68.4', '$binop_mul74.7'], 'kw_names': None, 'res': '$78call.8'}), (86, {'value': '$78call.8', 'res': '$86get_iter.9'})), outgoing_phis={'$phi88.1': '$86get_iter.9'}, blockstack=(), active_try_block=None, outgoing_edgepushed={88: ('$phi56.0', '$86get_iter.9')})
block_infos State(pc_initial=88 nstack_initial=2):
AdaptBlockInfo(insts=((88, {'iterator': '$phi88.1', 'pair': '$88for_iter.2', 'indval': '$88for_iter.3', 'pred': '$88for_iter.4'}),), outgoing_phis={'$phi92.2': '$88for_iter.3'}, blockstack=(), active_try_block=None, outgoing_edgepushed={152: ('$phi88.0', '$phi88.1', '$88for_iter.3'), 92: ('$phi88.0', '$phi88.1', '$88for_iter.3')})
block_infos State(pc_initial=92 nstack_initial=3):
AdaptBlockInfo(insts=((92, {'value': '$phi92.2'}), (94, {'res': '$k94.3'}), (96, {'res': '$const96.4'}), (98, {'op': '//', 'lhs': '$k94.3', 'rhs': '$const96.4', 'res': '$binop_floordiv98.5'}), (102, {'value': '$binop_floordiv98.5'}), (104, {'res': '$k104.6'}), (106, {'res': '$const106.7'}), (108, {'op': '%', 'lhs': '$k104.6', 'rhs': '$const106.7', 'res': '$binop_mod108.8'}), (112, {'value': '$binop_mod108.8'}), (114, {'res': '$X114.9'}), (116, {'res': '$i116.10'}), (118, {'res': '$chunk118.11'}), (120, {'items': ['$i116.10', '$chunk118.11'], 'res': '$120build_tuple.12'}), (126, {'index': '$120build_tuple.12', 'target': '$X114.9', 'res': '$126binary_subscr.13'}), (130, {'res': '$const130.14'}), (132, {'res': '$pos132.15'}), (134, {'op': '<<', 'lhs': '$const130.14', 'rhs': '$pos132.15', 'res': '$binop_lshift134.16'}), (138, {'op': '|=', 'lhs': '$126binary_subscr.13', 'rhs': '$binop_lshift134.16', 'res': '$binop_ior138.17'}), (146, {'target': '$X114.9', 'index': '$120build_tuple.12', 'value': '$binop_ior138.17'}), (150, {})), outgoing_phis={}, blockstack=(), active_try_block=None, outgoing_edgepushed={88: ('$phi92.0', '$phi92.1')})
block_infos State(pc_initial=152 nstack_initial=3):
AdaptBlockInfo(insts=((154, {}),), outgoing_phis={}, blockstack=(), active_try_block=None, outgoing_edgepushed={52: ('$phi152.0',)})
block_infos State(pc_initial=156 nstack_initial=2):
AdaptBlockInfo(insts=((158, {'retval': '$const158.2', 'castval': '$158return_const.3'}),), outgoing_phis={}, blockstack=(), active_try_block=None, outgoing_edgepushed={})
label 0:
    hypervector_size = arg(0, name=hypervector_size) ['hypervector_size']
    X = arg(1, name=X)                       ['X']
    $4load_global.0 = global(range: <class 'range'>) ['$4load_global.0']
    $16load_attr.3 = getattr(value=X, attr=shape) ['$16load_attr.3', 'X']
    $const36.4 = const(int, 0)               ['$const36.4']
    $38binary_subscr.5 = getitem(value=$16load_attr.3, index=$const36.4, fn=<built-in function getitem>) ['$16load_attr.3', '$38binary_subscr.5', '$const36.4']
    $42call.6 = call $4load_global.0($38binary_subscr.5, func=$4load_global.0, args=[Var($38binary_subscr.5, graphs.py:75)], kws=(), vararg=None, varkwarg=None, target=None) ['$38binary_subscr.5', '$42call.6', '$4load_global.0']
    $50get_iter.7 = getiter(value=$42call.6) ['$42call.6', '$50get_iter.7']
    $phi52.0 = $50get_iter.7                 ['$50get_iter.7', '$phi52.0']
    jump 52                                  []
label 52:
    $52for_iter.1 = iternext(value=$phi52.0) ['$52for_iter.1', '$phi52.0']
    $52for_iter.2 = pair_first(value=$52for_iter.1) ['$52for_iter.1', '$52for_iter.2']
    $52for_iter.3 = pair_second(value=$52for_iter.1) ['$52for_iter.1', '$52for_iter.3']
    $phi56.1 = $52for_iter.2                 ['$52for_iter.2', '$phi56.1']
    branch $52for_iter.3, 56, 156            ['$52for_iter.3']
label 56:
    i = $phi56.1                             ['$phi56.1', 'i']
    $58load_global.2 = global(range: <class 'range'>) ['$58load_global.2']
    $const72.6 = const(int, 2)               ['$const72.6']
    $binop_mul74.7 = hypervector_size * $const72.6 ['$binop_mul74.7', '$const72.6', 'hypervector_size']
    $78call.8 = call $58load_global.2(hypervector_size, $binop_mul74.7, func=$58load_global.2, args=[Var(hypervector_size, graphs.py:72), Var($binop_mul74.7, graphs.py:76)], kws=(), vararg=None, varkwarg=None, target=None) ['$58load_global.2', '$78call.8', '$binop_mul74.7', 'hypervector_size']
    $86get_iter.9 = getiter(value=$78call.8) ['$78call.8', '$86get_iter.9']
    $phi88.1 = $86get_iter.9                 ['$86get_iter.9', '$phi88.1']
    jump 88                                  []
label 88:
    $88for_iter.2 = iternext(value=$phi88.1) ['$88for_iter.2', '$phi88.1']
    $88for_iter.3 = pair_first(value=$88for_iter.2) ['$88for_iter.2', '$88for_iter.3']
    $88for_iter.4 = pair_second(value=$88for_iter.2) ['$88for_iter.2', '$88for_iter.4']
    $phi92.2 = $88for_iter.3                 ['$88for_iter.3', '$phi92.2']
    branch $88for_iter.4, 92, 152            ['$88for_iter.4']
label 92:
    k = $phi92.2                             ['$phi92.2', 'k']
    $const96.4 = const(int, 32)              ['$const96.4']
    chunk = k // $const96.4                  ['$const96.4', 'chunk', 'k']
    $const106.7 = const(int, 32)             ['$const106.7']
    pos = k % $const106.7                    ['$const106.7', 'k', 'pos']
    $120build_tuple.12 = build_tuple(items=[Var(i, graphs.py:75), Var(chunk, graphs.py:77)]) ['$120build_tuple.12', 'chunk', 'i']
    $126binary_subscr.13 = getitem(value=X, index=$120build_tuple.12, fn=<built-in function getitem>) ['$120build_tuple.12', '$126binary_subscr.13', 'X']
    $const130.14 = const(int, 1)             ['$const130.14']
    $binop_lshift134.16 = $const130.14 << pos ['$binop_lshift134.16', '$const130.14', 'pos']
    $binop_ior138.17 = inplace_binop(fn=<built-in function ior>, immutable_fn=<built-in function or_>, lhs=$126binary_subscr.13, rhs=$binop_lshift134.16, static_lhs=Undefined, static_rhs=Undefined) ['$126binary_subscr.13', '$binop_ior138.17', '$binop_lshift134.16']
    X[$120build_tuple.12] = $binop_ior138.17 ['$120build_tuple.12', '$binop_ior138.17', 'X']
    jump 88                                  []
label 152:
    jump 52                                  []
label 156:
    $const158.2 = const(NoneType, None)      ['$const158.2']
    $158return_const.3 = cast(value=$const158.2) ['$158return_const.3', '$const158.2']
    return $158return_const.3                ['$158return_const.3']

==== SSA block analysis pass on 0
Running <numba.core.ssa._GatherDefsHandler object at 0x7f32e0389910>
on stmt: hypervector_size = arg(0, name=hypervector_size)
on stmt: X = arg(1, name=X)
on stmt: $4load_global.0 = global(range: <class 'range'>)
on stmt: $16load_attr.3 = getattr(value=X, attr=shape)
on stmt: $const36.4 = const(int, 0)
on stmt: $38binary_subscr.5 = static_getitem(value=$16load_attr.3, index=0, index_var=$const36.4, fn=<built-in function getitem>)
on stmt: $42call.6 = call $4load_global.0($38binary_subscr.5, func=$4load_global.0, args=[Var($38binary_subscr.5, graphs.py:75)], kws=(), vararg=None, varkwarg=None, target=None)
on stmt: $50get_iter.7 = getiter(value=$42call.6)
on stmt: $phi52.0 = $50get_iter.7
on stmt: jump 52
==== SSA block analysis pass on 52
Running <numba.core.ssa._GatherDefsHandler object at 0x7f32e0389910>
on stmt: $52for_iter.1 = iternext(value=$phi52.0)
on stmt: $52for_iter.2 = pair_first(value=$52for_iter.1)
on stmt: $52for_iter.3 = pair_second(value=$52for_iter.1)
on stmt: $phi56.1 = $52for_iter.2
on stmt: branch $52for_iter.3, 56, 156
==== SSA block analysis pass on 56
Running <numba.core.ssa._GatherDefsHandler object at 0x7f32e0389910>
on stmt: i = $phi56.1
on stmt: $58load_global.2 = global(range: <class 'range'>)
on stmt: $const72.6 = const(int, 2)
on stmt: $binop_mul74.7 = hypervector_size * $const72.6
on stmt: $78call.8 = call $58load_global.2(hypervector_size, $binop_mul74.7, func=$58load_global.2, args=[Var(hypervector_size, graphs.py:72), Var($binop_mul74.7, graphs.py:76)], kws=(), vararg=None, varkwarg=None, target=None)
on stmt: $86get_iter.9 = getiter(value=$78call.8)
on stmt: $phi88.1 = $86get_iter.9
on stmt: jump 88
==== SSA block analysis pass on 88
Running <numba.core.ssa._GatherDefsHandler object at 0x7f32e0389910>
on stmt: $88for_iter.2 = iternext(value=$phi88.1)
on stmt: $88for_iter.3 = pair_first(value=$88for_iter.2)
on stmt: $88for_iter.4 = pair_second(value=$88for_iter.2)
on stmt: $phi92.2 = $88for_iter.3
on stmt: branch $88for_iter.4, 92, 152
==== SSA block analysis pass on 92
Running <numba.core.ssa._GatherDefsHandler object at 0x7f32e0389910>
on stmt: k = $phi92.2
on stmt: $const96.4 = const(int, 32)
on stmt: chunk = k // $const96.4
on stmt: $const106.7 = const(int, 32)
on stmt: pos = k % $const106.7
on stmt: $120build_tuple.12 = build_tuple(items=[Var(i, graphs.py:75), Var(chunk, graphs.py:77)])
on stmt: $126binary_subscr.13 = getitem(value=X, index=$120build_tuple.12, fn=<built-in function getitem>)
on stmt: $const130.14 = const(int, 1)
on stmt: $binop_lshift134.16 = $const130.14 << pos
on stmt: $binop_ior138.17 = inplace_binop(fn=<built-in function ior>, immutable_fn=<built-in function or_>, lhs=$126binary_subscr.13, rhs=$binop_lshift134.16, static_lhs=Undefined, static_rhs=Undefined)
on stmt: X[$120build_tuple.12] = $binop_ior138.17
on stmt: jump 88
==== SSA block analysis pass on 152
Running <numba.core.ssa._GatherDefsHandler object at 0x7f32e0389910>
on stmt: jump 52
==== SSA block analysis pass on 156
Running <numba.core.ssa._GatherDefsHandler object at 0x7f32e0389910>
on stmt: $const158.2 = const(NoneType, None)
on stmt: $158return_const.3 = cast(value=$const158.2)
on stmt: return $158return_const.3
defs defaultdict(<class 'list'>,
            {'$120build_tuple.12': [(<numba.core.ir.Assign object at 0x7f32e038baa0>,
                                     92)],
             '$126binary_subscr.13': [(<numba.core.ir.Assign object at 0x7f32e038bbf0>,
                                       92)],
             '$158return_const.3': [(<numba.core.ir.Assign object at 0x7f32e038ad80>,
                                     156)],
             '$16load_attr.3': [(<numba.core.ir.Assign object at 0x7f32e0388f80>,
                                 0)],
             '$38binary_subscr.5': [(<numba.core.ir.Assign object at 0x7f32e0389730>,
                                     0)],
             '$42call.6': [(<numba.core.ir.Assign object at 0x7f32e038a330>,
                            0)],
             '$4load_global.0': [(<numba.core.ir.Assign object at 0x7f32e038a090>,
                                  0)],
             '$50get_iter.7': [(<numba.core.ir.Assign object at 0x7f32e038a3c0>,
                                0)],
             '$52for_iter.1': [(<numba.core.ir.Assign object at 0x7f32e038a570>,
                                52)],
             '$52for_iter.2': [(<numba.core.ir.Assign object at 0x7f32e038a600>,
                                52)],
             '$52for_iter.3': [(<numba.core.ir.Assign object at 0x7f32e038a690>,
                                52)],
             '$58load_global.2': [(<numba.core.ir.Assign object at 0x7f32e038a8a0>,
                                   56)],
             '$78call.8': [(<numba.core.ir.Assign object at 0x7f32e038ac60>,
                            56)],
             '$86get_iter.9': [(<numba.core.ir.Assign object at 0x7f32e038acf0>,
                                56)],
             '$88for_iter.2': [(<numba.core.ir.Assign object at 0x7f32e038ae70>,
                                88)],
             '$88for_iter.3': [(<numba.core.ir.Assign object at 0x7f32e038af30>,
                                88)],
             '$88for_iter.4': [(<numba.core.ir.Assign object at 0x7f32e038b020>,
                                88)],
             '$binop_ior138.17': [(<numba.core.ir.Assign object at 0x7f32e03b0080>,
                                   92)],
             '$binop_lshift134.16': [(<numba.core.ir.Assign object at 0x7f32e038bf20>,
                                      92)],
             '$binop_mul74.7': [(<numba.core.ir.Assign object at 0x7f32e038ab70>,
                                 56)],
             '$const106.7': [(<numba.core.ir.Assign object at 0x7f32e038b860>,
                              92)],
             '$const130.14': [(<numba.core.ir.Assign object at 0x7f32e038bce0>,
                               92)],
             '$const158.2': [(<numba.core.ir.Assign object at 0x7f32e0388dd0>,
                              156)],
             '$const36.4': [(<numba.core.ir.Assign object at 0x7f32e038a150>,
                             0)],
             '$const72.6': [(<numba.core.ir.Assign object at 0x7f32e038aa80>,
                             56)],
             '$const96.4': [(<numba.core.ir.Assign object at 0x7f32e038b440>,
                             92)],
             '$phi52.0': [(<numba.core.ir.Assign object at 0x7f32e038a030>, 0)],
             '$phi56.1': [(<numba.core.ir.Assign object at 0x7f32e038a4e0>,
                           52)],
             '$phi88.1': [(<numba.core.ir.Assign object at 0x7f32e038a9c0>,
                           56)],
             '$phi92.2': [(<numba.core.ir.Assign object at 0x7f32e038b0b0>,
                           88)],
             'X': [(<numba.core.ir.Assign object at 0x7f32e038a0f0>, 0)],
             'chunk': [(<numba.core.ir.Assign object at 0x7f32e038b590>, 92)],
             'hypervector_size': [(<numba.core.ir.Assign object at 0x7f32e038a120>,
                                   0)],
             'i': [(<numba.core.ir.Assign object at 0x7f32e038a7e0>, 56)],
             'k': [(<numba.core.ir.Assign object at 0x7f32e038b230>, 92)],
             'pos': [(<numba.core.ir.Assign object at 0x7f32e038b9b0>, 92)]})
SSA violators <numba.core.utils.OrderedSet object at 0x7f32e06ad040>
bytecode dump:
>          0	NOP(arg=None, lineno=121)
           2	RESUME(arg=0, lineno=121)
           4	LOAD_FAST(arg=0, lineno=124)
           6	LOAD_FAST(arg=4, lineno=124)
           8	LOAD_CONST(arg=0, lineno=124)
          10	LOAD_CONST(arg=0, lineno=124)
          12	BUILD_SLICE(arg=2, lineno=124)
          14	BUILD_TUPLE(arg=2, lineno=124)
          16	BINARY_SUBSCR(arg=None, lineno=124)
          20	GET_ITER(arg=None, lineno=124)
>         22	FOR_ITER(arg=71, lineno=124)
          26	STORE_FAST(arg=6, lineno=124)
          28	LOAD_FAST(arg=6, lineno=125)
          30	LOAD_CONST(arg=1, lineno=125)
          32	BINARY_OP(arg=2, lineno=125)
          36	STORE_FAST(arg=7, lineno=125)
          38	LOAD_FAST(arg=6, lineno=126)
          40	LOAD_CONST(arg=1, lineno=126)
          42	BINARY_OP(arg=6, lineno=126)
          46	STORE_FAST(arg=8, lineno=126)
          48	LOAD_FAST(arg=5, lineno=128)
          50	LOAD_FAST(arg=2, lineno=128)
          52	LOAD_FAST(arg=3, lineno=128)
          54	BINARY_OP(arg=0, lineno=128)
          58	LOAD_FAST(arg=7, lineno=128)
          60	BUILD_TUPLE(arg=2, lineno=128)
          62	COPY(arg=2, lineno=128)
          64	COPY(arg=2, lineno=128)
          66	BINARY_SUBSCR(arg=None, lineno=128)
          70	LOAD_CONST(arg=2, lineno=128)
          72	LOAD_FAST(arg=8, lineno=128)
          74	BINARY_OP(arg=3, lineno=128)
          78	BINARY_OP(arg=20, lineno=128)
          82	SWAP(arg=3, lineno=128)
          84	SWAP(arg=2, lineno=128)
          86	STORE_SUBSCR(arg=None, lineno=128)
          90	LOAD_FAST(arg=6, lineno=130)
          92	LOAD_FAST(arg=1, lineno=130)
          94	BINARY_OP(arg=0, lineno=130)
          98	LOAD_CONST(arg=1, lineno=130)
         100	BINARY_OP(arg=2, lineno=130)
         104	STORE_FAST(arg=7, lineno=130)
         106	LOAD_FAST(arg=6, lineno=131)
         108	LOAD_FAST(arg=1, lineno=131)
         110	BINARY_OP(arg=0, lineno=131)
         114	LOAD_CONST(arg=1, lineno=131)
         116	BINARY_OP(arg=6, lineno=131)
         120	STORE_FAST(arg=8, lineno=131)
         122	LOAD_FAST(arg=5, lineno=132)
         124	LOAD_FAST(arg=2, lineno=132)
         126	LOAD_FAST(arg=3, lineno=132)
         128	BINARY_OP(arg=0, lineno=132)
         132	LOAD_FAST(arg=7, lineno=132)
         134	BUILD_TUPLE(arg=2, lineno=132)
         136	COPY(arg=2, lineno=132)
         138	COPY(arg=2, lineno=132)
         140	BINARY_SUBSCR(arg=None, lineno=132)
         144	LOAD_CONST(arg=2, lineno=132)
         146	LOAD_FAST(arg=8, lineno=132)
         148	BINARY_OP(arg=3, lineno=132)
         152	UNARY_INVERT(arg=None, lineno=132)
         154	BINARY_OP(arg=14, lineno=132)
         158	SWAP(arg=3, lineno=132)
         160	SWAP(arg=2, lineno=132)
         162	STORE_SUBSCR(arg=None, lineno=132)
         166	JUMP_BACKWARD(arg=73, lineno=132)
>        168	END_FOR(arg=None, lineno=124)
         170	RETURN_CONST(arg=0, lineno=124)
pending: deque([State(pc_initial=0 nstack_initial=0)])
stack: []
state.pc_initial: State(pc_initial=0 nstack_initial=0)
dispatch pc=0, inst=NOP(arg=None, lineno=121)
stack []
dispatch pc=2, inst=RESUME(arg=0, lineno=121)
stack []
dispatch pc=4, inst=LOAD_FAST(arg=0, lineno=124)
stack []
dispatch pc=6, inst=LOAD_FAST(arg=4, lineno=124)
stack ['$hypervectors4.0']
dispatch pc=8, inst=LOAD_CONST(arg=0, lineno=124)
stack ['$hypervectors4.0', '$symbol6.1']
dispatch pc=10, inst=LOAD_CONST(arg=0, lineno=124)
stack ['$hypervectors4.0', '$symbol6.1', '$const8.2']
dispatch pc=12, inst=BUILD_SLICE(arg=2, lineno=124)
stack ['$hypervectors4.0', '$symbol6.1', '$const8.2', '$const10.3']
dispatch pc=14, inst=BUILD_TUPLE(arg=2, lineno=124)
stack ['$hypervectors4.0', '$symbol6.1', '$12build_slice.5']
dispatch pc=16, inst=BINARY_SUBSCR(arg=None, lineno=124)
stack ['$hypervectors4.0', '$14build_tuple.6']
dispatch pc=20, inst=GET_ITER(arg=None, lineno=124)
stack ['$16binary_subscr.7']
end state. edges=[Edge(pc=22, stack=('$20get_iter.8',), blockstack=(), npush=0)]
pending: deque([State(pc_initial=22 nstack_initial=1)])
stack: ['$phi22.0']
state.pc_initial: State(pc_initial=22 nstack_initial=1)
dispatch pc=22, inst=FOR_ITER(arg=71, lineno=124)
stack ['$phi22.0']
end state. edges=[Edge(pc=168, stack=('$phi22.0', '$22for_iter.2'), blockstack=(), npush=0), Edge(pc=26, stack=('$phi22.0', '$22for_iter.2'), blockstack=(), npush=0)]
pending: deque([State(pc_initial=168 nstack_initial=2), State(pc_initial=26 nstack_initial=2)])
stack: ['$phi168.0', '$phi168.1']
state.pc_initial: State(pc_initial=168 nstack_initial=2)
dispatch pc=168, inst=END_FOR(arg=None, lineno=124)
stack ['$phi168.0', '$phi168.1']
dispatch pc=170, inst=RETURN_CONST(arg=0, lineno=124)
stack []
end state. edges=[]
pending: deque([State(pc_initial=26 nstack_initial=2)])
stack: ['$phi26.0', '$phi26.1']
state.pc_initial: State(pc_initial=26 nstack_initial=2)
dispatch pc=26, inst=STORE_FAST(arg=6, lineno=124)
stack ['$phi26.0', '$phi26.1']
dispatch pc=28, inst=LOAD_FAST(arg=6, lineno=125)
stack ['$phi26.0']
dispatch pc=30, inst=LOAD_CONST(arg=1, lineno=125)
stack ['$phi26.0', '$k28.2']
dispatch pc=32, inst=BINARY_OP(arg=2, lineno=125)
stack ['$phi26.0', '$k28.2', '$const30.3']
dispatch pc=36, inst=STORE_FAST(arg=7, lineno=125)
stack ['$phi26.0', '$binop_floordiv32.4']
dispatch pc=38, inst=LOAD_FAST(arg=6, lineno=126)
stack ['$phi26.0']
dispatch pc=40, inst=LOAD_CONST(arg=1, lineno=126)
stack ['$phi26.0', '$k38.5']
dispatch pc=42, inst=BINARY_OP(arg=6, lineno=126)
stack ['$phi26.0', '$k38.5', '$const40.6']
dispatch pc=46, inst=STORE_FAST(arg=8, lineno=126)
stack ['$phi26.0', '$binop_mod42.7']
dispatch pc=48, inst=LOAD_FAST(arg=5, lineno=128)
stack ['$phi26.0']
dispatch pc=50, inst=LOAD_FAST(arg=2, lineno=128)
stack ['$phi26.0', '$X48.8']
dispatch pc=52, inst=LOAD_FAST(arg=3, lineno=128)
stack ['$phi26.0', '$X48.8', '$graph_index50.9']
dispatch pc=54, inst=BINARY_OP(arg=0, lineno=128)
stack ['$phi26.0', '$X48.8', '$graph_index50.9', '$node52.10']
dispatch pc=58, inst=LOAD_FAST(arg=7, lineno=128)
stack ['$phi26.0', '$X48.8', '$binop_add54.11']
dispatch pc=60, inst=BUILD_TUPLE(arg=2, lineno=128)
stack ['$phi26.0', '$X48.8', '$binop_add54.11', '$chunk58.12']
dispatch pc=62, inst=COPY(arg=2, lineno=128)
stack ['$phi26.0', '$X48.8', '$60build_tuple.13']
dispatch pc=64, inst=COPY(arg=2, lineno=128)
stack ['$phi26.0', '$X48.8', '$60build_tuple.13', '$X48.8']
dispatch pc=66, inst=BINARY_SUBSCR(arg=None, lineno=128)
stack ['$phi26.0', '$X48.8', '$60build_tuple.13', '$X48.8', '$60build_tuple.13']
dispatch pc=70, inst=LOAD_CONST(arg=2, lineno=128)
stack ['$phi26.0', '$X48.8', '$60build_tuple.13', '$66binary_subscr.14']
dispatch pc=72, inst=LOAD_FAST(arg=8, lineno=128)
stack ['$phi26.0', '$X48.8', '$60build_tuple.13', '$66binary_subscr.14', '$const70.15']
dispatch pc=74, inst=BINARY_OP(arg=3, lineno=128)
stack ['$phi26.0', '$X48.8', '$60build_tuple.13', '$66binary_subscr.14', '$const70.15', '$pos72.16']
dispatch pc=78, inst=BINARY_OP(arg=20, lineno=128)
stack ['$phi26.0', '$X48.8', '$60build_tuple.13', '$66binary_subscr.14', '$binop_lshift74.17']
dispatch pc=82, inst=SWAP(arg=3, lineno=128)
stack ['$phi26.0', '$X48.8', '$60build_tuple.13', '$binop_ior78.18']
dispatch pc=84, inst=SWAP(arg=2, lineno=128)
stack ['$phi26.0', '$binop_ior78.18', '$60build_tuple.13', '$X48.8']
dispatch pc=86, inst=STORE_SUBSCR(arg=None, lineno=128)
stack ['$phi26.0', '$binop_ior78.18', '$X48.8', '$60build_tuple.13']
dispatch pc=90, inst=LOAD_FAST(arg=6, lineno=130)
stack ['$phi26.0']
dispatch pc=92, inst=LOAD_FAST(arg=1, lineno=130)
stack ['$phi26.0', '$k90.19']
dispatch pc=94, inst=BINARY_OP(arg=0, lineno=130)
stack ['$phi26.0', '$k90.19', '$hypervector_size92.20']
dispatch pc=98, inst=LOAD_CONST(arg=1, lineno=130)
stack ['$phi26.0', '$binop_add94.21']
dispatch pc=100, inst=BINARY_OP(arg=2, lineno=130)
stack ['$phi26.0', '$binop_add94.21', '$const98.22']
dispatch pc=104, inst=STORE_FAST(arg=7, lineno=130)
stack ['$phi26.0', '$binop_floordiv100.23']
dispatch pc=106, inst=LOAD_FAST(arg=6, lineno=131)
stack ['$phi26.0']
dispatch pc=108, inst=LOAD_FAST(arg=1, lineno=131)
stack ['$phi26.0', '$k106.24']
dispatch pc=110, inst=BINARY_OP(arg=0, lineno=131)
stack ['$phi26.0', '$k106.24', '$hypervector_size108.25']
dispatch pc=114, inst=LOAD_CONST(arg=1, lineno=131)
stack ['$phi26.0', '$binop_add110.26']
dispatch pc=116, inst=BINARY_OP(arg=6, lineno=131)
stack ['$phi26.0', '$binop_add110.26', '$const114.27']
dispatch pc=120, inst=STORE_FAST(arg=8, lineno=131)
stack ['$phi26.0', '$binop_mod116.28']
dispatch pc=122, inst=LOAD_FAST(arg=5, lineno=132)
stack ['$phi26.0']
dispatch pc=124, inst=LOAD_FAST(arg=2, lineno=132)
stack ['$phi26.0', '$X122.29']
dispatch pc=126, inst=LOAD_FAST(arg=3, lineno=132)
stack ['$phi26.0', '$X122.29', '$graph_index124.30']
dispatch pc=128, inst=BINARY_OP(arg=0, lineno=132)
stack ['$phi26.0', '$X122.29', '$graph_index124.30', '$node126.31']
dispatch pc=132, inst=LOAD_FAST(arg=7, lineno=132)
stack ['$phi26.0', '$X122.29', '$binop_add128.32']
dispatch pc=134, inst=BUILD_TUPLE(arg=2, lineno=132)
stack ['$phi26.0', '$X122.29', '$binop_add128.32', '$chunk132.33']
dispatch pc=136, inst=COPY(arg=2, lineno=132)
stack ['$phi26.0', '$X122.29', '$134build_tuple.34']
dispatch pc=138, inst=COPY(arg=2, lineno=132)
stack ['$phi26.0', '$X122.29', '$134build_tuple.34', '$X122.29']
dispatch pc=140, inst=BINARY_SUBSCR(arg=None, lineno=132)
stack ['$phi26.0', '$X122.29', '$134build_tuple.34', '$X122.29', '$134build_tuple.34']
dispatch pc=144, inst=LOAD_CONST(arg=2, lineno=132)
stack ['$phi26.0', '$X122.29', '$134build_tuple.34', '$140binary_subscr.35']
dispatch pc=146, inst=LOAD_FAST(arg=8, lineno=132)
stack ['$phi26.0', '$X122.29', '$134build_tuple.34', '$140binary_subscr.35', '$const144.36']
dispatch pc=148, inst=BINARY_OP(arg=3, lineno=132)
stack ['$phi26.0', '$X122.29', '$134build_tuple.34', '$140binary_subscr.35', '$const144.36', '$pos146.37']
dispatch pc=152, inst=UNARY_INVERT(arg=None, lineno=132)
stack ['$phi26.0', '$X122.29', '$134build_tuple.34', '$140binary_subscr.35', '$binop_lshift148.38']
dispatch pc=154, inst=BINARY_OP(arg=14, lineno=132)
stack ['$phi26.0', '$X122.29', '$134build_tuple.34', '$140binary_subscr.35', '$152unary_invert.39']
dispatch pc=158, inst=SWAP(arg=3, lineno=132)
stack ['$phi26.0', '$X122.29', '$134build_tuple.34', '$binop_iand154.40']
dispatch pc=160, inst=SWAP(arg=2, lineno=132)
stack ['$phi26.0', '$binop_iand154.40', '$134build_tuple.34', '$X122.29']
dispatch pc=162, inst=STORE_SUBSCR(arg=None, lineno=132)
stack ['$phi26.0', '$binop_iand154.40', '$X122.29', '$134build_tuple.34']
dispatch pc=166, inst=JUMP_BACKWARD(arg=73, lineno=132)
stack ['$phi26.0']
end state. edges=[Edge(pc=22, stack=('$phi26.0',), blockstack=(), npush=0)]
pending: deque([State(pc_initial=22 nstack_initial=1)])
-------------------------Prune PHIs-------------------------
Used_phis: defaultdict(<class 'set'>,
            {State(pc_initial=0 nstack_initial=0): set(),
             State(pc_initial=22 nstack_initial=1): {'$phi22.0'},
             State(pc_initial=26 nstack_initial=2): {'$phi26.1'},
             State(pc_initial=168 nstack_initial=2): set()})
defmap: {'$phi168.1': State(pc_initial=22 nstack_initial=1),
 '$phi22.0': State(pc_initial=0 nstack_initial=0),
 '$phi26.1': State(pc_initial=22 nstack_initial=1)}
phismap: defaultdict(<class 'set'>,
            {'$phi168.0': {('$phi22.0', State(pc_initial=22 nstack_initial=1))},
             '$phi168.1': {('$22for_iter.2',
                            State(pc_initial=22 nstack_initial=1))},
             '$phi22.0': {('$20get_iter.8',
                           State(pc_initial=0 nstack_initial=0)),
                          ('$phi26.0', State(pc_initial=26 nstack_initial=2))},
             '$phi26.0': {('$phi22.0', State(pc_initial=22 nstack_initial=1))},
             '$phi26.1': {('$22for_iter.2',
                           State(pc_initial=22 nstack_initial=1))}})
changing phismap: defaultdict(<class 'set'>,
            {'$phi168.0': {('$20get_iter.8',
                            State(pc_initial=0 nstack_initial=0)),
                           ('$phi26.0', State(pc_initial=26 nstack_initial=2))},
             '$phi168.1': {('$22for_iter.2',
                            State(pc_initial=22 nstack_initial=1))},
             '$phi22.0': {('$20get_iter.8',
                           State(pc_initial=0 nstack_initial=0)),
                          ('$phi22.0', State(pc_initial=22 nstack_initial=1))},
             '$phi26.0': {('$20get_iter.8',
                           State(pc_initial=0 nstack_initial=0))},
             '$phi26.1': {('$22for_iter.2',
                           State(pc_initial=22 nstack_initial=1))}})
changing phismap: defaultdict(<class 'set'>,
            {'$phi168.0': {('$20get_iter.8',
                            State(pc_initial=0 nstack_initial=0))},
             '$phi168.1': {('$22for_iter.2',
                            State(pc_initial=22 nstack_initial=1))},
             '$phi22.0': {('$20get_iter.8',
                           State(pc_initial=0 nstack_initial=0))},
             '$phi26.0': {('$20get_iter.8',
                           State(pc_initial=0 nstack_initial=0))},
             '$phi26.1': {('$22for_iter.2',
                           State(pc_initial=22 nstack_initial=1))}})
changing phismap: defaultdict(<class 'set'>,
            {'$phi168.0': {('$20get_iter.8',
                            State(pc_initial=0 nstack_initial=0))},
             '$phi168.1': {('$22for_iter.2',
                            State(pc_initial=22 nstack_initial=1))},
             '$phi22.0': {('$20get_iter.8',
                           State(pc_initial=0 nstack_initial=0))},
             '$phi26.0': {('$20get_iter.8',
                           State(pc_initial=0 nstack_initial=0))},
             '$phi26.1': {('$22for_iter.2',
                           State(pc_initial=22 nstack_initial=1))}})
keep phismap: {'$phi22.0': {('$20get_iter.8', State(pc_initial=0 nstack_initial=0))},
 '$phi26.1': {('$22for_iter.2', State(pc_initial=22 nstack_initial=1))}}
new_out: defaultdict(<class 'dict'>,
            {State(pc_initial=0 nstack_initial=0): {'$phi22.0': '$20get_iter.8'},
             State(pc_initial=22 nstack_initial=1): {'$phi26.1': '$22for_iter.2'}})
----------------------DONE Prune PHIs-----------------------
block_infos State(pc_initial=0 nstack_initial=0):
AdaptBlockInfo(insts=((0, {}), (2, {}), (4, {'res': '$hypervectors4.0'}), (6, {'res': '$symbol6.1'}), (8, {'res': '$const8.2'}), (10, {'res': '$const10.3'}), (12, {'start': '$const8.2', 'stop': '$const10.3', 'step': None, 'res': '$12build_slice.5', 'slicevar': '$12build_slice.4'}), (14, {'items': ['$symbol6.1', '$12build_slice.5'], 'res': '$14build_tuple.6'}), (16, {'index': '$14build_tuple.6', 'target': '$hypervectors4.0', 'res': '$16binary_subscr.7'}), (20, {'value': '$16binary_subscr.7', 'res': '$20get_iter.8'})), outgoing_phis={'$phi22.0': '$20get_iter.8'}, blockstack=(), active_try_block=None, outgoing_edgepushed={22: ('$20get_iter.8',)})
block_infos State(pc_initial=22 nstack_initial=1):
AdaptBlockInfo(insts=((22, {'iterator': '$phi22.0', 'pair': '$22for_iter.1', 'indval': '$22for_iter.2', 'pred': '$22for_iter.3'}),), outgoing_phis={'$phi26.1': '$22for_iter.2'}, blockstack=(), active_try_block=None, outgoing_edgepushed={168: ('$phi22.0', '$22for_iter.2'), 26: ('$phi22.0', '$22for_iter.2')})
block_infos State(pc_initial=26 nstack_initial=2):
AdaptBlockInfo(insts=((26, {'value': '$phi26.1'}), (28, {'res': '$k28.2'}), (30, {'res': '$const30.3'}), (32, {'op': '//', 'lhs': '$k28.2', 'rhs': '$const30.3', 'res': '$binop_floordiv32.4'}), (36, {'value': '$binop_floordiv32.4'}), (38, {'res': '$k38.5'}), (40, {'res': '$const40.6'}), (42, {'op': '%', 'lhs': '$k38.5', 'rhs': '$const40.6', 'res': '$binop_mod42.7'}), (46, {'value': '$binop_mod42.7'}), (48, {'res': '$X48.8'}), (50, {'res': '$graph_index50.9'}), (52, {'res': '$node52.10'}), (54, {'op': '+', 'lhs': '$graph_index50.9', 'rhs': '$node52.10', 'res': '$binop_add54.11'}), (58, {'res': '$chunk58.12'}), (60, {'items': ['$binop_add54.11', '$chunk58.12'], 'res': '$60build_tuple.13'}), (66, {'index': '$60build_tuple.13', 'target': '$X48.8', 'res': '$66binary_subscr.14'}), (70, {'res': '$const70.15'}), (72, {'res': '$pos72.16'}), (74, {'op': '<<', 'lhs': '$const70.15', 'rhs': '$pos72.16', 'res': '$binop_lshift74.17'}), (78, {'op': '|=', 'lhs': '$66binary_subscr.14', 'rhs': '$binop_lshift74.17', 'res': '$binop_ior78.18'}), (86, {'target': '$X48.8', 'index': '$60build_tuple.13', 'value': '$binop_ior78.18'}), (90, {'res': '$k90.19'}), (92, {'res': '$hypervector_size92.20'}), (94, {'op': '+', 'lhs': '$k90.19', 'rhs': '$hypervector_size92.20', 'res': '$binop_add94.21'}), (98, {'res': '$const98.22'}), (100, {'op': '//', 'lhs': '$binop_add94.21', 'rhs': '$const98.22', 'res': '$binop_floordiv100.23'}), (104, {'value': '$binop_floordiv100.23'}), (106, {'res': '$k106.24'}), (108, {'res': '$hypervector_size108.25'}), (110, {'op': '+', 'lhs': '$k106.24', 'rhs': '$hypervector_size108.25', 'res': '$binop_add110.26'}), (114, {'res': '$const114.27'}), (116, {'op': '%', 'lhs': '$binop_add110.26', 'rhs': '$const114.27', 'res': '$binop_mod116.28'}), (120, {'value': '$binop_mod116.28'}), (122, {'res': '$X122.29'}), (124, {'res': '$graph_index124.30'}), (126, {'res': '$node126.31'}), (128, {'op': '+', 'lhs': '$graph_index124.30', 'rhs': '$node126.31', 'res': '$binop_add128.32'}), (132, {'res': '$chunk132.33'}), (134, {'items': ['$binop_add128.32', '$chunk132.33'], 'res': '$134build_tuple.34'}), (140, {'index': '$134build_tuple.34', 'target': '$X122.29', 'res': '$140binary_subscr.35'}), (144, {'res': '$const144.36'}), (146, {'res': '$pos146.37'}), (148, {'op': '<<', 'lhs': '$const144.36', 'rhs': '$pos146.37', 'res': '$binop_lshift148.38'}), (152, {'value': '$binop_lshift148.38', 'res': '$152unary_invert.39'}), (154, {'op': '&=', 'lhs': '$140binary_subscr.35', 'rhs': '$152unary_invert.39', 'res': '$binop_iand154.40'}), (162, {'target': '$X122.29', 'index': '$134build_tuple.34', 'value': '$binop_iand154.40'}), (166, {})), outgoing_phis={}, blockstack=(), active_try_block=None, outgoing_edgepushed={22: ('$phi26.0',)})
block_infos State(pc_initial=168 nstack_initial=2):
AdaptBlockInfo(insts=((170, {'retval': '$const170.2', 'castval': '$170return_const.3'}),), outgoing_phis={}, blockstack=(), active_try_block=None, outgoing_edgepushed={})
label 0:
    hypervectors = arg(0, name=hypervectors) ['hypervectors']
    hypervector_size = arg(1, name=hypervector_size) ['hypervector_size']
    graph_index = arg(2, name=graph_index)   ['graph_index']
    node = arg(3, name=node)                 ['node']
    symbol = arg(4, name=symbol)             ['symbol']
    X = arg(5, name=X)                       ['X']
    $const8.2 = const(NoneType, None)        ['$const8.2']
    $const10.3 = const(NoneType, None)       ['$const10.3']
    $12build_slice.4 = global(slice: <class 'slice'>) ['$12build_slice.4']
    $12build_slice.5 = call $12build_slice.4($const8.2, $const10.3, func=$12build_slice.4, args=(Var($const8.2, graphs.py:124), Var($const10.3, graphs.py:124)), kws=(), vararg=None, varkwarg=None, target=None) ['$12build_slice.4', '$12build_slice.5', '$const10.3', '$const8.2']
    $14build_tuple.6 = build_tuple(items=[Var(symbol, graphs.py:121), Var($12build_slice.5, graphs.py:124)]) ['$12build_slice.5', '$14build_tuple.6', 'symbol']
    $16binary_subscr.7 = getitem(value=hypervectors, index=$14build_tuple.6, fn=<built-in function getitem>) ['$14build_tuple.6', '$16binary_subscr.7', 'hypervectors']
    $20get_iter.8 = getiter(value=$16binary_subscr.7) ['$16binary_subscr.7', '$20get_iter.8']
    $phi22.0 = $20get_iter.8                 ['$20get_iter.8', '$phi22.0']
    jump 22                                  []
label 22:
    $22for_iter.1 = iternext(value=$phi22.0) ['$22for_iter.1', '$phi22.0']
    $22for_iter.2 = pair_first(value=$22for_iter.1) ['$22for_iter.1', '$22for_iter.2']
    $22for_iter.3 = pair_second(value=$22for_iter.1) ['$22for_iter.1', '$22for_iter.3']
    $phi26.1 = $22for_iter.2                 ['$22for_iter.2', '$phi26.1']
    branch $22for_iter.3, 26, 168            ['$22for_iter.3']
label 26:
    k = $phi26.1                             ['$phi26.1', 'k']
    $const30.3 = const(int, 32)              ['$const30.3']
    chunk = k // $const30.3                  ['$const30.3', 'chunk', 'k']
    $const40.6 = const(int, 32)              ['$const40.6']
    pos = k % $const40.6                     ['$const40.6', 'k', 'pos']
    $binop_add54.11 = graph_index + node     ['$binop_add54.11', 'graph_index', 'node']
    $60build_tuple.13 = build_tuple(items=[Var($binop_add54.11, graphs.py:128), Var(chunk, graphs.py:125)]) ['$60build_tuple.13', '$binop_add54.11', 'chunk']
    $66binary_subscr.14 = getitem(value=X, index=$60build_tuple.13, fn=<built-in function getitem>) ['$60build_tuple.13', '$66binary_subscr.14', 'X']
    $const70.15 = const(int, 1)              ['$const70.15']
    $binop_lshift74.17 = $const70.15 << pos  ['$binop_lshift74.17', '$const70.15', 'pos']
    $binop_ior78.18 = inplace_binop(fn=<built-in function ior>, immutable_fn=<built-in function or_>, lhs=$66binary_subscr.14, rhs=$binop_lshift74.17, static_lhs=Undefined, static_rhs=Undefined) ['$66binary_subscr.14', '$binop_ior78.18', '$binop_lshift74.17']
    X[$60build_tuple.13] = $binop_ior78.18   ['$60build_tuple.13', '$binop_ior78.18', 'X']
    $binop_add94.21 = k + hypervector_size   ['$binop_add94.21', 'hypervector_size', 'k']
    $const98.22 = const(int, 32)             ['$const98.22']
    chunk = $binop_add94.21 // $const98.22   ['$binop_add94.21', '$const98.22', 'chunk']
    $binop_add110.26 = k + hypervector_size  ['$binop_add110.26', 'hypervector_size', 'k']
    $const114.27 = const(int, 32)            ['$const114.27']
    pos = $binop_add110.26 % $const114.27    ['$binop_add110.26', '$const114.27', 'pos']
    $binop_add128.32 = graph_index + node    ['$binop_add128.32', 'graph_index', 'node']
    $134build_tuple.34 = build_tuple(items=[Var($binop_add128.32, graphs.py:132), Var(chunk, graphs.py:125)]) ['$134build_tuple.34', '$binop_add128.32', 'chunk']
    $140binary_subscr.35 = getitem(value=X, index=$134build_tuple.34, fn=<built-in function getitem>) ['$134build_tuple.34', '$140binary_subscr.35', 'X']
    $const144.36 = const(int, 1)             ['$const144.36']
    $binop_lshift148.38 = $const144.36 << pos ['$binop_lshift148.38', '$const144.36', 'pos']
    $152unary_invert.39 = unary(fn=<built-in function invert>, value=$binop_lshift148.38) ['$152unary_invert.39', '$binop_lshift148.38']
    $binop_iand154.40 = inplace_binop(fn=<built-in function iand>, immutable_fn=<built-in function and_>, lhs=$140binary_subscr.35, rhs=$152unary_invert.39, static_lhs=Undefined, static_rhs=Undefined) ['$140binary_subscr.35', '$152unary_invert.39', '$binop_iand154.40']
    X[$134build_tuple.34] = $binop_iand154.40 ['$134build_tuple.34', '$binop_iand154.40', 'X']
    jump 22                                  []
label 168:
    $const170.2 = const(NoneType, None)      ['$const170.2']
    $170return_const.3 = cast(value=$const170.2) ['$170return_const.3', '$const170.2']
    return $170return_const.3                ['$170return_const.3']

==== SSA block analysis pass on 0
Running <numba.core.ssa._GatherDefsHandler object at 0x7f32e0104ce0>
on stmt: hypervectors = arg(0, name=hypervectors)
on stmt: hypervector_size = arg(1, name=hypervector_size)
on stmt: graph_index = arg(2, name=graph_index)
on stmt: node = arg(3, name=node)
on stmt: symbol = arg(4, name=symbol)
on stmt: X = arg(5, name=X)
on stmt: $const8.2 = const(NoneType, None)
on stmt: $const10.3 = const(NoneType, None)
on stmt: $12build_slice.4 = global(slice: <class 'slice'>)
on stmt: $12build_slice.5 = call $12build_slice.4($const8.2, $const10.3, func=$12build_slice.4, args=(Var($const8.2, graphs.py:124), Var($const10.3, graphs.py:124)), kws=(), vararg=None, varkwarg=None, target=None)
on stmt: $14build_tuple.6 = build_tuple(items=[Var(symbol, graphs.py:121), Var($12build_slice.5, graphs.py:124)])
on stmt: $16binary_subscr.7 = getitem(value=hypervectors, index=$14build_tuple.6, fn=<built-in function getitem>)
on stmt: $20get_iter.8 = getiter(value=$16binary_subscr.7)
on stmt: $phi22.0 = $20get_iter.8
on stmt: jump 22
==== SSA block analysis pass on 22
Running <numba.core.ssa._GatherDefsHandler object at 0x7f32e0104ce0>
on stmt: $22for_iter.1 = iternext(value=$phi22.0)
on stmt: $22for_iter.2 = pair_first(value=$22for_iter.1)
on stmt: $22for_iter.3 = pair_second(value=$22for_iter.1)
on stmt: $phi26.1 = $22for_iter.2
on stmt: branch $22for_iter.3, 26, 168
==== SSA block analysis pass on 26
Running <numba.core.ssa._GatherDefsHandler object at 0x7f32e0104ce0>
on stmt: k = $phi26.1
on stmt: $const30.3 = const(int, 32)
on stmt: chunk = k // $const30.3
on stmt: $const40.6 = const(int, 32)
on stmt: pos = k % $const40.6
on stmt: $binop_add54.11 = graph_index + node
on stmt: $60build_tuple.13 = build_tuple(items=[Var($binop_add54.11, graphs.py:128), Var(chunk, graphs.py:125)])
on stmt: $66binary_subscr.14 = getitem(value=X, index=$60build_tuple.13, fn=<built-in function getitem>)
on stmt: $const70.15 = const(int, 1)
on stmt: $binop_lshift74.17 = $const70.15 << pos
on stmt: $binop_ior78.18 = inplace_binop(fn=<built-in function ior>, immutable_fn=<built-in function or_>, lhs=$66binary_subscr.14, rhs=$binop_lshift74.17, static_lhs=Undefined, static_rhs=Undefined)
on stmt: X[$60build_tuple.13] = $binop_ior78.18
on stmt: $binop_add94.21 = k + hypervector_size
on stmt: $const98.22 = const(int, 32)
on stmt: chunk = $binop_add94.21 // $const98.22
on stmt: $binop_add110.26 = k + hypervector_size
on stmt: $const114.27 = const(int, 32)
on stmt: pos = $binop_add110.26 % $const114.27
on stmt: $binop_add128.32 = graph_index + node
on stmt: $134build_tuple.34 = build_tuple(items=[Var($binop_add128.32, graphs.py:132), Var(chunk, graphs.py:125)])
on stmt: $140binary_subscr.35 = getitem(value=X, index=$134build_tuple.34, fn=<built-in function getitem>)
on stmt: $const144.36 = const(int, 1)
on stmt: $binop_lshift148.38 = $const144.36 << pos
on stmt: $152unary_invert.39 = unary(fn=<built-in function invert>, value=$binop_lshift148.38)
on stmt: $binop_iand154.40 = inplace_binop(fn=<built-in function iand>, immutable_fn=<built-in function and_>, lhs=$140binary_subscr.35, rhs=$152unary_invert.39, static_lhs=Undefined, static_rhs=Undefined)
on stmt: X[$134build_tuple.34] = $binop_iand154.40
on stmt: jump 22
==== SSA block analysis pass on 168
Running <numba.core.ssa._GatherDefsHandler object at 0x7f32e0104ce0>
on stmt: $const170.2 = const(NoneType, None)
on stmt: $170return_const.3 = cast(value=$const170.2)
on stmt: return $170return_const.3
defs defaultdict(<class 'list'>,
            {'$12build_slice.4': [(<numba.core.ir.Assign object at 0x7f32e0105d00>,
                                   0)],
             '$12build_slice.5': [(<numba.core.ir.Assign object at 0x7f32e0105df0>,
                                   0)],
             '$134build_tuple.34': [(<numba.core.ir.Assign object at 0x7f32dffb1070>,
                                     26)],
             '$140binary_subscr.35': [(<numba.core.ir.Assign object at 0x7f32dffb11f0>,
                                       26)],
             '$14build_tuple.6': [(<numba.core.ir.Assign object at 0x7f32e0105f10>,
                                   0)],
             '$152unary_invert.39': [(<numba.core.ir.Assign object at 0x7f32dffb1670>,
                                      26)],
             '$16binary_subscr.7': [(<numba.core.ir.Assign object at 0x7f32e0106060>,
                                     0)],
             '$170return_const.3': [(<numba.core.ir.Assign object at 0x7f32e01075c0>,
                                     168)],
             '$20get_iter.8': [(<numba.core.ir.Assign object at 0x7f32e0106180>,
                                0)],
             '$22for_iter.1': [(<numba.core.ir.Assign object at 0x7f32e0106390>,
                                22)],
             '$22for_iter.2': [(<numba.core.ir.Assign object at 0x7f32e01064b0>,
                                22)],
             '$22for_iter.3': [(<numba.core.ir.Assign object at 0x7f32e01065d0>,
                                22)],
             '$60build_tuple.13': [(<numba.core.ir.Assign object at 0x7f32e0107710>,
                                    26)],
             '$66binary_subscr.14': [(<numba.core.ir.Assign object at 0x7f32e0107890>,
                                      26)],
             '$binop_add110.26': [(<numba.core.ir.Assign object at 0x7f32dffb0740>,
                                   26)],
             '$binop_add128.32': [(<numba.core.ir.Assign object at 0x7f32dffb0e60>,
                                   26)],
             '$binop_add54.11': [(<numba.core.ir.Assign object at 0x7f32e0107500>,
                                  26)],
             '$binop_add94.21': [(<numba.core.ir.Assign object at 0x7f32dffb0110>,
                                  26)],
             '$binop_iand154.40': [(<numba.core.ir.Assign object at 0x7f32dffb17f0>,
                                    26)],
             '$binop_ior78.18': [(<numba.core.ir.Assign object at 0x7f32e0107d40>,
                                  26)],
             '$binop_lshift148.38': [(<numba.core.ir.Assign object at 0x7f32dffb1550>,
                                      26)],
             '$binop_lshift74.17': [(<numba.core.ir.Assign object at 0x7f32e0107bf0>,
                                     26)],
             '$const10.3': [(<numba.core.ir.Assign object at 0x7f32e0105be0>,
                             0)],
             '$const114.27': [(<numba.core.ir.Assign object at 0x7f32dffb0830>,
                               26)],
             '$const144.36': [(<numba.core.ir.Assign object at 0x7f32dffb12e0>,
                               26)],
             '$const170.2': [(<numba.core.ir.Assign object at 0x7f32e01071a0>,
                              168)],
             '$const30.3': [(<numba.core.ir.Assign object at 0x7f32e0106a20>,
                             26)],
             '$const40.6': [(<numba.core.ir.Assign object at 0x7f32e0106e70>,
                             26)],
             '$const70.15': [(<numba.core.ir.Assign object at 0x7f32e0107980>,
                              26)],
             '$const8.2': [(<numba.core.ir.Assign object at 0x7f32e0105ac0>,
                            0)],
             '$const98.22': [(<numba.core.ir.Assign object at 0x7f32dffb0200>,
                              26)],
             '$phi22.0': [(<numba.core.ir.Assign object at 0x7f32e01059a0>, 0)],
             '$phi26.1': [(<numba.core.ir.Assign object at 0x7f32e0106660>,
                           22)],
             'X': [(<numba.core.ir.Assign object at 0x7f32e0105790>, 0)],
             'chunk': [(<numba.core.ir.Assign object at 0x7f32e0106ba0>, 26),
                       (<numba.core.ir.Assign object at 0x7f32dffb0380>, 26)],
             'graph_index': [(<numba.core.ir.Assign object at 0x7f32e01054c0>,
                              0)],
             'hypervector_size': [(<numba.core.ir.Assign object at 0x7f32e01050a0>,
                                   0)],
             'hypervectors': [(<numba.core.ir.Assign object at 0x7f32e0105370>,
                               0)],
             'k': [(<numba.core.ir.Assign object at 0x7f32e0106810>, 26)],
             'node': [(<numba.core.ir.Assign object at 0x7f32e01055b0>, 0)],
             'pos': [(<numba.core.ir.Assign object at 0x7f32e0106ff0>, 26),
                     (<numba.core.ir.Assign object at 0x7f32dffb09b0>, 26)],
             'symbol': [(<numba.core.ir.Assign object at 0x7f32e01056a0>, 0)]})
SSA violators <numba.core.utils.OrderedSet object at 0x7f32e03b0ec0>
Fix SSA violator on var chunk
==== SSA block rewrite pass on 0
Running <numba.core.ssa._FreshVarHandler object at 0x7f32e02de9f0>
on stmt: hypervectors = arg(0, name=hypervectors)
on stmt: hypervector_size = arg(1, name=hypervector_size)
on stmt: graph_index = arg(2, name=graph_index)
on stmt: node = arg(3, name=node)
on stmt: symbol = arg(4, name=symbol)
on stmt: X = arg(5, name=X)
on stmt: $const8.2 = const(NoneType, None)
on stmt: $const10.3 = const(NoneType, None)
on stmt: $12build_slice.4 = global(slice: <class 'slice'>)
on stmt: $12build_slice.5 = call $12build_slice.4($const8.2, $const10.3, func=$12build_slice.4, args=(Var($const8.2, graphs.py:124), Var($const10.3, graphs.py:124)), kws=(), vararg=None, varkwarg=None, target=None)
on stmt: $14build_tuple.6 = build_tuple(items=[Var(symbol, graphs.py:121), Var($12build_slice.5, graphs.py:124)])
on stmt: $16binary_subscr.7 = getitem(value=hypervectors, index=$14build_tuple.6, fn=<built-in function getitem>)
on stmt: $20get_iter.8 = getiter(value=$16binary_subscr.7)
on stmt: $phi22.0 = $20get_iter.8
on stmt: jump 22
==== SSA block rewrite pass on 22
Running <numba.core.ssa._FreshVarHandler object at 0x7f32e02de9f0>
on stmt: $22for_iter.1 = iternext(value=$phi22.0)
on stmt: $22for_iter.2 = pair_first(value=$22for_iter.1)
on stmt: $22for_iter.3 = pair_second(value=$22for_iter.1)
on stmt: $phi26.1 = $22for_iter.2
on stmt: branch $22for_iter.3, 26, 168
==== SSA block rewrite pass on 26
Running <numba.core.ssa._FreshVarHandler object at 0x7f32e02de9f0>
on stmt: k = $phi26.1
on stmt: $const30.3 = const(int, 32)
on stmt: chunk = k // $const30.3
first assign: chunk
replaced with: chunk = k // $const30.3
on stmt: $const40.6 = const(int, 32)
on stmt: pos = k % $const40.6
on stmt: $binop_add54.11 = graph_index + node
on stmt: $60build_tuple.13 = build_tuple(items=[Var($binop_add54.11, graphs.py:128), Var(chunk, graphs.py:125)])
on stmt: $66binary_subscr.14 = getitem(value=X, index=$60build_tuple.13, fn=<built-in function getitem>)
on stmt: $const70.15 = const(int, 1)
on stmt: $binop_lshift74.17 = $const70.15 << pos
on stmt: $binop_ior78.18 = inplace_binop(fn=<built-in function ior>, immutable_fn=<built-in function or_>, lhs=$66binary_subscr.14, rhs=$binop_lshift74.17, static_lhs=Undefined, static_rhs=Undefined)
on stmt: X[$60build_tuple.13] = $binop_ior78.18
on stmt: $binop_add94.21 = k + hypervector_size
on stmt: $const98.22 = const(int, 32)
on stmt: chunk = $binop_add94.21 // $const98.22
replaced with: chunk.1 = $binop_add94.21 // $const98.22
on stmt: $binop_add110.26 = k + hypervector_size
on stmt: $const114.27 = const(int, 32)
on stmt: pos = $binop_add110.26 % $const114.27
on stmt: $binop_add128.32 = graph_index + node
on stmt: $134build_tuple.34 = build_tuple(items=[Var($binop_add128.32, graphs.py:132), Var(chunk, graphs.py:125)])
on stmt: $140binary_subscr.35 = getitem(value=X, index=$134build_tuple.34, fn=<built-in function getitem>)
on stmt: $const144.36 = const(int, 1)
on stmt: $binop_lshift148.38 = $const144.36 << pos
on stmt: $152unary_invert.39 = unary(fn=<built-in function invert>, value=$binop_lshift148.38)
on stmt: $binop_iand154.40 = inplace_binop(fn=<built-in function iand>, immutable_fn=<built-in function and_>, lhs=$140binary_subscr.35, rhs=$152unary_invert.39, static_lhs=Undefined, static_rhs=Undefined)
on stmt: X[$134build_tuple.34] = $binop_iand154.40
on stmt: jump 22
==== SSA block rewrite pass on 168
Running <numba.core.ssa._FreshVarHandler object at 0x7f32e02de9f0>
on stmt: $const170.2 = const(NoneType, None)
on stmt: $170return_const.3 = cast(value=$const170.2)
on stmt: return $170return_const.3
Replaced assignments: defaultdict(<class 'list'>,
            {26: [<numba.core.ir.Assign object at 0x7f32e0389400>,
                  <numba.core.ir.Assign object at 0x7f32e038b350>]})
==== SSA block rewrite pass on 0
Running <numba.core.ssa._FixSSAVars object at 0x7f32e02de9f0>
on stmt: hypervectors = arg(0, name=hypervectors)
on stmt: hypervector_size = arg(1, name=hypervector_size)
on stmt: graph_index = arg(2, name=graph_index)
on stmt: node = arg(3, name=node)
on stmt: symbol = arg(4, name=symbol)
on stmt: X = arg(5, name=X)
on stmt: $const8.2 = const(NoneType, None)
on stmt: $const10.3 = const(NoneType, None)
on stmt: $12build_slice.4 = global(slice: <class 'slice'>)
on stmt: $12build_slice.5 = call $12build_slice.4($const8.2, $const10.3, func=$12build_slice.4, args=(Var($const8.2, graphs.py:124), Var($const10.3, graphs.py:124)), kws=(), vararg=None, varkwarg=None, target=None)
on stmt: $14build_tuple.6 = build_tuple(items=[Var(symbol, graphs.py:121), Var($12build_slice.5, graphs.py:124)])
on stmt: $16binary_subscr.7 = getitem(value=hypervectors, index=$14build_tuple.6, fn=<built-in function getitem>)
on stmt: $20get_iter.8 = getiter(value=$16binary_subscr.7)
on stmt: $phi22.0 = $20get_iter.8
on stmt: jump 22
==== SSA block rewrite pass on 22
Running <numba.core.ssa._FixSSAVars object at 0x7f32e02de9f0>
on stmt: $22for_iter.1 = iternext(value=$phi22.0)
on stmt: $22for_iter.2 = pair_first(value=$22for_iter.1)
on stmt: $22for_iter.3 = pair_second(value=$22for_iter.1)
on stmt: $phi26.1 = $22for_iter.2
on stmt: branch $22for_iter.3, 26, 168
==== SSA block rewrite pass on 26
Running <numba.core.ssa._FixSSAVars object at 0x7f32e02de9f0>
on stmt: k = $phi26.1
on stmt: $const30.3 = const(int, 32)
on stmt: chunk = k // $const30.3
on stmt: $const40.6 = const(int, 32)
on stmt: pos = k % $const40.6
on stmt: $binop_add54.11 = graph_index + node
on stmt: $60build_tuple.13 = build_tuple(items=[Var($binop_add54.11, graphs.py:128), Var(chunk, graphs.py:125)])
find_def var='chunk' stmt=$60build_tuple.13 = build_tuple(items=[Var($binop_add54.11, graphs.py:128), Var(chunk, graphs.py:125)])
on stmt: $66binary_subscr.14 = getitem(value=X, index=$60build_tuple.13, fn=<built-in function getitem>)
on stmt: $const70.15 = const(int, 1)
on stmt: $binop_lshift74.17 = $const70.15 << pos
on stmt: $binop_ior78.18 = inplace_binop(fn=<built-in function ior>, immutable_fn=<built-in function or_>, lhs=$66binary_subscr.14, rhs=$binop_lshift74.17, static_lhs=Undefined, static_rhs=Undefined)
on stmt: X[$60build_tuple.13] = $binop_ior78.18
on stmt: $binop_add94.21 = k + hypervector_size
on stmt: $const98.22 = const(int, 32)
on stmt: chunk.1 = $binop_add94.21 // $const98.22
on stmt: $binop_add110.26 = k + hypervector_size
on stmt: $const114.27 = const(int, 32)
on stmt: pos = $binop_add110.26 % $const114.27
on stmt: $binop_add128.32 = graph_index + node
on stmt: $134build_tuple.34 = build_tuple(items=[Var($binop_add128.32, graphs.py:132), Var(chunk, graphs.py:125)])
find_def var='chunk' stmt=$134build_tuple.34 = build_tuple(items=[Var($binop_add128.32, graphs.py:132), Var(chunk, graphs.py:125)])
replaced with: $134build_tuple.34 = build_tuple(items=[Var($binop_add128.32, graphs.py:132), Var(chunk.1, graphs.py:130)])
on stmt: $140binary_subscr.35 = getitem(value=X, index=$134build_tuple.34, fn=<built-in function getitem>)
on stmt: $const144.36 = const(int, 1)
on stmt: $binop_lshift148.38 = $const144.36 << pos
on stmt: $152unary_invert.39 = unary(fn=<built-in function invert>, value=$binop_lshift148.38)
on stmt: $binop_iand154.40 = inplace_binop(fn=<built-in function iand>, immutable_fn=<built-in function and_>, lhs=$140binary_subscr.35, rhs=$152unary_invert.39, static_lhs=Undefined, static_rhs=Undefined)
on stmt: X[$134build_tuple.34] = $binop_iand154.40
on stmt: jump 22
==== SSA block rewrite pass on 168
Running <numba.core.ssa._FixSSAVars object at 0x7f32e02de9f0>
on stmt: $const170.2 = const(NoneType, None)
on stmt: $170return_const.3 = cast(value=$const170.2)
on stmt: return $170return_const.3
Fix SSA violator on var pos
==== SSA block rewrite pass on 0
Running <numba.core.ssa._FreshVarHandler object at 0x7f32e02588f0>
on stmt: hypervectors = arg(0, name=hypervectors)
on stmt: hypervector_size = arg(1, name=hypervector_size)
on stmt: graph_index = arg(2, name=graph_index)
on stmt: node = arg(3, name=node)
on stmt: symbol = arg(4, name=symbol)
on stmt: X = arg(5, name=X)
on stmt: $const8.2 = const(NoneType, None)
on stmt: $const10.3 = const(NoneType, None)
on stmt: $12build_slice.4 = global(slice: <class 'slice'>)
on stmt: $12build_slice.5 = call $12build_slice.4($const8.2, $const10.3, func=$12build_slice.4, args=(Var($const8.2, graphs.py:124), Var($const10.3, graphs.py:124)), kws=(), vararg=None, varkwarg=None, target=None)
on stmt: $14build_tuple.6 = build_tuple(items=[Var(symbol, graphs.py:121), Var($12build_slice.5, graphs.py:124)])
on stmt: $16binary_subscr.7 = getitem(value=hypervectors, index=$14build_tuple.6, fn=<built-in function getitem>)
on stmt: $20get_iter.8 = getiter(value=$16binary_subscr.7)
on stmt: $phi22.0 = $20get_iter.8
on stmt: jump 22
==== SSA block rewrite pass on 22
Running <numba.core.ssa._FreshVarHandler object at 0x7f32e02588f0>
on stmt: $22for_iter.1 = iternext(value=$phi22.0)
on stmt: $22for_iter.2 = pair_first(value=$22for_iter.1)
on stmt: $22for_iter.3 = pair_second(value=$22for_iter.1)
on stmt: $phi26.1 = $22for_iter.2
on stmt: branch $22for_iter.3, 26, 168
==== SSA block rewrite pass on 26
Running <numba.core.ssa._FreshVarHandler object at 0x7f32e02588f0>
on stmt: k = $phi26.1
on stmt: $const30.3 = const(int, 32)
on stmt: chunk = k // $const30.3
on stmt: $const40.6 = const(int, 32)
on stmt: pos = k % $const40.6
first assign: pos
replaced with: pos = k % $const40.6
on stmt: $binop_add54.11 = graph_index + node
on stmt: $60build_tuple.13 = build_tuple(items=[Var($binop_add54.11, graphs.py:128), Var(chunk, graphs.py:125)])
on stmt: $66binary_subscr.14 = getitem(value=X, index=$60build_tuple.13, fn=<built-in function getitem>)
on stmt: $const70.15 = const(int, 1)
on stmt: $binop_lshift74.17 = $const70.15 << pos
on stmt: $binop_ior78.18 = inplace_binop(fn=<built-in function ior>, immutable_fn=<built-in function or_>, lhs=$66binary_subscr.14, rhs=$binop_lshift74.17, static_lhs=Undefined, static_rhs=Undefined)
on stmt: X[$60build_tuple.13] = $binop_ior78.18
on stmt: $binop_add94.21 = k + hypervector_size
on stmt: $const98.22 = const(int, 32)
on stmt: chunk.1 = $binop_add94.21 // $const98.22
on stmt: $binop_add110.26 = k + hypervector_size
on stmt: $const114.27 = const(int, 32)
on stmt: pos = $binop_add110.26 % $const114.27
replaced with: pos.1 = $binop_add110.26 % $const114.27
on stmt: $binop_add128.32 = graph_index + node
on stmt: $134build_tuple.34 = build_tuple(items=[Var($binop_add128.32, graphs.py:132), Var(chunk.1, graphs.py:130)])
on stmt: $140binary_subscr.35 = getitem(value=X, index=$134build_tuple.34, fn=<built-in function getitem>)
on stmt: $const144.36 = const(int, 1)
on stmt: $binop_lshift148.38 = $const144.36 << pos
on stmt: $152unary_invert.39 = unary(fn=<built-in function invert>, value=$binop_lshift148.38)
on stmt: $binop_iand154.40 = inplace_binop(fn=<built-in function iand>, immutable_fn=<built-in function and_>, lhs=$140binary_subscr.35, rhs=$152unary_invert.39, static_lhs=Undefined, static_rhs=Undefined)
on stmt: X[$134build_tuple.34] = $binop_iand154.40
on stmt: jump 22
==== SSA block rewrite pass on 168
Running <numba.core.ssa._FreshVarHandler object at 0x7f32e02588f0>
on stmt: $const170.2 = const(NoneType, None)
on stmt: $170return_const.3 = cast(value=$const170.2)
on stmt: return $170return_const.3
Replaced assignments: defaultdict(<class 'list'>,
            {26: [<numba.core.ir.Assign object at 0x7f32e02de990>,
                  <numba.core.ir.Assign object at 0x7f32e0104a10>]})
==== SSA block rewrite pass on 0
Running <numba.core.ssa._FixSSAVars object at 0x7f32e0252120>
on stmt: hypervectors = arg(0, name=hypervectors)
on stmt: hypervector_size = arg(1, name=hypervector_size)
on stmt: graph_index = arg(2, name=graph_index)
on stmt: node = arg(3, name=node)
on stmt: symbol = arg(4, name=symbol)
on stmt: X = arg(5, name=X)
on stmt: $const8.2 = const(NoneType, None)
on stmt: $const10.3 = const(NoneType, None)
on stmt: $12build_slice.4 = global(slice: <class 'slice'>)
on stmt: $12build_slice.5 = call $12build_slice.4($const8.2, $const10.3, func=$12build_slice.4, args=(Var($const8.2, graphs.py:124), Var($const10.3, graphs.py:124)), kws=(), vararg=None, varkwarg=None, target=None)
on stmt: $14build_tuple.6 = build_tuple(items=[Var(symbol, graphs.py:121), Var($12build_slice.5, graphs.py:124)])
on stmt: $16binary_subscr.7 = getitem(value=hypervectors, index=$14build_tuple.6, fn=<built-in function getitem>)
on stmt: $20get_iter.8 = getiter(value=$16binary_subscr.7)
on stmt: $phi22.0 = $20get_iter.8
on stmt: jump 22
==== SSA block rewrite pass on 22
Running <numba.core.ssa._FixSSAVars object at 0x7f32e0252120>
on stmt: $22for_iter.1 = iternext(value=$phi22.0)
on stmt: $22for_iter.2 = pair_first(value=$22for_iter.1)
on stmt: $22for_iter.3 = pair_second(value=$22for_iter.1)
on stmt: $phi26.1 = $22for_iter.2
on stmt: branch $22for_iter.3, 26, 168
==== SSA block rewrite pass on 26
Running <numba.core.ssa._FixSSAVars object at 0x7f32e0252120>
on stmt: k = $phi26.1
on stmt: $const30.3 = const(int, 32)
on stmt: chunk = k // $const30.3
on stmt: $const40.6 = const(int, 32)
on stmt: pos = k % $const40.6
on stmt: $binop_add54.11 = graph_index + node
on stmt: $60build_tuple.13 = build_tuple(items=[Var($binop_add54.11, graphs.py:128), Var(chunk, graphs.py:125)])
on stmt: $66binary_subscr.14 = getitem(value=X, index=$60build_tuple.13, fn=<built-in function getitem>)
on stmt: $const70.15 = const(int, 1)
on stmt: $binop_lshift74.17 = $const70.15 << pos
find_def var='pos' stmt=$binop_lshift74.17 = $const70.15 << pos
on stmt: $binop_ior78.18 = inplace_binop(fn=<built-in function ior>, immutable_fn=<built-in function or_>, lhs=$66binary_subscr.14, rhs=$binop_lshift74.17, static_lhs=Undefined, static_rhs=Undefined)
on stmt: X[$60build_tuple.13] = $binop_ior78.18
on stmt: $binop_add94.21 = k + hypervector_size
on stmt: $const98.22 = const(int, 32)
on stmt: chunk.1 = $binop_add94.21 // $const98.22
on stmt: $binop_add110.26 = k + hypervector_size
on stmt: $const114.27 = const(int, 32)
on stmt: pos.1 = $binop_add110.26 % $const114.27
on stmt: $binop_add128.32 = graph_index + node
on stmt: $134build_tuple.34 = build_tuple(items=[Var($binop_add128.32, graphs.py:132), Var(chunk.1, graphs.py:130)])
on stmt: $140binary_subscr.35 = getitem(value=X, index=$134build_tuple.34, fn=<built-in function getitem>)
on stmt: $const144.36 = const(int, 1)
on stmt: $binop_lshift148.38 = $const144.36 << pos
find_def var='pos' stmt=$binop_lshift148.38 = $const144.36 << pos
replaced with: $binop_lshift148.38 = $const144.36 << pos.1
on stmt: $152unary_invert.39 = unary(fn=<built-in function invert>, value=$binop_lshift148.38)
on stmt: $binop_iand154.40 = inplace_binop(fn=<built-in function iand>, immutable_fn=<built-in function and_>, lhs=$140binary_subscr.35, rhs=$152unary_invert.39, static_lhs=Undefined, static_rhs=Undefined)
on stmt: X[$134build_tuple.34] = $binop_iand154.40
on stmt: jump 22
==== SSA block rewrite pass on 168
Running <numba.core.ssa._FixSSAVars object at 0x7f32e0252120>
on stmt: $const170.2 = const(NoneType, None)
on stmt: $170return_const.3 = cast(value=$const170.2)
on stmt: return $170return_const.3
Creating test data
Epoch#1 -- Accuracy train: 0.42677777777777776 -- Accuracy test: 0.414 
Epoch#2 -- Accuracy train: 0.7493333333333333 -- Accuracy test: 0.757 
Epoch#3 -- Accuracy train: 0.7508888888888889 -- Accuracy test: 0.762 
Epoch#4 -- Accuracy train: 0.6757777777777778 -- Accuracy test: 0.692 
Epoch#5 -- Accuracy train: 0.8143333333333334 -- Accuracy test: 0.824 
Epoch#6 -- Accuracy train: 0.6155555555555555 -- Accuracy test: 0.624 
Epoch#7 -- Accuracy train: 0.7006666666666667 -- Accuracy test: 0.721 
Epoch#8 -- Accuracy train: 0.7623333333333333 -- Accuracy test: 0.774 
Epoch#9 -- Accuracy train: 0.8256666666666667 -- Accuracy test: 0.823 
Epoch#10 -- Accuracy train: 0.8608888888888889 -- Accuracy test: 0.873 
Epoch#11 -- Accuracy train: 0.7261111111111112 -- Accuracy test: 0.767 
Epoch#12 -- Accuracy train: 0.7388888888888889 -- Accuracy test: 0.752 
Epoch#13 -- Accuracy train: 0.8198888888888889 -- Accuracy test: 0.833 
Epoch#14 -- Accuracy train: 0.7821111111111111 -- Accuracy test: 0.804 
Epoch#15 -- Accuracy train: 0.7042222222222222 -- Accuracy test: 0.698 
Epoch#16 -- Accuracy train: 0.8091111111111111 -- Accuracy test: 0.81 
Epoch#17 -- Accuracy train: 0.8234444444444444 -- Accuracy test: 0.826 
Epoch#18 -- Accuracy train: 0.5518888888888889 -- Accuracy test: 0.558 
Epoch#19 -- Accuracy train: 0.8135555555555556 -- Accuracy test: 0.813 
Epoch#20 -- Accuracy train: 0.7214444444444444 -- Accuracy test: 0.742 
Epoch#21 -- Accuracy train: 0.7863333333333333 -- Accuracy test: 0.783 
Epoch#22 -- Accuracy train: 0.7724444444444445 -- Accuracy test: 0.769 
Epoch#23 -- Accuracy train: 0.7036666666666667 -- Accuracy test: 0.7 
Epoch#24 -- Accuracy train: 0.7886666666666666 -- Accuracy test: 0.807 
Epoch#25 -- Accuracy train: 0.703 -- Accuracy test: 0.727 
Epoch#26 -- Accuracy train: 0.7257777777777777 -- Accuracy test: 0.737 
Epoch#27 -- Accuracy train: 0.8528888888888889 -- Accuracy test: 0.863 
Epoch#28 -- Accuracy train: 0.6643333333333333 -- Accuracy test: 0.681 
Epoch#29 -- Accuracy train: 0.7901111111111111 -- Accuracy test: 0.797 
Epoch#30 -- Accuracy train: 0.7315555555555555 -- Accuracy test: 0.729 
Epoch#31 -- Accuracy train: 0.7954444444444444 -- Accuracy test: 0.801 
Epoch#32 -- Accuracy train: 0.7253333333333334 -- Accuracy test: 0.73 
Epoch#33 -- Accuracy train: 0.7933333333333333 -- Accuracy test: 0.81 
Epoch#34 -- Accuracy train: 0.7845555555555556 -- Accuracy test: 0.783 
Epoch#35 -- Accuracy train: 0.8045555555555556 -- Accuracy test: 0.811 
Epoch#36 -- Accuracy train: 0.8051111111111111 -- Accuracy test: 0.805 
Epoch#37 -- Accuracy train: 0.7525555555555555 -- Accuracy test: 0.775 
Epoch#38 -- Accuracy train: 0.729 -- Accuracy test: 0.746 
Epoch#39 -- Accuracy train: 0.684 -- Accuracy test: 0.694 
Epoch#40 -- Accuracy train: 0.8145555555555556 -- Accuracy test: 0.828 
Epoch#41 -- Accuracy train: 0.8103333333333333 -- Accuracy test: 0.823 
Epoch#42 -- Accuracy train: 0.739 -- Accuracy test: 0.74 
Epoch#43 -- Accuracy train: 0.8436666666666667 -- Accuracy test: 0.86 
Epoch#44 -- Accuracy train: 0.802 -- Accuracy test: 0.816 
Epoch#45 -- Accuracy train: 0.7845555555555556 -- Accuracy test: 0.817 
Epoch#46 -- Accuracy train: 0.6488888888888888 -- Accuracy test: 0.651 
Epoch#47 -- Accuracy train: 0.7027777777777777 -- Accuracy test: 0.722 
Epoch#48 -- Accuracy train: 0.7856666666666666 -- Accuracy test: 0.784 
Epoch#49 -- Accuracy train: 0.7866666666666666 -- Accuracy test: 0.785 
Epoch#50 -- Accuracy train: 0.7883333333333333 -- Accuracy test: 0.808 
Time: 878.379622220993
Clause #0 W:(10 -5) 
Number of literals: 0
Clause #1 W:(-57 12) NOT x119 AND NOT x182 AND NOT x322 AND NOT x567
Number of literals: 4
Clause #2 W:(21 1) NOT x767 AND NOT x871
Number of literals: 2
Clause #3 W:(-1 0) x856 AND NOT x409 AND NOT x570 AND NOT x642
Number of literals: 4
Clause #4 W:(-19 -5) NOT x899
Number of literals: 1
Clause #5 W:(-5 7) NOT x344 AND NOT x926
Number of literals: 2
Clause #6 W:(-12 4) NOT x8 AND NOT x393 AND NOT x620
Number of literals: 3
Clause #7 W:(9 8) NOT x817
Number of literals: 1
Clause #8 W:(-10 18) NOT x449
Number of literals: 1
Clause #9 W:(-32 4) 
Number of literals: 0
Clause #10 W:(82 -3) 
Number of literals: 0
Clause #11 W:(-25 -18) NOT x312 AND NOT x498 AND NOT x741
Number of literals: 3
Clause #12 W:(20 21) NOT x475 AND NOT x909
Number of literals: 2
Clause #13 W:(-17 19) NOT x103 AND NOT x733
Number of literals: 2
Clause #14 W:(-54 23) NOT x766
Number of literals: 1
Clause #15 W:(9 17) NOT x23 AND NOT x230 AND NOT x724
Number of literals: 3
Clause #16 W:(21 14) NOT x386 AND NOT x397 AND NOT x479 AND NOT x578
Number of literals: 4
Clause #17 W:(6 5) x762 AND NOT x18 AND NOT x99
Number of literals: 3
Clause #18 W:(-7 -15) NOT x159 AND NOT x541
Number of literals: 2
Clause #19 W:(10 37) NOT x305 AND NOT x311 AND NOT x641 AND NOT x1009
Number of literals: 4
Clause #20 W:(-35 -50) NOT x609 AND NOT x768 AND NOT x874
Number of literals: 3
Clause #21 W:(3 33) NOT x36 AND NOT x481 AND NOT x815
Number of literals: 3
Clause #22 W:(2 0) 
Number of literals: 0
Clause #23 W:(8 14) NOT x60 AND NOT x676 AND NOT x1018
Number of literals: 3
Clause #24 W:(336 -327) x980 AND NOT x882
Number of literals: 2
Clause #25 W:(-45 -48) NOT x198 AND NOT x703 AND NOT x793 AND NOT x959 AND NOT x996
Number of literals: 5
Clause #26 W:(1 2) 
Number of literals: 0
Clause #27 W:(-8 7) NOT x90 AND NOT x473
Number of literals: 2
Clause #28 W:(3 -14) NOT x558
Number of literals: 1
Clause #29 W:(-24 -6) NOT x1 AND NOT x496
Number of literals: 2
Clause #30 W:(-34 -14) x260 AND NOT x267 AND NOT x423 AND NOT x700 AND NOT x924 AND NOT x966
Number of literals: 6
Clause #31 W:(-9 -10) 
Number of literals: 0
Clause #32 W:(0 -4) NOT x204
Number of literals: 1
Clause #33 W:(14 -42) NOT x672
Number of literals: 1
Clause #34 W:(-5 0) 
Number of literals: 0
Clause #35 W:(-8 -6) NOT x536
Number of literals: 1
Clause #36 W:(-1 7) NOT x922
Number of literals: 1
Clause #37 W:(24 50) NOT x479 AND NOT x538 AND NOT x571
Number of literals: 3
Clause #38 W:(-12 -52) 
Number of literals: 0
Clause #39 W:(-14 -12) 
Number of literals: 0
Clause #40 W:(6 21) NOT x479
Number of literals: 1
Clause #41 W:(-51 -16) NOT x134 AND NOT x291 AND NOT x518 AND NOT x706 AND NOT x867
Number of literals: 5
Clause #42 W:(-28 -4) 
Number of literals: 0
Clause #43 W:(8 30) 
Number of literals: 0
Clause #44 W:(29 18) NOT x61
Number of literals: 1
Clause #45 W:(-9 -31) NOT x5 AND NOT x852 AND NOT x968
Number of literals: 3
Clause #46 W:(8 -1) 
Number of literals: 0
Clause #47 W:(-3 -17) 
Number of literals: 0
Clause #48 W:(-20 16) 
Number of literals: 0
Clause #49 W:(-1 -15) NOT x508 AND NOT x837
Number of literals: 2
Clause #50 W:(-54 41) 
Number of literals: 0
Clause #51 W:(-24 -3) 
Number of literals: 0
Clause #52 W:(-34 -1) NOT x619 AND NOT x736
Number of literals: 2
Clause #53 W:(7 37) 
Number of literals: 0
Clause #54 W:(2 3) 
Number of literals: 0
Clause #55 W:(26 30) NOT x449
Number of literals: 1
Clause #56 W:(-42 -26) 
Number of literals: 0
Clause #57 W:(-26 0) 
Number of literals: 0
Clause #58 W:(-12 5) NOT x136
Number of literals: 1
Clause #59 W:(-30 -3) 
Number of literals: 0
Clause #60 W:(43 3) NOT x187 AND NOT x413
Number of literals: 2
Clause #61 W:(1 20) NOT x142
Number of literals: 1
Clause #62 W:(-36 4) 
Number of literals: 0
Clause #63 W:(-15 7) NOT x884 AND NOT x960
Number of literals: 2
Clause #64 W:(63 10) 
Number of literals: 0
Clause #65 W:(2 18) NOT x695
Number of literals: 1
Clause #66 W:(0 12) 
Number of literals: 0
Clause #67 W:(-7 -6) NOT x354 AND NOT x877
Number of literals: 2
Clause #68 W:(32 4) 
Number of literals: 0
Clause #69 W:(-1 1) 
Number of literals: 0
Clause #70 W:(15 29) NOT x479
Number of literals: 1
Clause #71 W:(-81 -19) 
Number of literals: 0
Clause #72 W:(-10 -24) NOT x300 AND NOT x804
Number of literals: 2
Clause #73 W:(-133 39) x198 AND x267
Number of literals: 2
Clause #74 W:(-64 12) NOT x936
Number of literals: 1
Clause #75 W:(181 -168) x386 AND NOT x6 AND NOT x102
Number of literals: 3
Clause #76 W:(71 -59) 
Number of literals: 0
Clause #77 W:(0 -27) 
Number of literals: 0
Clause #78 W:(-19 9) x263 AND NOT x348 AND NOT x479 AND NOT x969
Number of literals: 4
Clause #79 W:(1 25) x636 AND NOT x888
Number of literals: 2
Clause #80 W:(29 13) NOT x10 AND NOT x164 AND NOT x529 AND NOT x645
Number of literals: 4
Clause #81 W:(-1 8) NOT x412
Number of literals: 1
Clause #82 W:(30 -38) NOT x267 AND NOT x401
Number of literals: 2
Clause #83 W:(0 16) NOT x348
Number of literals: 1
Clause #84 W:(-4 17) NOT x173 AND NOT x272 AND NOT x385 AND NOT x1015
Number of literals: 4
Clause #85 W:(-5 -2) 
Number of literals: 0
Clause #86 W:(-5 21) NOT x301 AND NOT x324 AND NOT x850
Number of literals: 3
Clause #87 W:(26 38) NOT x583 AND NOT x789 AND NOT x808 AND NOT x843
Number of literals: 4
Clause #88 W:(7 0) x858 AND NOT x421 AND NOT x847 AND NOT x977
Number of literals: 4
Clause #89 W:(-5 -5) NOT x519 AND NOT x684
Number of literals: 2
Clause #90 W:(-31 -10) NOT x202 AND NOT x335
Number of literals: 2
Clause #91 W:(-1 3) NOT x783
Number of literals: 1
Clause #92 W:(-24 -18) 
Number of literals: 0
Clause #93 W:(-18 35) NOT x149 AND NOT x838
Number of literals: 2
Clause #94 W:(-24 -18) NOT x35
Number of literals: 1
Clause #95 W:(-54 -24) NOT x793
Number of literals: 1
Clause #96 W:(-21 0) NOT x823
Number of literals: 1
Clause #97 W:(-4 15) x667 AND NOT x274 AND NOT x831
Number of literals: 3
Clause #98 W:(5 9) NOT x512 AND NOT x557 AND NOT x874 AND NOT x973 AND NOT x986
Number of literals: 5
Clause #99 W:(-17 0) NOT x45 AND NOT x642 AND NOT x763
Number of literals: 3
Clause #100 W:(5 33) x951 AND NOT x218 AND NOT x278 AND NOT x332 AND NOT x648 AND NOT x728 AND NOT x1003
Number of literals: 7
Clause #101 W:(-35 -17) NOT x161 AND NOT x345
Number of literals: 2
Clause #102 W:(414 -411) x980 AND NOT x141 AND NOT x267 AND NOT x389
Number of literals: 4
Clause #103 W:(27 -8) NOT x134
Number of literals: 1
Clause #104 W:(-2 -2) NOT x115 AND NOT x198 AND NOT x430 AND NOT x822
Number of literals: 4
Clause #105 W:(-22 -2) NOT x62 AND NOT x446 AND NOT x460 AND NOT x716
Number of literals: 4
Clause #106 W:(-10 -12) NOT x183 AND NOT x380 AND NOT x900
Number of literals: 3
Clause #107 W:(-73 -16) 
Number of literals: 0
Clause #108 W:(-26 31) NOT x222 AND NOT x732
Number of literals: 2
Clause #109 W:(-6 0) 
Number of literals: 0
Clause #110 W:(9 47) 
Number of literals: 0
Clause #111 W:(-56 26) NOT x666
Number of literals: 1
Clause #112 W:(-34 2) NOT x295 AND NOT x942
Number of literals: 2
Clause #113 W:(-3 46) NOT x177
Number of literals: 1
Clause #114 W:(33 -10) 
Number of literals: 0
Clause #115 W:(3 -22) 
Number of literals: 0
Clause #116 W:(31 54) 
Number of literals: 0
Clause #117 W:(33 -14) 
Number of literals: 0
Clause #118 W:(-18 17) NOT x241 AND NOT x560 AND NOT x990
Number of literals: 3
Clause #119 W:(1 32) NOT x345 AND NOT x549
Number of literals: 2
Clause #120 W:(-6 0) 
Number of literals: 0
Clause #121 W:(15 -21) NOT x369 AND NOT x996
Number of literals: 2
Clause #122 W:(-10 -30) 
Number of literals: 0
Clause #123 W:(-2 20) NOT x510
Number of literals: 1
Clause #124 W:(-8 34) NOT x540 AND NOT x768
Number of literals: 2
Clause #125 W:(-3 -3) 
Number of literals: 0
Clause #126 W:(-11 -17) NOT x467 AND NOT x529 AND NOT x914
Number of literals: 3
Clause #127 W:(-5 10) NOT x39 AND NOT x76 AND NOT x584
Number of literals: 3
Clause #128 W:(-4 8) 
Number of literals: 0
Clause #129 W:(-15 17) NOT x394
Number of literals: 1
Clause #130 W:(-15 -13) NOT x17 AND NOT x358
Number of literals: 2
Clause #131 W:(-4 29) NOT x722
Number of literals: 1
Clause #132 W:(19 5) NOT x725
Number of literals: 1
Clause #133 W:(-30 -20) NOT x233 AND NOT x477 AND NOT x537
Number of literals: 3
Clause #134 W:(3 -3) 
Number of literals: 0
Clause #135 W:(-40 3) NOT x245 AND NOT x257 AND NOT x595
Number of literals: 3
Clause #136 W:(-24 9) NOT x18 AND NOT x560 AND NOT x702 AND NOT x836
Number of literals: 4
Clause #137 W:(0 10) 
Number of literals: 0
Clause #138 W:(9 13) NOT x180 AND NOT x299 AND NOT x654 AND NOT x882
Number of literals: 4
Clause #139 W:(-7 0) 
Number of literals: 0
Clause #140 W:(17 23) 
Number of literals: 0
Clause #141 W:(-40 -8) NOT x134
Number of literals: 1
Clause #142 W:(1 0) NOT x5
Number of literals: 1
Clause #143 W:(5 34) 
Number of literals: 0
Clause #144 W:(2 6) NOT x11 AND NOT x517 AND NOT x529 AND NOT x615 AND NOT x616 AND NOT x946
Number of literals: 6
Clause #145 W:(10 47) 
Number of literals: 0
Clause #146 W:(4 31) NOT x72 AND NOT x90 AND NOT x424 AND NOT x546 AND NOT x559 AND NOT x719 AND NOT x955 AND NOT x961
Number of literals: 8
Clause #147 W:(-21 -6) NOT x71 AND NOT x194 AND NOT x475 AND NOT x656 AND NOT x916
Number of literals: 5
Clause #148 W:(-24 3) NOT x569 AND NOT x981
Number of literals: 2
Clause #149 W:(-1 23) NOT x742
Number of literals: 1
Clause #150 W:(-2 14) NOT x410 AND NOT x491 AND NOT x595
Number of literals: 3
Clause #151 W:(-4 1) NOT x1000
Number of literals: 1
Clause #152 W:(14 -18) NOT x48 AND NOT x784 AND NOT x816
Number of literals: 3
Clause #153 W:(73 -83) NOT x260 AND NOT x408 AND NOT x443
Number of literals: 3
Clause #154 W:(-28 -27) NOT x34 AND NOT x386 AND NOT x437 AND NOT x547
Number of literals: 4
Clause #155 W:(17 37) NOT x52 AND NOT x362 AND NOT x443 AND NOT x737 AND NOT x796
Number of literals: 5
Clause #156 W:(-25 -34) NOT x198 AND NOT x202 AND NOT x267
Number of literals: 3
Clause #157 W:(30 26) 
Number of literals: 0
Clause #158 W:(-1 -3) NOT x502 AND NOT x653
Number of literals: 2
Clause #159 W:(2 0) x520 AND NOT x167
Number of literals: 2
Clause #160 W:(-14 -11) NOT x8 AND NOT x10 AND NOT x630
Number of literals: 3
Clause #161 W:(23 -9) NOT x109 AND NOT x378 AND NOT x822 AND NOT x1002
Number of literals: 4
Clause #162 W:(-6 2) 
Number of literals: 0
Clause #163 W:(-2 28) NOT x226 AND NOT x671 AND NOT x771
Number of literals: 3
Clause #164 W:(-3 -5) NOT x836 AND NOT x933
Number of literals: 2
Clause #165 W:(-21 -3) x102 AND x263 AND NOT x183 AND NOT x198 AND NOT x581
Number of literals: 5
Clause #166 W:(48 -47) x946 AND NOT x529 AND NOT x588
Number of literals: 3
Clause #167 W:(4 1) 
Number of literals: 0
Clause #168 W:(-21 -25) NOT x92 AND NOT x136 AND NOT x255
Number of literals: 3
Clause #169 W:(-23 5) 
Number of literals: 0
Clause #170 W:(17 4) NOT x259
Number of literals: 1
Clause #171 W:(5 -22) NOT x251 AND NOT x648 AND NOT x836
Number of literals: 3
Clause #172 W:(-153 149) NOT x670 AND NOT x713 AND NOT x828
Number of literals: 3
Clause #173 W:(-8 -1) x456
Number of literals: 1
Clause #174 W:(-51 -4) NOT x560 AND NOT x895
Number of literals: 2
Clause #175 W:(16 -3) NOT x875
Number of literals: 1
Clause #176 W:(45 5) x932 AND NOT x297
Number of literals: 2
Clause #177 W:(-17 -16) 
Number of literals: 0
Clause #178 W:(-11 24) NOT x772
Number of literals: 1
Clause #179 W:(-84 116) x882 AND NOT x700
Number of literals: 2
Clause #180 W:(7 -28) 
Number of literals: 0
Clause #181 W:(-12 4) NOT x170
Number of literals: 1
Clause #182 W:(-24 -17) NOT x444 AND NOT x451
Number of literals: 2
Clause #183 W:(0 10) x160 AND x585 AND NOT x122 AND NOT x326 AND NOT x734 AND NOT x824
Number of literals: 6
Clause #184 W:(-26 7) NOT x370 AND NOT x449
Number of literals: 2
Clause #185 W:(1 8) NOT x350
Number of literals: 1
Clause #186 W:(-41 25) NOT x117
Number of literals: 1
Clause #187 W:(-20 -36) NOT x771
Number of literals: 1
Clause #188 W:(-21 -3) NOT x905
Number of literals: 1
Clause #189 W:(-3 -17) 
Number of literals: 0
Clause #190 W:(1 -1) x332
Number of literals: 1
Clause #191 W:(-3 -11) 
Number of literals: 0
Clause #192 W:(-21 29) NOT x87 AND NOT x129 AND NOT x810 AND NOT x821 AND NOT x1006
Number of literals: 5
Clause #193 W:(-1 -2) NOT x21
Number of literals: 1
Clause #194 W:(-10 2) 
Number of literals: 0
Clause #195 W:(15 -6) NOT x221 AND NOT x293 AND NOT x409 AND NOT x629 AND NOT x637 AND NOT x876 AND NOT x949
Number of literals: 7
Clause #196 W:(23 -3) NOT x309
Number of literals: 1
Clause #197 W:(-9 -9) NOT x683 AND NOT x885 AND NOT x948
Number of literals: 3
Clause #198 W:(-8 -31) NOT x155 AND NOT x383 AND NOT x556
Number of literals: 3
Clause #199 W:(-47 -19) NOT x412 AND NOT x523
Number of literals: 2
Clause #200 W:(-25 16) NOT x194 AND NOT x267 AND NOT x804
Number of literals: 3
Clause #201 W:(43 -14) 
Number of literals: 0
Clause #202 W:(6 2) NOT x95 AND NOT x194 AND NOT x358 AND NOT x361 AND NOT x432 AND NOT x705
Number of literals: 6
Clause #203 W:(8 44) 
Number of literals: 0
Clause #204 W:(21 9) NOT x136 AND NOT x645 AND NOT x697 AND NOT x983
Number of literals: 4
Clause #205 W:(-13 14) NOT x448 AND NOT x897
Number of literals: 2
Clause #206 W:(10 -18) NOT x863
Number of literals: 1
Clause #207 W:(-22 -32) NOT x110 AND NOT x906
Number of literals: 2
Clause #208 W:(-9 -3) NOT x102 AND NOT x260 AND NOT x610 AND NOT x778 AND NOT x841 AND NOT x856
Number of literals: 6
Clause #209 W:(13 11) NOT x75 AND NOT x117 AND NOT x464
Number of literals: 3
Clause #210 W:(22 -8) NOT x0 AND NOT x819
Number of literals: 2
Clause #211 W:(-6 28) NOT x832 AND NOT x941
Number of literals: 2
Clause #212 W:(-22 4) 
Number of literals: 0
Clause #213 W:(14 2) NOT x878
Number of literals: 1
Clause #214 W:(-7 3) NOT x212 AND NOT x911
Number of literals: 2
Clause #215 W:(14 2) NOT x454 AND NOT x999
Number of literals: 2
Clause #216 W:(7 10) NOT x96 AND NOT x189 AND NOT x254 AND NOT x479
Number of literals: 4
Clause #217 W:(51 59) NOT x286 AND NOT x328 AND NOT x351 AND NOT x521 AND NOT x736
Number of literals: 5
Clause #218 W:(1 12) NOT x297
Number of literals: 1
Clause #219 W:(-49 -29) NOT x349 AND NOT x546 AND NOT x960
Number of literals: 3
Clause #220 W:(-5 42) NOT x138 AND NOT x337
Number of literals: 2
Clause #221 W:(-11 6) NOT x317
Number of literals: 1
Clause #222 W:(1 14) x198 AND NOT x138
Number of literals: 2
Clause #223 W:(-9 20) NOT x552 AND NOT x675
Number of literals: 2
Clause #224 W:(-6 26) NOT x86 AND NOT x161 AND NOT x637 AND NOT x882
Number of literals: 4
Clause #225 W:(-38 -1) x329 AND NOT x711 AND NOT x942
Number of literals: 3
Clause #226 W:(10 -6) 
Number of literals: 0
Clause #227 W:(26 25) NOT x596
Number of literals: 1
Clause #228 W:(-16 19) NOT x80 AND NOT x379 AND NOT x576 AND NOT x946
Number of literals: 4
Clause #229 W:(-28 34) NOT x647 AND NOT x670
Number of literals: 2
Clause #230 W:(-8 -3) NOT x102 AND NOT x526 AND NOT x658 AND NOT x941
Number of literals: 4
Clause #231 W:(-134 164) x267 AND NOT x102 AND NOT x109
Number of literals: 3
Clause #232 W:(-1 29) NOT x632
Number of literals: 1
Clause #233 W:(6 15) 
Number of literals: 0
Clause #234 W:(19 15) NOT x223 AND NOT x265 AND NOT x474 AND NOT x513 AND NOT x798
Number of literals: 5
Clause #235 W:(-11 -17) NOT x592
Number of literals: 1
Clause #236 W:(-27 -28) NOT x199
Number of literals: 1
Clause #237 W:(-51 -13) NOT x269 AND NOT x319 AND NOT x882 AND NOT x921
Number of literals: 4
Clause #238 W:(3 18) NOT x23 AND NOT x381 AND NOT x650
Number of literals: 3
Clause #239 W:(-52 -15) NOT x25 AND NOT x830 AND NOT x987
Number of literals: 3
Clause #240 W:(43 22) NOT x655 AND NOT x727 AND NOT x792
Number of literals: 3
Clause #241 W:(-29 -24) NOT x238 AND NOT x658 AND NOT x660
Number of literals: 3
Clause #242 W:(16 -12) NOT x419
Number of literals: 1
Clause #243 W:(5 -1) NOT x130 AND NOT x729
Number of literals: 2
Clause #244 W:(0 -53) NOT x333 AND NOT x718 AND NOT x935 AND NOT x999
Number of literals: 4
Clause #245 W:(7 31) NOT x321 AND NOT x715
Number of literals: 2
Clause #246 W:(-3 -9) 
Number of literals: 0
Clause #247 W:(-5 -27) 
Number of literals: 0
Clause #248 W:(11 12) NOT x129 AND NOT x198 AND NOT x740 AND NOT x750
Number of literals: 4
Clause #249 W:(2 -8) NOT x55 AND NOT x867
Number of literals: 2
Clause #250 W:(0 -15) NOT x39 AND NOT x425 AND NOT x971
Number of literals: 3
Clause #251 W:(-54 -8) NOT x118
Number of literals: 1
Clause #252 W:(9 30) NOT x244 AND NOT x645
Number of literals: 2
Clause #253 W:(7 13) NOT x381
Number of literals: 1
Clause #254 W:(-10 36) NOT x10
Number of literals: 1
Clause #255 W:(9 -21) NOT x346 AND NOT x380 AND NOT x814 AND NOT x1021
Number of literals: 4
Clause #256 W:(9 -20) NOT x150 AND NOT x213 AND NOT x218 AND NOT x417 AND NOT x618 AND NOT x830
Number of literals: 6
Clause #257 W:(-18 -7) NOT x730 AND NOT x783 AND NOT x871
Number of literals: 3
Clause #258 W:(-29 -8) x480 AND NOT x276 AND NOT x991
Number of literals: 3
Clause #259 W:(-7 9) NOT x342 AND NOT x908
Number of literals: 2
Clause #260 W:(17 6) NOT x84 AND NOT x815 AND NOT x882
Number of literals: 3
Clause #261 W:(-15 19) NOT x870
Number of literals: 1
Clause #262 W:(-8 -19) NOT x715 AND NOT x824
Number of literals: 2
Clause #263 W:(21 -2) NOT x16 AND NOT x858
Number of literals: 2
Clause #264 W:(-16 1) NOT x287
Number of literals: 1
Clause #265 W:(-28 -35) 
Number of literals: 0
Clause #266 W:(24 21) NOT x541
Number of literals: 1
Clause #267 W:(-8 -6) NOT x89 AND NOT x274 AND NOT x882 AND NOT x923
Number of literals: 4
Clause #268 W:(-4 -14) 
Number of literals: 0
Clause #269 W:(7 0) NOT x86
Number of literals: 1
Clause #270 W:(-7 -8) NOT x315
Number of literals: 1
Clause #271 W:(8 5) NOT x304 AND NOT x828 AND NOT x885
Number of literals: 3
Clause #272 W:(1 -5) 
Number of literals: 0
Clause #273 W:(6 9) NOT x463 AND NOT x974
Number of literals: 2
Clause #274 W:(66 -24) x874 AND NOT x841
Number of literals: 2
Clause #275 W:(9 -14) NOT x167 AND NOT x943
Number of literals: 2
Clause #276 W:(0 -30) NOT x14 AND NOT x741
Number of literals: 2
Clause #277 W:(150 -181) x469 AND NOT x361 AND NOT x790
Number of literals: 3
Clause #278 W:(-24 37) NOT x507
Number of literals: 1
Clause #279 W:(44 18) NOT x204 AND NOT x960
Number of literals: 2
Clause #280 W:(25 23) NOT x234 AND NOT x443 AND NOT x658
Number of literals: 3
Clause #281 W:(15 29) NOT x24 AND NOT x222 AND NOT x606
Number of literals: 3
Clause #282 W:(-17 -21) NOT x260 AND NOT x429 AND NOT x670 AND NOT x842
Number of literals: 4
Clause #283 W:(-3 -38) NOT x322 AND NOT x898
Number of literals: 2
Clause #284 W:(-2 7) NOT x970
Number of literals: 1
Clause #285 W:(-65 -27) NOT x530 AND NOT x863
Number of literals: 2
Clause #286 W:(-7 6) NOT x95
Number of literals: 1
Clause #287 W:(29 19) NOT x282 AND NOT x305 AND NOT x388 AND NOT x413 AND NOT x641
Number of literals: 5
Clause #288 W:(-27 -2) 
Number of literals: 0
Clause #289 W:(31 -5) NOT x96 AND NOT x474 AND NOT x1010
Number of literals: 3
Clause #290 W:(-24 -38) NOT x238 AND NOT x352 AND NOT x604 AND NOT x844
Number of literals: 4
Clause #291 W:(-7 22) 
Number of literals: 0
Clause #292 W:(1 9) 
Number of literals: 0
Clause #293 W:(24 27) NOT x270 AND NOT x284 AND NOT x296 AND NOT x358
Number of literals: 4
Clause #294 W:(6 13) NOT x474 AND NOT x655
Number of literals: 2
Clause #295 W:(-19 -2) NOT x138 AND NOT x420 AND NOT x576
Number of literals: 3
Clause #296 W:(-4 1) 
Number of literals: 0
Clause #297 W:(-21 -7) NOT x328 AND NOT x744
Number of literals: 2
Clause #298 W:(-11 -2) NOT x236 AND NOT x665 AND NOT x845 AND NOT x974
Number of literals: 4
Clause #299 W:(2 -29) NOT x587 AND NOT x746
Number of literals: 2
Clause #300 W:(-8 82) 
Number of literals: 0
Clause #301 W:(8 7) NOT x178 AND NOT x283 AND NOT x975
Number of literals: 3
Clause #302 W:(5 22) 
Number of literals: 0
Clause #303 W:(-5 -6) NOT x304 AND NOT x315 AND NOT x706
Number of literals: 3
Clause #304 W:(2 34) 
Number of literals: 0
Clause #305 W:(4 -2) NOT x247
Number of literals: 1
Clause #306 W:(-24 -48) NOT x260 AND NOT x324
Number of literals: 2
Clause #307 W:(33 -15) NOT x39 AND NOT x465 AND NOT x868
Number of literals: 3
Clause #308 W:(4 46) 
Number of literals: 0
Clause #309 W:(4 7) NOT x152
Number of literals: 1
Clause #310 W:(-4 20) NOT x69 AND NOT x190 AND NOT x753
Number of literals: 3
Clause #311 W:(-18 -11) NOT x178
Number of literals: 1
Clause #312 W:(10 12) NOT x600 AND NOT x1002 AND NOT x1004 AND NOT x1022
Number of literals: 4
Clause #313 W:(26 -5) NOT x473
Number of literals: 1
Clause #314 W:(-16 -38) x260 AND NOT x91 AND NOT x365 AND NOT x579 AND NOT x794
Number of literals: 5
Clause #315 W:(-2 -4) NOT x160 AND NOT x316 AND NOT x791
Number of literals: 3
Clause #316 W:(-1 -14) x265 AND NOT x140 AND NOT x401 AND NOT x499 AND NOT x639
Number of literals: 5
Clause #317 W:(6 -1) x989 AND NOT x149 AND NOT x362 AND NOT x427 AND NOT x548 AND NOT x873
Number of literals: 6
Clause #318 W:(-1 10) NOT x9
Number of literals: 1
Clause #319 W:(22 36) x258 AND NOT x440 AND NOT x629
Number of literals: 3
Clause #320 W:(-63 -1) x843 AND NOT x470 AND NOT x911
Number of literals: 3
Clause #321 W:(32 31) NOT x134 AND NOT x526
Number of literals: 2
Clause #322 W:(-32 -9) NOT x319 AND NOT x419 AND NOT x942
Number of literals: 3
Clause #323 W:(2 21) NOT x21 AND NOT x58 AND NOT x157
Number of literals: 3
Clause #324 W:(2 2) NOT x477
Number of literals: 1
Clause #325 W:(-23 -4) NOT x442 AND NOT x482
Number of literals: 2
Clause #326 W:(41 32) x92 AND NOT x276 AND NOT x364 AND NOT x916
Number of literals: 4
Clause #327 W:(-5 -17) NOT x8
Number of literals: 1
Clause #328 W:(5 -1) NOT x15 AND NOT x348
Number of literals: 2
Clause #329 W:(-1 11) NOT x483
Number of literals: 1
Clause #330 W:(-21 -34) 
Number of literals: 0
Clause #331 W:(-4 -13) NOT x524
Number of literals: 1
Clause #332 W:(6 25) NOT x278 AND NOT x304 AND NOT x665 AND NOT x795 AND NOT x849 AND NOT x971
Number of literals: 6
Clause #333 W:(25 -1) NOT x419
Number of literals: 1
Clause #334 W:(0 6) NOT x325 AND NOT x423 AND NOT x865
Number of literals: 3
Clause #335 W:(2 17) NOT x882
Number of literals: 1
Clause #336 W:(31 27) NOT x274 AND NOT x293 AND NOT x756 AND NOT x800 AND NOT x921
Number of literals: 5
Clause #337 W:(3 30) NOT x543 AND NOT x680 AND NOT x852
Number of literals: 3
Clause #338 W:(-6 -19) NOT x1020
Number of literals: 1
Clause #339 W:(1 -4) NOT x903
Number of literals: 1
Clause #340 W:(-16 -5) NOT x235 AND NOT x436 AND NOT x558 AND NOT x882
Number of literals: 4
Clause #341 W:(-10 -16) x404 AND NOT x88 AND NOT x228
Number of literals: 3
Clause #342 W:(2 -15) NOT x364
Number of literals: 1
Clause #343 W:(-15 -4) NOT x198 AND NOT x360
Number of literals: 2
Clause #344 W:(28 72) NOT x268 AND NOT x362 AND NOT x571 AND NOT x801 AND NOT x894 AND NOT x1011
Number of literals: 6
Clause #345 W:(3 -2) x898 AND NOT x517 AND NOT x669
Number of literals: 3
Clause #346 W:(12 8) NOT x69 AND NOT x184 AND NOT x628
Number of literals: 3
Clause #347 W:(-15 16) NOT x421 AND NOT x836 AND NOT x946
Number of literals: 3
Clause #348 W:(30 22) 
Number of literals: 0
Clause #349 W:(-48 -6) NOT x27 AND NOT x103 AND NOT x404 AND NOT x448 AND NOT x670 AND NOT x902
Number of literals: 6
Clause #350 W:(-24 -25) NOT x413
Number of literals: 1
Clause #351 W:(-6 1) NOT x232
Number of literals: 1
Clause #352 W:(-2 0) x250
Number of literals: 1
Clause #353 W:(2 -10) NOT x148 AND NOT x972
Number of literals: 2
Clause #354 W:(0 -11) 
Number of literals: 0
Clause #355 W:(1 51) NOT x353 AND NOT x643 AND NOT x805
Number of literals: 3
Clause #356 W:(47 18) NOT x544 AND NOT x801
Number of literals: 2
Clause #357 W:(1 -1) NOT x40
Number of literals: 1
Clause #358 W:(-48 -2) NOT x269 AND NOT x294 AND NOT x586 AND NOT x783
Number of literals: 4
Clause #359 W:(-11 17) NOT x655 AND NOT x884 AND NOT x905
Number of literals: 3
Clause #360 W:(-43 -25) NOT x559 AND NOT x572
Number of literals: 2
Clause #361 W:(7 19) NOT x24 AND NOT x596
Number of literals: 2
Clause #362 W:(0 53) NOT x198 AND NOT x528 AND NOT x608 AND NOT x751 AND NOT x1017
Number of literals: 5
Clause #363 W:(8 38) NOT x244 AND NOT x390 AND NOT x714
Number of literals: 3
Clause #364 W:(-3 -6) NOT x109 AND NOT x643
Number of literals: 2
Clause #365 W:(19 28) NOT x65 AND NOT x961
Number of literals: 2
Clause #366 W:(79 -71) NOT x131 AND NOT x594 AND NOT x748 AND NOT x882
Number of literals: 4
Clause #367 W:(-8 2) NOT x55 AND NOT x86 AND NOT x526 AND NOT x622 AND NOT x647
Number of literals: 5
Clause #368 W:(6 0) NOT x960
Number of literals: 1
Clause #369 W:(0 17) NOT x121 AND NOT x372 AND NOT x495 AND NOT x880
Number of literals: 4
Clause #370 W:(3 17) NOT x194 AND NOT x267 AND NOT x345 AND NOT x542
Number of literals: 4
Clause #371 W:(15 -10) NOT x433 AND NOT x481 AND NOT x546
Number of literals: 3
Clause #372 W:(17 -20) NOT x391
Number of literals: 1
Clause #373 W:(-29 -16) NOT x214 AND NOT x249 AND NOT x927 AND NOT x947
Number of literals: 4
Clause #374 W:(16 6) NOT x926 AND NOT x980
Number of literals: 2
Clause #375 W:(8 8) NOT x637
Number of literals: 1
Clause #376 W:(-12 13) NOT x175 AND NOT x532 AND NOT x637
Number of literals: 3
Clause #377 W:(-4 -4) NOT x132 AND NOT x686
Number of literals: 2
Clause #378 W:(-1 -16) NOT x703 AND NOT x788
Number of literals: 2
Clause #379 W:(51 -10) 
Number of literals: 0
Clause #380 W:(-14 0) 
Number of literals: 0
Clause #381 W:(-110 82) x267 AND x882
Number of literals: 2
Clause #382 W:(-28 -40) NOT x108 AND NOT x251 AND NOT x381 AND NOT x842 AND NOT x936
Number of literals: 5
Clause #383 W:(-4 -3) NOT x148 AND NOT x712
Number of literals: 2
Clause #384 W:(5 46) NOT x82 AND NOT x245 AND NOT x351 AND NOT x520 AND NOT x537
Number of literals: 5
Clause #385 W:(1 13) NOT x616 AND NOT x745 AND NOT x822 AND NOT x939 AND NOT x951
Number of literals: 5
Clause #386 W:(-22 1) 
Number of literals: 0
Clause #387 W:(-9 4) x102 AND x260 AND NOT x276 AND NOT x647 AND NOT x874 AND NOT x882
Number of literals: 6
Clause #388 W:(-38 3) NOT x403 AND NOT x564 AND NOT x692 AND NOT x838 AND NOT x868 AND NOT x991
Number of literals: 6
Clause #389 W:(14 9) NOT x181 AND NOT x489
Number of literals: 2
Clause #390 W:(-13 7) NOT x560
Number of literals: 1
Clause #391 W:(13 6) NOT x160 AND NOT x177 AND NOT x546 AND NOT x734
Number of literals: 4
Clause #392 W:(-22 -4) NOT x140 AND NOT x620 AND NOT x799
Number of literals: 3
Clause #393 W:(-20 22) NOT x109 AND NOT x267 AND NOT x860 AND NOT x897
Number of literals: 4
Clause #394 W:(7 55) NOT x148 AND NOT x228 AND NOT x262 AND NOT x418
Number of literals: 4
Clause #395 W:(12 -1) NOT x140 AND NOT x200
Number of literals: 2
Clause #396 W:(-14 -5) x670 AND NOT x812
Number of literals: 2
Clause #397 W:(22 -36) 
Number of literals: 0
Clause #398 W:(-12 -6) NOT x479
Number of literals: 1
Clause #399 W:(1 -54) NOT x243 AND NOT x272 AND NOT x648 AND NOT x721 AND NOT x1008
Number of literals: 5
Clause #400 W:(41 -4) NOT x185 AND NOT x247 AND NOT x925
Number of literals: 3
Clause #401 W:(-3 -19) NOT x162
Number of literals: 1
Clause #402 W:(30 20) NOT x398 AND NOT x721 AND NOT x1012
Number of literals: 3
Clause #403 W:(0 -1) NOT x723 AND NOT x844
Number of literals: 2
Clause #404 W:(-31 -7) 
Number of literals: 0
Clause #405 W:(5 8) NOT x81
Number of literals: 1
Clause #406 W:(3 -4) NOT x136 AND NOT x295
Number of literals: 2
Clause #407 W:(-42 -28) NOT x639
Number of literals: 1
Clause #408 W:(24 6) NOT x610
Number of literals: 1
Clause #409 W:(-17 -5) NOT x234 AND NOT x418 AND NOT x778
Number of literals: 3
Clause #410 W:(16 22) NOT x262 AND NOT x419 AND NOT x615 AND NOT x681
Number of literals: 4
Clause #411 W:(-9 -1) 
Number of literals: 0
Clause #412 W:(9 0) x201 AND NOT x108 AND NOT x274 AND NOT x323
Number of literals: 4
Clause #413 W:(-28 -22) 
Number of literals: 0
Clause #414 W:(-6 5) NOT x877
Number of literals: 1
Clause #415 W:(-2 -22) 
Number of literals: 0
Clause #416 W:(-23 -2) NOT x133 AND NOT x238 AND NOT x468
Number of literals: 3
Clause #417 W:(6 23) NOT x366
Number of literals: 1
Clause #418 W:(-35 -4) NOT x216 AND NOT x742
Number of literals: 2
Clause #419 W:(32 2) NOT x162
Number of literals: 1
Clause #420 W:(7 19) NOT x47 AND NOT x84 AND NOT x623 AND NOT x691
Number of literals: 4
Clause #421 W:(-39 -12) NOT x267 AND NOT x316 AND NOT x479 AND NOT x603
Number of literals: 4
Clause #422 W:(-1 12) x444 AND NOT x237 AND NOT x277 AND NOT x890 AND NOT x1017
Number of literals: 5
Clause #423 W:(14 10) NOT x96 AND NOT x548
Number of literals: 2
Clause #424 W:(-14 7) NOT x216 AND NOT x949 AND NOT x1004
Number of literals: 3
Clause #425 W:(-36 -3) NOT x50 AND NOT x302 AND NOT x885 AND NOT x1004
Number of literals: 4
Clause #426 W:(-2 -19) NOT x238 AND NOT x513 AND NOT x708
Number of literals: 3
Clause #427 W:(-15 27) 
Number of literals: 0
Clause #428 W:(0 13) 
Number of literals: 0
Clause #429 W:(34 -47) x479 AND NOT x181 AND NOT x670
Number of literals: 3
Clause #430 W:(-14 -26) NOT x162 AND NOT x198 AND NOT x343 AND NOT x803
Number of literals: 4
Clause #431 W:(-11 -15) NOT x72 AND NOT x126 AND NOT x481 AND NOT x688 AND NOT x708
Number of literals: 5
Clause #432 W:(-2 4) NOT x10 AND NOT x648 AND NOT x832
Number of literals: 3
Clause #433 W:(9 20) NOT x73
Number of literals: 1
Clause #434 W:(-2 15) NOT x50
Number of literals: 1
Clause #435 W:(-38 -4) NOT x111 AND NOT x296 AND NOT x623 AND NOT x631
Number of literals: 4
Clause #436 W:(6 9) NOT x183 AND NOT x785
Number of literals: 2
Clause #437 W:(9 1) 
Number of literals: 0
Clause #438 W:(32 -16) NOT x19 AND NOT x53 AND NOT x861 AND NOT x887
Number of literals: 4
Clause #439 W:(4 -3) NOT x35 AND NOT x325
Number of literals: 2
Clause #440 W:(-2 -40) NOT x411 AND NOT x940
Number of literals: 2
Clause #441 W:(14 20) 
Number of literals: 0
Clause #442 W:(-28 -15) 
Number of literals: 0
Clause #443 W:(9 -6) NOT x11 AND NOT x102 AND NOT x507 AND NOT x590 AND NOT x906
Number of literals: 5
Clause #444 W:(-4 7) NOT x261 AND NOT x688
Number of literals: 2
Clause #445 W:(33 -23) x908 AND NOT x53 AND NOT x312 AND NOT x874
Number of literals: 4
Clause #446 W:(-1 7) x665 AND NOT x235 AND NOT x246 AND NOT x1014
Number of literals: 4
Clause #447 W:(-6 -8) NOT x1 AND NOT x825
Number of literals: 2
Clause #448 W:(11 -6) 
Number of literals: 0
Clause #449 W:(-14 -12) NOT x181 AND NOT x527 AND NOT x676
Number of literals: 3
Clause #450 W:(1 -1) NOT x70 AND NOT x214 AND NOT x924
Number of literals: 3
Clause #451 W:(-19 17) NOT x79 AND NOT x479 AND NOT x553 AND NOT x657
Number of literals: 4
Clause #452 W:(-24 7) NOT x370 AND NOT x623
Number of literals: 2
Clause #453 W:(1 7) 
Number of literals: 0
Clause #454 W:(41 -3) 
Number of literals: 0
Clause #455 W:(-32 -27) NOT x166 AND NOT x347 AND NOT x905
Number of literals: 3
Clause #456 W:(63 27) NOT x591 AND NOT x765 AND NOT x893 AND NOT x964 AND NOT x971
Number of literals: 5
Clause #457 W:(-9 -22) NOT x455
Number of literals: 1
Clause #458 W:(-27 16) NOT x7 AND NOT x156 AND NOT x290 AND NOT x703
Number of literals: 4
Clause #459 W:(5 2) 
Number of literals: 0
Clause #460 W:(-10 -17) NOT x36 AND NOT x428 AND NOT x899
Number of literals: 3
Clause #461 W:(-36 -1) NOT x228 AND NOT x241 AND NOT x272 AND NOT x596
Number of literals: 4
Clause #462 W:(-12 3) 
Number of literals: 0
Clause #463 W:(-17 -28) NOT x229 AND NOT x467 AND NOT x951
Number of literals: 3
Clause #464 W:(64 -53) x874 AND NOT x267 AND NOT x570 AND NOT x636 AND NOT x711
Number of literals: 5
Clause #465 W:(-20 -44) NOT x330 AND NOT x690
Number of literals: 2
Clause #466 W:(1 11) NOT x40 AND NOT x751 AND NOT x926
Number of literals: 3
Clause #467 W:(-32 -2) NOT x87 AND NOT x159
Number of literals: 2
Clause #468 W:(-18 -3) NOT x205
Number of literals: 1
Clause #469 W:(-5 -9) NOT x383 AND NOT x580 AND NOT x949 AND NOT x953
Number of literals: 4
Clause #470 W:(-6 12) NOT x198 AND NOT x634 AND NOT x755
Number of literals: 3
Clause #471 W:(5 -3) x267 AND NOT x140 AND NOT x263 AND NOT x594
Number of literals: 4
Clause #472 W:(12 61) NOT x26 AND NOT x177 AND NOT x323 AND NOT x733
Number of literals: 4
Clause #473 W:(1 17) NOT x28 AND NOT x169
Number of literals: 2
Clause #474 W:(55 30) NOT x19 AND NOT x386 AND NOT x769 AND NOT x1002
Number of literals: 4
Clause #475 W:(-60 9) NOT x164
Number of literals: 1
Clause #476 W:(-7 66) 
Number of literals: 0
Clause #477 W:(-10 -34) NOT x496 AND NOT x938
Number of literals: 2
Clause #478 W:(-45 3) NOT x9 AND NOT x447 AND NOT x616 AND NOT x1023
Number of literals: 4
Clause #479 W:(-50 63) NOT x260 AND NOT x878
Number of literals: 2
Clause #480 W:(4 -1) 
Number of literals: 0
Clause #481 W:(3 6) NOT x465
Number of literals: 1
Clause #482 W:(8 -15) NOT x145 AND NOT x526
Number of literals: 2
Clause #483 W:(-11 -19) NOT x369 AND NOT x597 AND NOT x733
Number of literals: 3
Clause #484 W:(-35 -4) NOT x195
Number of literals: 1
Clause #485 W:(8 25) NOT x180 AND NOT x259 AND NOT x262
Number of literals: 3
Clause #486 W:(-6 7) NOT x313 AND NOT x407 AND NOT x850
Number of literals: 3
Clause #487 W:(-1 4) x848 AND NOT x699
Number of literals: 2
Clause #488 W:(17 5) NOT x153 AND NOT x215 AND NOT x495 AND NOT x637
Number of literals: 4
Clause #489 W:(16 16) NOT x77 AND NOT x784
Number of literals: 2
Clause #490 W:(-7 -16) NOT x306 AND NOT x958
Number of literals: 2
Clause #491 W:(-15 -1) x670 AND NOT x198 AND NOT x267 AND NOT x380
Number of literals: 4
Clause #492 W:(37 32) x448 AND NOT x51 AND NOT x445 AND NOT x895
Number of literals: 4
Clause #493 W:(27 46) NOT x863
Number of literals: 1
Clause #494 W:(-39 -4) NOT x924
Number of literals: 1
Clause #495 W:(127 -108) 
Number of literals: 0
Clause #496 W:(23 38) NOT x234
Number of literals: 1
Clause #497 W:(-3 -11) NOT x151 AND NOT x231 AND NOT x381 AND NOT x414
Number of literals: 4
Clause #498 W:(28 -26) NOT x791
Number of literals: 1
Clause #499 W:(-54 1) NOT x693 AND NOT x797 AND NOT x856
Number of literals: 3
results: Results(training_time_s=878.379622220993, inference_time_s=0.24155640602111816, memory_usage_mb=425.6875, accuracy=0.808, precision=0.8187696734653559, recall=0.808, f1_score=0.8113182076006807)
confusion matrix: [[248, 71], [121, 560]]
reporting runs/2024-12-19T20:33:03/results.toml
reporting runs/2024-12-19T20:33:03/confusion_matrix.csv
reporting runs/2024-12-19T20:33:03/weights.csv
