creating new run in runs/2024-12-19T22:05:18
reporting parameters in runs/2024-12-19T22:05:18/params.toml, values:
{'epochs': 50, 'number_of_clauses': 500, 't': 400, 's': 1.8489696763551806, 'depth': 7, 'hypervector_size': 1024, 'hypervector_bits': 4, 'message_size': 1024, 'message_bits': 2, 'double_hashing': False, 'max_included_literals': 16}
loading dataset from /home/ask/skole-learning-systems/attempt1/data/3x3_medium.csv
hashing dataset
saving dataset report to runs/2024-12-19T22:05:18/dataset.toml, content:
{'filename': '/home/ask/skole-learning-systems/attempt1/data/3x3_medium.csv', 'hash-blake2b': 'e9bf73e53fde757aee03a9898821212a0b3ffc12b8ac80471fda9e14e5c6d7ecd20c3cf42daf290055e4d53e56700ff350d4ae6970c2f5d38736556be10fa3de', 'dimensions': 3, 'rows': 10000}
X_train shape: (9000,)
X_test shape: (1000,)
Creating training data
bytecode dump:
>          0	NOP(arg=None, lineno=72)
           2	RESUME(arg=0, lineno=72)
           4	LOAD_GLOBAL(arg=1, lineno=75)
          14	LOAD_FAST(arg=1, lineno=75)
          16	LOAD_ATTR(arg=2, lineno=75)
          36	LOAD_CONST(arg=1, lineno=75)
          38	BINARY_SUBSCR(arg=None, lineno=75)
          42	CALL(arg=1, lineno=75)
          50	GET_ITER(arg=None, lineno=75)
>         52	FOR_ITER(arg=50, lineno=75)
          56	STORE_FAST(arg=2, lineno=75)
          58	LOAD_GLOBAL(arg=1, lineno=76)
          68	LOAD_FAST(arg=0, lineno=76)
          70	LOAD_FAST(arg=0, lineno=76)
          72	LOAD_CONST(arg=2, lineno=76)
          74	BINARY_OP(arg=5, lineno=76)
          78	CALL(arg=2, lineno=76)
          86	GET_ITER(arg=None, lineno=76)
>         88	FOR_ITER(arg=30, lineno=76)
          92	STORE_FAST(arg=3, lineno=76)
          94	LOAD_FAST(arg=3, lineno=77)
          96	LOAD_CONST(arg=3, lineno=77)
          98	BINARY_OP(arg=2, lineno=77)
         102	STORE_FAST(arg=4, lineno=77)
         104	LOAD_FAST(arg=3, lineno=78)
         106	LOAD_CONST(arg=3, lineno=78)
         108	BINARY_OP(arg=6, lineno=78)
         112	STORE_FAST(arg=5, lineno=78)
         114	LOAD_FAST(arg=1, lineno=79)
         116	LOAD_FAST(arg=2, lineno=79)
         118	LOAD_FAST(arg=4, lineno=79)
         120	BUILD_TUPLE(arg=2, lineno=79)
         122	COPY(arg=2, lineno=79)
         124	COPY(arg=2, lineno=79)
         126	BINARY_SUBSCR(arg=None, lineno=79)
         130	LOAD_CONST(arg=4, lineno=79)
         132	LOAD_FAST(arg=5, lineno=79)
         134	BINARY_OP(arg=3, lineno=79)
         138	BINARY_OP(arg=20, lineno=79)
         142	SWAP(arg=3, lineno=79)
         144	SWAP(arg=2, lineno=79)
         146	STORE_SUBSCR(arg=None, lineno=79)
         150	JUMP_BACKWARD(arg=32, lineno=79)
>        152	END_FOR(arg=None, lineno=76)
         154	JUMP_BACKWARD(arg=52, lineno=76)
>        156	END_FOR(arg=None, lineno=75)
         158	RETURN_CONST(arg=0, lineno=75)
pending: deque([State(pc_initial=0 nstack_initial=0)])
stack: []
state.pc_initial: State(pc_initial=0 nstack_initial=0)
dispatch pc=0, inst=NOP(arg=None, lineno=72)
stack []
dispatch pc=2, inst=RESUME(arg=0, lineno=72)
stack []
dispatch pc=4, inst=LOAD_GLOBAL(arg=1, lineno=75)
stack []
dispatch pc=14, inst=LOAD_FAST(arg=1, lineno=75)
stack ['$null$4.1', '$4load_global.0']
dispatch pc=16, inst=LOAD_ATTR(arg=2, lineno=75)
stack ['$null$4.1', '$4load_global.0', '$X14.2']
dispatch pc=36, inst=LOAD_CONST(arg=1, lineno=75)
stack ['$null$4.1', '$4load_global.0', '$16load_attr.3']
dispatch pc=38, inst=BINARY_SUBSCR(arg=None, lineno=75)
stack ['$null$4.1', '$4load_global.0', '$16load_attr.3', '$const36.4']
dispatch pc=42, inst=CALL(arg=1, lineno=75)
stack ['$null$4.1', '$4load_global.0', '$38binary_subscr.5']
dispatch pc=50, inst=GET_ITER(arg=None, lineno=75)
stack ['$42call.6']
end state. edges=[Edge(pc=52, stack=('$50get_iter.7',), blockstack=(), npush=0)]
pending: deque([State(pc_initial=52 nstack_initial=1)])
stack: ['$phi52.0']
state.pc_initial: State(pc_initial=52 nstack_initial=1)
dispatch pc=52, inst=FOR_ITER(arg=50, lineno=75)
stack ['$phi52.0']
end state. edges=[Edge(pc=156, stack=('$phi52.0', '$52for_iter.2'), blockstack=(), npush=0), Edge(pc=56, stack=('$phi52.0', '$52for_iter.2'), blockstack=(), npush=0)]
pending: deque([State(pc_initial=156 nstack_initial=2), State(pc_initial=56 nstack_initial=2)])
stack: ['$phi156.0', '$phi156.1']
state.pc_initial: State(pc_initial=156 nstack_initial=2)
dispatch pc=156, inst=END_FOR(arg=None, lineno=75)
stack ['$phi156.0', '$phi156.1']
dispatch pc=158, inst=RETURN_CONST(arg=0, lineno=75)
stack []
end state. edges=[]
pending: deque([State(pc_initial=56 nstack_initial=2)])
stack: ['$phi56.0', '$phi56.1']
state.pc_initial: State(pc_initial=56 nstack_initial=2)
dispatch pc=56, inst=STORE_FAST(arg=2, lineno=75)
stack ['$phi56.0', '$phi56.1']
dispatch pc=58, inst=LOAD_GLOBAL(arg=1, lineno=76)
stack ['$phi56.0']
dispatch pc=68, inst=LOAD_FAST(arg=0, lineno=76)
stack ['$phi56.0', '$null$58.3', '$58load_global.2']
dispatch pc=70, inst=LOAD_FAST(arg=0, lineno=76)
stack ['$phi56.0', '$null$58.3', '$58load_global.2', '$hypervector_size68.4']
dispatch pc=72, inst=LOAD_CONST(arg=2, lineno=76)
stack ['$phi56.0', '$null$58.3', '$58load_global.2', '$hypervector_size68.4', '$hypervector_size70.5']
dispatch pc=74, inst=BINARY_OP(arg=5, lineno=76)
stack ['$phi56.0', '$null$58.3', '$58load_global.2', '$hypervector_size68.4', '$hypervector_size70.5', '$const72.6']
dispatch pc=78, inst=CALL(arg=2, lineno=76)
stack ['$phi56.0', '$null$58.3', '$58load_global.2', '$hypervector_size68.4', '$binop_mul74.7']
dispatch pc=86, inst=GET_ITER(arg=None, lineno=76)
stack ['$phi56.0', '$78call.8']
end state. edges=[Edge(pc=88, stack=('$phi56.0', '$86get_iter.9'), blockstack=(), npush=0)]
pending: deque([State(pc_initial=88 nstack_initial=2)])
stack: ['$phi88.0', '$phi88.1']
state.pc_initial: State(pc_initial=88 nstack_initial=2)
dispatch pc=88, inst=FOR_ITER(arg=30, lineno=76)
stack ['$phi88.0', '$phi88.1']
end state. edges=[Edge(pc=152, stack=('$phi88.0', '$phi88.1', '$88for_iter.3'), blockstack=(), npush=0), Edge(pc=92, stack=('$phi88.0', '$phi88.1', '$88for_iter.3'), blockstack=(), npush=0)]
pending: deque([State(pc_initial=152 nstack_initial=3), State(pc_initial=92 nstack_initial=3)])
stack: ['$phi152.0', '$phi152.1', '$phi152.2']
state.pc_initial: State(pc_initial=152 nstack_initial=3)
dispatch pc=152, inst=END_FOR(arg=None, lineno=76)
stack ['$phi152.0', '$phi152.1', '$phi152.2']
dispatch pc=154, inst=JUMP_BACKWARD(arg=52, lineno=76)
stack ['$phi152.0']
end state. edges=[Edge(pc=52, stack=('$phi152.0',), blockstack=(), npush=0)]
pending: deque([State(pc_initial=92 nstack_initial=3), State(pc_initial=52 nstack_initial=1)])
stack: ['$phi92.0', '$phi92.1', '$phi92.2']
state.pc_initial: State(pc_initial=92 nstack_initial=3)
dispatch pc=92, inst=STORE_FAST(arg=3, lineno=76)
stack ['$phi92.0', '$phi92.1', '$phi92.2']
dispatch pc=94, inst=LOAD_FAST(arg=3, lineno=77)
stack ['$phi92.0', '$phi92.1']
dispatch pc=96, inst=LOAD_CONST(arg=3, lineno=77)
stack ['$phi92.0', '$phi92.1', '$k94.3']
dispatch pc=98, inst=BINARY_OP(arg=2, lineno=77)
stack ['$phi92.0', '$phi92.1', '$k94.3', '$const96.4']
dispatch pc=102, inst=STORE_FAST(arg=4, lineno=77)
stack ['$phi92.0', '$phi92.1', '$binop_floordiv98.5']
dispatch pc=104, inst=LOAD_FAST(arg=3, lineno=78)
stack ['$phi92.0', '$phi92.1']
dispatch pc=106, inst=LOAD_CONST(arg=3, lineno=78)
stack ['$phi92.0', '$phi92.1', '$k104.6']
dispatch pc=108, inst=BINARY_OP(arg=6, lineno=78)
stack ['$phi92.0', '$phi92.1', '$k104.6', '$const106.7']
dispatch pc=112, inst=STORE_FAST(arg=5, lineno=78)
stack ['$phi92.0', '$phi92.1', '$binop_mod108.8']
dispatch pc=114, inst=LOAD_FAST(arg=1, lineno=79)
stack ['$phi92.0', '$phi92.1']
dispatch pc=116, inst=LOAD_FAST(arg=2, lineno=79)
stack ['$phi92.0', '$phi92.1', '$X114.9']
dispatch pc=118, inst=LOAD_FAST(arg=4, lineno=79)
stack ['$phi92.0', '$phi92.1', '$X114.9', '$i116.10']
dispatch pc=120, inst=BUILD_TUPLE(arg=2, lineno=79)
stack ['$phi92.0', '$phi92.1', '$X114.9', '$i116.10', '$chunk118.11']
dispatch pc=122, inst=COPY(arg=2, lineno=79)
stack ['$phi92.0', '$phi92.1', '$X114.9', '$120build_tuple.12']
dispatch pc=124, inst=COPY(arg=2, lineno=79)
stack ['$phi92.0', '$phi92.1', '$X114.9', '$120build_tuple.12', '$X114.9']
dispatch pc=126, inst=BINARY_SUBSCR(arg=None, lineno=79)
stack ['$phi92.0', '$phi92.1', '$X114.9', '$120build_tuple.12', '$X114.9', '$120build_tuple.12']
dispatch pc=130, inst=LOAD_CONST(arg=4, lineno=79)
stack ['$phi92.0', '$phi92.1', '$X114.9', '$120build_tuple.12', '$126binary_subscr.13']
dispatch pc=132, inst=LOAD_FAST(arg=5, lineno=79)
stack ['$phi92.0', '$phi92.1', '$X114.9', '$120build_tuple.12', '$126binary_subscr.13', '$const130.14']
dispatch pc=134, inst=BINARY_OP(arg=3, lineno=79)
stack ['$phi92.0', '$phi92.1', '$X114.9', '$120build_tuple.12', '$126binary_subscr.13', '$const130.14', '$pos132.15']
dispatch pc=138, inst=BINARY_OP(arg=20, lineno=79)
stack ['$phi92.0', '$phi92.1', '$X114.9', '$120build_tuple.12', '$126binary_subscr.13', '$binop_lshift134.16']
dispatch pc=142, inst=SWAP(arg=3, lineno=79)
stack ['$phi92.0', '$phi92.1', '$X114.9', '$120build_tuple.12', '$binop_ior138.17']
dispatch pc=144, inst=SWAP(arg=2, lineno=79)
stack ['$phi92.0', '$phi92.1', '$binop_ior138.17', '$120build_tuple.12', '$X114.9']
dispatch pc=146, inst=STORE_SUBSCR(arg=None, lineno=79)
stack ['$phi92.0', '$phi92.1', '$binop_ior138.17', '$X114.9', '$120build_tuple.12']
dispatch pc=150, inst=JUMP_BACKWARD(arg=32, lineno=79)
stack ['$phi92.0', '$phi92.1']
end state. edges=[Edge(pc=88, stack=('$phi92.0', '$phi92.1'), blockstack=(), npush=0)]
pending: deque([State(pc_initial=52 nstack_initial=1), State(pc_initial=88 nstack_initial=2)])
pending: deque([State(pc_initial=88 nstack_initial=2)])
-------------------------Prune PHIs-------------------------
Used_phis: defaultdict(<class 'set'>,
            {State(pc_initial=0 nstack_initial=0): set(),
             State(pc_initial=52 nstack_initial=1): {'$phi52.0'},
             State(pc_initial=56 nstack_initial=2): {'$phi56.1'},
             State(pc_initial=88 nstack_initial=2): {'$phi88.1'},
             State(pc_initial=92 nstack_initial=3): {'$phi92.2'},
             State(pc_initial=152 nstack_initial=3): set(),
             State(pc_initial=156 nstack_initial=2): set()})
defmap: {'$phi152.2': State(pc_initial=88 nstack_initial=2),
 '$phi156.1': State(pc_initial=52 nstack_initial=1),
 '$phi52.0': State(pc_initial=0 nstack_initial=0),
 '$phi56.1': State(pc_initial=52 nstack_initial=1),
 '$phi88.1': State(pc_initial=56 nstack_initial=2),
 '$phi92.2': State(pc_initial=88 nstack_initial=2)}
phismap: defaultdict(<class 'set'>,
            {'$phi152.0': {('$phi88.0', State(pc_initial=88 nstack_initial=2))},
             '$phi152.1': {('$phi88.1', State(pc_initial=88 nstack_initial=2))},
             '$phi152.2': {('$88for_iter.3',
                            State(pc_initial=88 nstack_initial=2))},
             '$phi156.0': {('$phi52.0', State(pc_initial=52 nstack_initial=1))},
             '$phi156.1': {('$52for_iter.2',
                            State(pc_initial=52 nstack_initial=1))},
             '$phi52.0': {('$50get_iter.7',
                           State(pc_initial=0 nstack_initial=0)),
                          ('$phi152.0',
                           State(pc_initial=152 nstack_initial=3))},
             '$phi56.0': {('$phi52.0', State(pc_initial=52 nstack_initial=1))},
             '$phi56.1': {('$52for_iter.2',
                           State(pc_initial=52 nstack_initial=1))},
             '$phi88.0': {('$phi56.0', State(pc_initial=56 nstack_initial=2)),
                          ('$phi92.0', State(pc_initial=92 nstack_initial=3))},
             '$phi88.1': {('$86get_iter.9',
                           State(pc_initial=56 nstack_initial=2)),
                          ('$phi92.1', State(pc_initial=92 nstack_initial=3))},
             '$phi92.0': {('$phi88.0', State(pc_initial=88 nstack_initial=2))},
             '$phi92.1': {('$phi88.1', State(pc_initial=88 nstack_initial=2))},
             '$phi92.2': {('$88for_iter.3',
                           State(pc_initial=88 nstack_initial=2))}})
changing phismap: defaultdict(<class 'set'>,
            {'$phi152.0': {('$phi56.0', State(pc_initial=56 nstack_initial=2)),
                           ('$phi92.0', State(pc_initial=92 nstack_initial=3))},
             '$phi152.1': {('$86get_iter.9',
                            State(pc_initial=56 nstack_initial=2)),
                           ('$phi92.1', State(pc_initial=92 nstack_initial=3))},
             '$phi152.2': {('$88for_iter.3',
                            State(pc_initial=88 nstack_initial=2))},
             '$phi156.0': {('$50get_iter.7',
                            State(pc_initial=0 nstack_initial=0)),
                           ('$phi152.0',
                            State(pc_initial=152 nstack_initial=3))},
             '$phi156.1': {('$52for_iter.2',
                            State(pc_initial=52 nstack_initial=1))},
             '$phi52.0': {('$50get_iter.7',
                           State(pc_initial=0 nstack_initial=0)),
                          ('$phi56.0', State(pc_initial=56 nstack_initial=2)),
                          ('$phi92.0', State(pc_initial=92 nstack_initial=3))},
             '$phi56.0': {('$50get_iter.7',
                           State(pc_initial=0 nstack_initial=0)),
                          ('$phi56.0', State(pc_initial=56 nstack_initial=2)),
                          ('$phi92.0', State(pc_initial=92 nstack_initial=3))},
             '$phi56.1': {('$52for_iter.2',
                           State(pc_initial=52 nstack_initial=1))},
             '$phi88.0': {('$50get_iter.7',
                           State(pc_initial=0 nstack_initial=0)),
                          ('$phi88.0', State(pc_initial=88 nstack_initial=2))},
             '$phi88.1': {('$86get_iter.9',
                           State(pc_initial=56 nstack_initial=2)),
                          ('$phi88.1', State(pc_initial=88 nstack_initial=2))},
             '$phi92.0': {('$50get_iter.7',
                           State(pc_initial=0 nstack_initial=0))},
             '$phi92.1': {('$86get_iter.9',
                           State(pc_initial=56 nstack_initial=2))},
             '$phi92.2': {('$88for_iter.3',
                           State(pc_initial=88 nstack_initial=2))}})
changing phismap: defaultdict(<class 'set'>,
            {'$phi152.0': {('$50get_iter.7',
                            State(pc_initial=0 nstack_initial=0))},
             '$phi152.1': {('$86get_iter.9',
                            State(pc_initial=56 nstack_initial=2))},
             '$phi152.2': {('$88for_iter.3',
                            State(pc_initial=88 nstack_initial=2))},
             '$phi156.0': {('$50get_iter.7',
                            State(pc_initial=0 nstack_initial=0))},
             '$phi156.1': {('$52for_iter.2',
                            State(pc_initial=52 nstack_initial=1))},
             '$phi52.0': {('$50get_iter.7',
                           State(pc_initial=0 nstack_initial=0))},
             '$phi56.0': {('$50get_iter.7',
                           State(pc_initial=0 nstack_initial=0))},
             '$phi56.1': {('$52for_iter.2',
                           State(pc_initial=52 nstack_initial=1))},
             '$phi88.0': {('$50get_iter.7',
                           State(pc_initial=0 nstack_initial=0))},
             '$phi88.1': {('$86get_iter.9',
                           State(pc_initial=56 nstack_initial=2))},
             '$phi92.0': {('$50get_iter.7',
                           State(pc_initial=0 nstack_initial=0))},
             '$phi92.1': {('$86get_iter.9',
                           State(pc_initial=56 nstack_initial=2))},
             '$phi92.2': {('$88for_iter.3',
                           State(pc_initial=88 nstack_initial=2))}})
changing phismap: defaultdict(<class 'set'>,
            {'$phi152.0': {('$50get_iter.7',
                            State(pc_initial=0 nstack_initial=0))},
             '$phi152.1': {('$86get_iter.9',
                            State(pc_initial=56 nstack_initial=2))},
             '$phi152.2': {('$88for_iter.3',
                            State(pc_initial=88 nstack_initial=2))},
             '$phi156.0': {('$50get_iter.7',
                            State(pc_initial=0 nstack_initial=0))},
             '$phi156.1': {('$52for_iter.2',
                            State(pc_initial=52 nstack_initial=1))},
             '$phi52.0': {('$50get_iter.7',
                           State(pc_initial=0 nstack_initial=0))},
             '$phi56.0': {('$50get_iter.7',
                           State(pc_initial=0 nstack_initial=0))},
             '$phi56.1': {('$52for_iter.2',
                           State(pc_initial=52 nstack_initial=1))},
             '$phi88.0': {('$50get_iter.7',
                           State(pc_initial=0 nstack_initial=0))},
             '$phi88.1': {('$86get_iter.9',
                           State(pc_initial=56 nstack_initial=2))},
             '$phi92.0': {('$50get_iter.7',
                           State(pc_initial=0 nstack_initial=0))},
             '$phi92.1': {('$86get_iter.9',
                           State(pc_initial=56 nstack_initial=2))},
             '$phi92.2': {('$88for_iter.3',
                           State(pc_initial=88 nstack_initial=2))}})
keep phismap: {'$phi52.0': {('$50get_iter.7', State(pc_initial=0 nstack_initial=0))},
 '$phi56.1': {('$52for_iter.2', State(pc_initial=52 nstack_initial=1))},
 '$phi88.1': {('$86get_iter.9', State(pc_initial=56 nstack_initial=2))},
 '$phi92.2': {('$88for_iter.3', State(pc_initial=88 nstack_initial=2))}}
new_out: defaultdict(<class 'dict'>,
            {State(pc_initial=0 nstack_initial=0): {'$phi52.0': '$50get_iter.7'},
             State(pc_initial=52 nstack_initial=1): {'$phi56.1': '$52for_iter.2'},
             State(pc_initial=56 nstack_initial=2): {'$phi88.1': '$86get_iter.9'},
             State(pc_initial=88 nstack_initial=2): {'$phi92.2': '$88for_iter.3'}})
----------------------DONE Prune PHIs-----------------------
block_infos State(pc_initial=0 nstack_initial=0):
AdaptBlockInfo(insts=((0, {}), (2, {}), (4, {'idx': 0, 'res': '$4load_global.0'}), (14, {'res': '$X14.2'}), (16, {'item': '$X14.2', 'res': '$16load_attr.3'}), (36, {'res': '$const36.4'}), (38, {'index': '$const36.4', 'target': '$16load_attr.3', 'res': '$38binary_subscr.5'}), (42, {'func': '$4load_global.0', 'args': ['$38binary_subscr.5'], 'kw_names': None, 'res': '$42call.6'}), (50, {'value': '$42call.6', 'res': '$50get_iter.7'})), outgoing_phis={'$phi52.0': '$50get_iter.7'}, blockstack=(), active_try_block=None, outgoing_edgepushed={52: ('$50get_iter.7',)})
block_infos State(pc_initial=52 nstack_initial=1):
AdaptBlockInfo(insts=((52, {'iterator': '$phi52.0', 'pair': '$52for_iter.1', 'indval': '$52for_iter.2', 'pred': '$52for_iter.3'}),), outgoing_phis={'$phi56.1': '$52for_iter.2'}, blockstack=(), active_try_block=None, outgoing_edgepushed={156: ('$phi52.0', '$52for_iter.2'), 56: ('$phi52.0', '$52for_iter.2')})
block_infos State(pc_initial=56 nstack_initial=2):
AdaptBlockInfo(insts=((56, {'value': '$phi56.1'}), (58, {'idx': 0, 'res': '$58load_global.2'}), (68, {'res': '$hypervector_size68.4'}), (70, {'res': '$hypervector_size70.5'}), (72, {'res': '$const72.6'}), (74, {'op': '*', 'lhs': '$hypervector_size70.5', 'rhs': '$const72.6', 'res': '$binop_mul74.7'}), (78, {'func': '$58load_global.2', 'args': ['$hypervector_size68.4', '$binop_mul74.7'], 'kw_names': None, 'res': '$78call.8'}), (86, {'value': '$78call.8', 'res': '$86get_iter.9'})), outgoing_phis={'$phi88.1': '$86get_iter.9'}, blockstack=(), active_try_block=None, outgoing_edgepushed={88: ('$phi56.0', '$86get_iter.9')})
block_infos State(pc_initial=88 nstack_initial=2):
AdaptBlockInfo(insts=((88, {'iterator': '$phi88.1', 'pair': '$88for_iter.2', 'indval': '$88for_iter.3', 'pred': '$88for_iter.4'}),), outgoing_phis={'$phi92.2': '$88for_iter.3'}, blockstack=(), active_try_block=None, outgoing_edgepushed={152: ('$phi88.0', '$phi88.1', '$88for_iter.3'), 92: ('$phi88.0', '$phi88.1', '$88for_iter.3')})
block_infos State(pc_initial=92 nstack_initial=3):
AdaptBlockInfo(insts=((92, {'value': '$phi92.2'}), (94, {'res': '$k94.3'}), (96, {'res': '$const96.4'}), (98, {'op': '//', 'lhs': '$k94.3', 'rhs': '$const96.4', 'res': '$binop_floordiv98.5'}), (102, {'value': '$binop_floordiv98.5'}), (104, {'res': '$k104.6'}), (106, {'res': '$const106.7'}), (108, {'op': '%', 'lhs': '$k104.6', 'rhs': '$const106.7', 'res': '$binop_mod108.8'}), (112, {'value': '$binop_mod108.8'}), (114, {'res': '$X114.9'}), (116, {'res': '$i116.10'}), (118, {'res': '$chunk118.11'}), (120, {'items': ['$i116.10', '$chunk118.11'], 'res': '$120build_tuple.12'}), (126, {'index': '$120build_tuple.12', 'target': '$X114.9', 'res': '$126binary_subscr.13'}), (130, {'res': '$const130.14'}), (132, {'res': '$pos132.15'}), (134, {'op': '<<', 'lhs': '$const130.14', 'rhs': '$pos132.15', 'res': '$binop_lshift134.16'}), (138, {'op': '|=', 'lhs': '$126binary_subscr.13', 'rhs': '$binop_lshift134.16', 'res': '$binop_ior138.17'}), (146, {'target': '$X114.9', 'index': '$120build_tuple.12', 'value': '$binop_ior138.17'}), (150, {})), outgoing_phis={}, blockstack=(), active_try_block=None, outgoing_edgepushed={88: ('$phi92.0', '$phi92.1')})
block_infos State(pc_initial=152 nstack_initial=3):
AdaptBlockInfo(insts=((154, {}),), outgoing_phis={}, blockstack=(), active_try_block=None, outgoing_edgepushed={52: ('$phi152.0',)})
block_infos State(pc_initial=156 nstack_initial=2):
AdaptBlockInfo(insts=((158, {'retval': '$const158.2', 'castval': '$158return_const.3'}),), outgoing_phis={}, blockstack=(), active_try_block=None, outgoing_edgepushed={})
label 0:
    hypervector_size = arg(0, name=hypervector_size) ['hypervector_size']
    X = arg(1, name=X)                       ['X']
    $4load_global.0 = global(range: <class 'range'>) ['$4load_global.0']
    $16load_attr.3 = getattr(value=X, attr=shape) ['$16load_attr.3', 'X']
    $const36.4 = const(int, 0)               ['$const36.4']
    $38binary_subscr.5 = getitem(value=$16load_attr.3, index=$const36.4, fn=<built-in function getitem>) ['$16load_attr.3', '$38binary_subscr.5', '$const36.4']
    $42call.6 = call $4load_global.0($38binary_subscr.5, func=$4load_global.0, args=[Var($38binary_subscr.5, graphs.py:75)], kws=(), vararg=None, varkwarg=None, target=None) ['$38binary_subscr.5', '$42call.6', '$4load_global.0']
    $50get_iter.7 = getiter(value=$42call.6) ['$42call.6', '$50get_iter.7']
    $phi52.0 = $50get_iter.7                 ['$50get_iter.7', '$phi52.0']
    jump 52                                  []
label 52:
    $52for_iter.1 = iternext(value=$phi52.0) ['$52for_iter.1', '$phi52.0']
    $52for_iter.2 = pair_first(value=$52for_iter.1) ['$52for_iter.1', '$52for_iter.2']
    $52for_iter.3 = pair_second(value=$52for_iter.1) ['$52for_iter.1', '$52for_iter.3']
    $phi56.1 = $52for_iter.2                 ['$52for_iter.2', '$phi56.1']
    branch $52for_iter.3, 56, 156            ['$52for_iter.3']
label 56:
    i = $phi56.1                             ['$phi56.1', 'i']
    $58load_global.2 = global(range: <class 'range'>) ['$58load_global.2']
    $const72.6 = const(int, 2)               ['$const72.6']
    $binop_mul74.7 = hypervector_size * $const72.6 ['$binop_mul74.7', '$const72.6', 'hypervector_size']
    $78call.8 = call $58load_global.2(hypervector_size, $binop_mul74.7, func=$58load_global.2, args=[Var(hypervector_size, graphs.py:72), Var($binop_mul74.7, graphs.py:76)], kws=(), vararg=None, varkwarg=None, target=None) ['$58load_global.2', '$78call.8', '$binop_mul74.7', 'hypervector_size']
    $86get_iter.9 = getiter(value=$78call.8) ['$78call.8', '$86get_iter.9']
    $phi88.1 = $86get_iter.9                 ['$86get_iter.9', '$phi88.1']
    jump 88                                  []
label 88:
    $88for_iter.2 = iternext(value=$phi88.1) ['$88for_iter.2', '$phi88.1']
    $88for_iter.3 = pair_first(value=$88for_iter.2) ['$88for_iter.2', '$88for_iter.3']
    $88for_iter.4 = pair_second(value=$88for_iter.2) ['$88for_iter.2', '$88for_iter.4']
    $phi92.2 = $88for_iter.3                 ['$88for_iter.3', '$phi92.2']
    branch $88for_iter.4, 92, 152            ['$88for_iter.4']
label 92:
    k = $phi92.2                             ['$phi92.2', 'k']
    $const96.4 = const(int, 32)              ['$const96.4']
    chunk = k // $const96.4                  ['$const96.4', 'chunk', 'k']
    $const106.7 = const(int, 32)             ['$const106.7']
    pos = k % $const106.7                    ['$const106.7', 'k', 'pos']
    $120build_tuple.12 = build_tuple(items=[Var(i, graphs.py:75), Var(chunk, graphs.py:77)]) ['$120build_tuple.12', 'chunk', 'i']
    $126binary_subscr.13 = getitem(value=X, index=$120build_tuple.12, fn=<built-in function getitem>) ['$120build_tuple.12', '$126binary_subscr.13', 'X']
    $const130.14 = const(int, 1)             ['$const130.14']
    $binop_lshift134.16 = $const130.14 << pos ['$binop_lshift134.16', '$const130.14', 'pos']
    $binop_ior138.17 = inplace_binop(fn=<built-in function ior>, immutable_fn=<built-in function or_>, lhs=$126binary_subscr.13, rhs=$binop_lshift134.16, static_lhs=Undefined, static_rhs=Undefined) ['$126binary_subscr.13', '$binop_ior138.17', '$binop_lshift134.16']
    X[$120build_tuple.12] = $binop_ior138.17 ['$120build_tuple.12', '$binop_ior138.17', 'X']
    jump 88                                  []
label 152:
    jump 52                                  []
label 156:
    $const158.2 = const(NoneType, None)      ['$const158.2']
    $158return_const.3 = cast(value=$const158.2) ['$158return_const.3', '$const158.2']
    return $158return_const.3                ['$158return_const.3']

==== SSA block analysis pass on 0
Running <numba.core.ssa._GatherDefsHandler object at 0x7f8e16ba1790>
on stmt: hypervector_size = arg(0, name=hypervector_size)
on stmt: X = arg(1, name=X)
on stmt: $4load_global.0 = global(range: <class 'range'>)
on stmt: $16load_attr.3 = getattr(value=X, attr=shape)
on stmt: $const36.4 = const(int, 0)
on stmt: $38binary_subscr.5 = static_getitem(value=$16load_attr.3, index=0, index_var=$const36.4, fn=<built-in function getitem>)
on stmt: $42call.6 = call $4load_global.0($38binary_subscr.5, func=$4load_global.0, args=[Var($38binary_subscr.5, graphs.py:75)], kws=(), vararg=None, varkwarg=None, target=None)
on stmt: $50get_iter.7 = getiter(value=$42call.6)
on stmt: $phi52.0 = $50get_iter.7
on stmt: jump 52
==== SSA block analysis pass on 52
Running <numba.core.ssa._GatherDefsHandler object at 0x7f8e16ba1790>
on stmt: $52for_iter.1 = iternext(value=$phi52.0)
on stmt: $52for_iter.2 = pair_first(value=$52for_iter.1)
on stmt: $52for_iter.3 = pair_second(value=$52for_iter.1)
on stmt: $phi56.1 = $52for_iter.2
on stmt: branch $52for_iter.3, 56, 156
==== SSA block analysis pass on 56
Running <numba.core.ssa._GatherDefsHandler object at 0x7f8e16ba1790>
on stmt: i = $phi56.1
on stmt: $58load_global.2 = global(range: <class 'range'>)
on stmt: $const72.6 = const(int, 2)
on stmt: $binop_mul74.7 = hypervector_size * $const72.6
on stmt: $78call.8 = call $58load_global.2(hypervector_size, $binop_mul74.7, func=$58load_global.2, args=[Var(hypervector_size, graphs.py:72), Var($binop_mul74.7, graphs.py:76)], kws=(), vararg=None, varkwarg=None, target=None)
on stmt: $86get_iter.9 = getiter(value=$78call.8)
on stmt: $phi88.1 = $86get_iter.9
on stmt: jump 88
==== SSA block analysis pass on 88
Running <numba.core.ssa._GatherDefsHandler object at 0x7f8e16ba1790>
on stmt: $88for_iter.2 = iternext(value=$phi88.1)
on stmt: $88for_iter.3 = pair_first(value=$88for_iter.2)
on stmt: $88for_iter.4 = pair_second(value=$88for_iter.2)
on stmt: $phi92.2 = $88for_iter.3
on stmt: branch $88for_iter.4, 92, 152
==== SSA block analysis pass on 92
Running <numba.core.ssa._GatherDefsHandler object at 0x7f8e16ba1790>
on stmt: k = $phi92.2
on stmt: $const96.4 = const(int, 32)
on stmt: chunk = k // $const96.4
on stmt: $const106.7 = const(int, 32)
on stmt: pos = k % $const106.7
on stmt: $120build_tuple.12 = build_tuple(items=[Var(i, graphs.py:75), Var(chunk, graphs.py:77)])
on stmt: $126binary_subscr.13 = getitem(value=X, index=$120build_tuple.12, fn=<built-in function getitem>)
on stmt: $const130.14 = const(int, 1)
on stmt: $binop_lshift134.16 = $const130.14 << pos
on stmt: $binop_ior138.17 = inplace_binop(fn=<built-in function ior>, immutable_fn=<built-in function or_>, lhs=$126binary_subscr.13, rhs=$binop_lshift134.16, static_lhs=Undefined, static_rhs=Undefined)
on stmt: X[$120build_tuple.12] = $binop_ior138.17
on stmt: jump 88
==== SSA block analysis pass on 152
Running <numba.core.ssa._GatherDefsHandler object at 0x7f8e16ba1790>
on stmt: jump 52
==== SSA block analysis pass on 156
Running <numba.core.ssa._GatherDefsHandler object at 0x7f8e16ba1790>
on stmt: $const158.2 = const(NoneType, None)
on stmt: $158return_const.3 = cast(value=$const158.2)
on stmt: return $158return_const.3
defs defaultdict(<class 'list'>,
            {'$120build_tuple.12': [(<numba.core.ir.Assign object at 0x7f8e16ba3bc0>,
                                     92)],
             '$126binary_subscr.13': [(<numba.core.ir.Assign object at 0x7f8e16ba3d10>,
                                       92)],
             '$158return_const.3': [(<numba.core.ir.Assign object at 0x7f8e16ba2ea0>,
                                     156)],
             '$16load_attr.3': [(<numba.core.ir.Assign object at 0x7f8e16ba18b0>,
                                 0)],
             '$38binary_subscr.5': [(<numba.core.ir.Assign object at 0x7f8e16ba1910>,
                                     0)],
             '$42call.6': [(<numba.core.ir.Assign object at 0x7f8e16ba2480>,
                            0)],
             '$4load_global.0': [(<numba.core.ir.Assign object at 0x7f8e16ba1ee0>,
                                  0)],
             '$50get_iter.7': [(<numba.core.ir.Assign object at 0x7f8e16ba2510>,
                                0)],
             '$52for_iter.1': [(<numba.core.ir.Assign object at 0x7f8e16ba2690>,
                                52)],
             '$52for_iter.2': [(<numba.core.ir.Assign object at 0x7f8e16ba2720>,
                                52)],
             '$52for_iter.3': [(<numba.core.ir.Assign object at 0x7f8e16ba27b0>,
                                52)],
             '$58load_global.2': [(<numba.core.ir.Assign object at 0x7f8e16ba29c0>,
                                   56)],
             '$78call.8': [(<numba.core.ir.Assign object at 0x7f8e16ba2d80>,
                            56)],
             '$86get_iter.9': [(<numba.core.ir.Assign object at 0x7f8e16ba2e10>,
                                56)],
             '$88for_iter.2': [(<numba.core.ir.Assign object at 0x7f8e16ba2f90>,
                                88)],
             '$88for_iter.3': [(<numba.core.ir.Assign object at 0x7f8e16ba3050>,
                                88)],
             '$88for_iter.4': [(<numba.core.ir.Assign object at 0x7f8e16ba3140>,
                                88)],
             '$binop_ior138.17': [(<numba.core.ir.Assign object at 0x7f8e16bc81a0>,
                                   92)],
             '$binop_lshift134.16': [(<numba.core.ir.Assign object at 0x7f8e16bc8080>,
                                      92)],
             '$binop_mul74.7': [(<numba.core.ir.Assign object at 0x7f8e16ba2c90>,
                                 56)],
             '$const106.7': [(<numba.core.ir.Assign object at 0x7f8e16ba3980>,
                              92)],
             '$const130.14': [(<numba.core.ir.Assign object at 0x7f8e16ba3e00>,
                               92)],
             '$const158.2': [(<numba.core.ir.Assign object at 0x7f8e16ba0e30>,
                              156)],
             '$const36.4': [(<numba.core.ir.Assign object at 0x7f8e16ba22a0>,
                             0)],
             '$const72.6': [(<numba.core.ir.Assign object at 0x7f8e16ba2ba0>,
                             56)],
             '$const96.4': [(<numba.core.ir.Assign object at 0x7f8e16ba3560>,
                             92)],
             '$phi52.0': [(<numba.core.ir.Assign object at 0x7f8e16ba1f10>, 0)],
             '$phi56.1': [(<numba.core.ir.Assign object at 0x7f8e16ba2600>,
                           52)],
             '$phi88.1': [(<numba.core.ir.Assign object at 0x7f8e16ba2ae0>,
                           56)],
             '$phi92.2': [(<numba.core.ir.Assign object at 0x7f8e16ba31d0>,
                           88)],
             'X': [(<numba.core.ir.Assign object at 0x7f8e16ba1fa0>, 0)],
             'chunk': [(<numba.core.ir.Assign object at 0x7f8e16ba36b0>, 92)],
             'hypervector_size': [(<numba.core.ir.Assign object at 0x7f8e16ba2240>,
                                   0)],
             'i': [(<numba.core.ir.Assign object at 0x7f8e16ba2900>, 56)],
             'k': [(<numba.core.ir.Assign object at 0x7f8e16ba3350>, 92)],
             'pos': [(<numba.core.ir.Assign object at 0x7f8e16ba3ad0>, 92)]})
SSA violators <numba.core.utils.OrderedSet object at 0x7f8e16ba1790>
bytecode dump:
>          0	NOP(arg=None, lineno=121)
           2	RESUME(arg=0, lineno=121)
           4	LOAD_FAST(arg=0, lineno=124)
           6	LOAD_FAST(arg=4, lineno=124)
           8	LOAD_CONST(arg=0, lineno=124)
          10	LOAD_CONST(arg=0, lineno=124)
          12	BUILD_SLICE(arg=2, lineno=124)
          14	BUILD_TUPLE(arg=2, lineno=124)
          16	BINARY_SUBSCR(arg=None, lineno=124)
          20	GET_ITER(arg=None, lineno=124)
>         22	FOR_ITER(arg=71, lineno=124)
          26	STORE_FAST(arg=6, lineno=124)
          28	LOAD_FAST(arg=6, lineno=125)
          30	LOAD_CONST(arg=1, lineno=125)
          32	BINARY_OP(arg=2, lineno=125)
          36	STORE_FAST(arg=7, lineno=125)
          38	LOAD_FAST(arg=6, lineno=126)
          40	LOAD_CONST(arg=1, lineno=126)
          42	BINARY_OP(arg=6, lineno=126)
          46	STORE_FAST(arg=8, lineno=126)
          48	LOAD_FAST(arg=5, lineno=128)
          50	LOAD_FAST(arg=2, lineno=128)
          52	LOAD_FAST(arg=3, lineno=128)
          54	BINARY_OP(arg=0, lineno=128)
          58	LOAD_FAST(arg=7, lineno=128)
          60	BUILD_TUPLE(arg=2, lineno=128)
          62	COPY(arg=2, lineno=128)
          64	COPY(arg=2, lineno=128)
          66	BINARY_SUBSCR(arg=None, lineno=128)
          70	LOAD_CONST(arg=2, lineno=128)
          72	LOAD_FAST(arg=8, lineno=128)
          74	BINARY_OP(arg=3, lineno=128)
          78	BINARY_OP(arg=20, lineno=128)
          82	SWAP(arg=3, lineno=128)
          84	SWAP(arg=2, lineno=128)
          86	STORE_SUBSCR(arg=None, lineno=128)
          90	LOAD_FAST(arg=6, lineno=130)
          92	LOAD_FAST(arg=1, lineno=130)
          94	BINARY_OP(arg=0, lineno=130)
          98	LOAD_CONST(arg=1, lineno=130)
         100	BINARY_OP(arg=2, lineno=130)
         104	STORE_FAST(arg=7, lineno=130)
         106	LOAD_FAST(arg=6, lineno=131)
         108	LOAD_FAST(arg=1, lineno=131)
         110	BINARY_OP(arg=0, lineno=131)
         114	LOAD_CONST(arg=1, lineno=131)
         116	BINARY_OP(arg=6, lineno=131)
         120	STORE_FAST(arg=8, lineno=131)
         122	LOAD_FAST(arg=5, lineno=132)
         124	LOAD_FAST(arg=2, lineno=132)
         126	LOAD_FAST(arg=3, lineno=132)
         128	BINARY_OP(arg=0, lineno=132)
         132	LOAD_FAST(arg=7, lineno=132)
         134	BUILD_TUPLE(arg=2, lineno=132)
         136	COPY(arg=2, lineno=132)
         138	COPY(arg=2, lineno=132)
         140	BINARY_SUBSCR(arg=None, lineno=132)
         144	LOAD_CONST(arg=2, lineno=132)
         146	LOAD_FAST(arg=8, lineno=132)
         148	BINARY_OP(arg=3, lineno=132)
         152	UNARY_INVERT(arg=None, lineno=132)
         154	BINARY_OP(arg=14, lineno=132)
         158	SWAP(arg=3, lineno=132)
         160	SWAP(arg=2, lineno=132)
         162	STORE_SUBSCR(arg=None, lineno=132)
         166	JUMP_BACKWARD(arg=73, lineno=132)
>        168	END_FOR(arg=None, lineno=124)
         170	RETURN_CONST(arg=0, lineno=124)
pending: deque([State(pc_initial=0 nstack_initial=0)])
stack: []
state.pc_initial: State(pc_initial=0 nstack_initial=0)
dispatch pc=0, inst=NOP(arg=None, lineno=121)
stack []
dispatch pc=2, inst=RESUME(arg=0, lineno=121)
stack []
dispatch pc=4, inst=LOAD_FAST(arg=0, lineno=124)
stack []
dispatch pc=6, inst=LOAD_FAST(arg=4, lineno=124)
stack ['$hypervectors4.0']
dispatch pc=8, inst=LOAD_CONST(arg=0, lineno=124)
stack ['$hypervectors4.0', '$symbol6.1']
dispatch pc=10, inst=LOAD_CONST(arg=0, lineno=124)
stack ['$hypervectors4.0', '$symbol6.1', '$const8.2']
dispatch pc=12, inst=BUILD_SLICE(arg=2, lineno=124)
stack ['$hypervectors4.0', '$symbol6.1', '$const8.2', '$const10.3']
dispatch pc=14, inst=BUILD_TUPLE(arg=2, lineno=124)
stack ['$hypervectors4.0', '$symbol6.1', '$12build_slice.5']
dispatch pc=16, inst=BINARY_SUBSCR(arg=None, lineno=124)
stack ['$hypervectors4.0', '$14build_tuple.6']
dispatch pc=20, inst=GET_ITER(arg=None, lineno=124)
stack ['$16binary_subscr.7']
end state. edges=[Edge(pc=22, stack=('$20get_iter.8',), blockstack=(), npush=0)]
pending: deque([State(pc_initial=22 nstack_initial=1)])
stack: ['$phi22.0']
state.pc_initial: State(pc_initial=22 nstack_initial=1)
dispatch pc=22, inst=FOR_ITER(arg=71, lineno=124)
stack ['$phi22.0']
end state. edges=[Edge(pc=168, stack=('$phi22.0', '$22for_iter.2'), blockstack=(), npush=0), Edge(pc=26, stack=('$phi22.0', '$22for_iter.2'), blockstack=(), npush=0)]
pending: deque([State(pc_initial=168 nstack_initial=2), State(pc_initial=26 nstack_initial=2)])
stack: ['$phi168.0', '$phi168.1']
state.pc_initial: State(pc_initial=168 nstack_initial=2)
dispatch pc=168, inst=END_FOR(arg=None, lineno=124)
stack ['$phi168.0', '$phi168.1']
dispatch pc=170, inst=RETURN_CONST(arg=0, lineno=124)
stack []
end state. edges=[]
pending: deque([State(pc_initial=26 nstack_initial=2)])
stack: ['$phi26.0', '$phi26.1']
state.pc_initial: State(pc_initial=26 nstack_initial=2)
dispatch pc=26, inst=STORE_FAST(arg=6, lineno=124)
stack ['$phi26.0', '$phi26.1']
dispatch pc=28, inst=LOAD_FAST(arg=6, lineno=125)
stack ['$phi26.0']
dispatch pc=30, inst=LOAD_CONST(arg=1, lineno=125)
stack ['$phi26.0', '$k28.2']
dispatch pc=32, inst=BINARY_OP(arg=2, lineno=125)
stack ['$phi26.0', '$k28.2', '$const30.3']
dispatch pc=36, inst=STORE_FAST(arg=7, lineno=125)
stack ['$phi26.0', '$binop_floordiv32.4']
dispatch pc=38, inst=LOAD_FAST(arg=6, lineno=126)
stack ['$phi26.0']
dispatch pc=40, inst=LOAD_CONST(arg=1, lineno=126)
stack ['$phi26.0', '$k38.5']
dispatch pc=42, inst=BINARY_OP(arg=6, lineno=126)
stack ['$phi26.0', '$k38.5', '$const40.6']
dispatch pc=46, inst=STORE_FAST(arg=8, lineno=126)
stack ['$phi26.0', '$binop_mod42.7']
dispatch pc=48, inst=LOAD_FAST(arg=5, lineno=128)
stack ['$phi26.0']
dispatch pc=50, inst=LOAD_FAST(arg=2, lineno=128)
stack ['$phi26.0', '$X48.8']
dispatch pc=52, inst=LOAD_FAST(arg=3, lineno=128)
stack ['$phi26.0', '$X48.8', '$graph_index50.9']
dispatch pc=54, inst=BINARY_OP(arg=0, lineno=128)
stack ['$phi26.0', '$X48.8', '$graph_index50.9', '$node52.10']
dispatch pc=58, inst=LOAD_FAST(arg=7, lineno=128)
stack ['$phi26.0', '$X48.8', '$binop_add54.11']
dispatch pc=60, inst=BUILD_TUPLE(arg=2, lineno=128)
stack ['$phi26.0', '$X48.8', '$binop_add54.11', '$chunk58.12']
dispatch pc=62, inst=COPY(arg=2, lineno=128)
stack ['$phi26.0', '$X48.8', '$60build_tuple.13']
dispatch pc=64, inst=COPY(arg=2, lineno=128)
stack ['$phi26.0', '$X48.8', '$60build_tuple.13', '$X48.8']
dispatch pc=66, inst=BINARY_SUBSCR(arg=None, lineno=128)
stack ['$phi26.0', '$X48.8', '$60build_tuple.13', '$X48.8', '$60build_tuple.13']
dispatch pc=70, inst=LOAD_CONST(arg=2, lineno=128)
stack ['$phi26.0', '$X48.8', '$60build_tuple.13', '$66binary_subscr.14']
dispatch pc=72, inst=LOAD_FAST(arg=8, lineno=128)
stack ['$phi26.0', '$X48.8', '$60build_tuple.13', '$66binary_subscr.14', '$const70.15']
dispatch pc=74, inst=BINARY_OP(arg=3, lineno=128)
stack ['$phi26.0', '$X48.8', '$60build_tuple.13', '$66binary_subscr.14', '$const70.15', '$pos72.16']
dispatch pc=78, inst=BINARY_OP(arg=20, lineno=128)
stack ['$phi26.0', '$X48.8', '$60build_tuple.13', '$66binary_subscr.14', '$binop_lshift74.17']
dispatch pc=82, inst=SWAP(arg=3, lineno=128)
stack ['$phi26.0', '$X48.8', '$60build_tuple.13', '$binop_ior78.18']
dispatch pc=84, inst=SWAP(arg=2, lineno=128)
stack ['$phi26.0', '$binop_ior78.18', '$60build_tuple.13', '$X48.8']
dispatch pc=86, inst=STORE_SUBSCR(arg=None, lineno=128)
stack ['$phi26.0', '$binop_ior78.18', '$X48.8', '$60build_tuple.13']
dispatch pc=90, inst=LOAD_FAST(arg=6, lineno=130)
stack ['$phi26.0']
dispatch pc=92, inst=LOAD_FAST(arg=1, lineno=130)
stack ['$phi26.0', '$k90.19']
dispatch pc=94, inst=BINARY_OP(arg=0, lineno=130)
stack ['$phi26.0', '$k90.19', '$hypervector_size92.20']
dispatch pc=98, inst=LOAD_CONST(arg=1, lineno=130)
stack ['$phi26.0', '$binop_add94.21']
dispatch pc=100, inst=BINARY_OP(arg=2, lineno=130)
stack ['$phi26.0', '$binop_add94.21', '$const98.22']
dispatch pc=104, inst=STORE_FAST(arg=7, lineno=130)
stack ['$phi26.0', '$binop_floordiv100.23']
dispatch pc=106, inst=LOAD_FAST(arg=6, lineno=131)
stack ['$phi26.0']
dispatch pc=108, inst=LOAD_FAST(arg=1, lineno=131)
stack ['$phi26.0', '$k106.24']
dispatch pc=110, inst=BINARY_OP(arg=0, lineno=131)
stack ['$phi26.0', '$k106.24', '$hypervector_size108.25']
dispatch pc=114, inst=LOAD_CONST(arg=1, lineno=131)
stack ['$phi26.0', '$binop_add110.26']
dispatch pc=116, inst=BINARY_OP(arg=6, lineno=131)
stack ['$phi26.0', '$binop_add110.26', '$const114.27']
dispatch pc=120, inst=STORE_FAST(arg=8, lineno=131)
stack ['$phi26.0', '$binop_mod116.28']
dispatch pc=122, inst=LOAD_FAST(arg=5, lineno=132)
stack ['$phi26.0']
dispatch pc=124, inst=LOAD_FAST(arg=2, lineno=132)
stack ['$phi26.0', '$X122.29']
dispatch pc=126, inst=LOAD_FAST(arg=3, lineno=132)
stack ['$phi26.0', '$X122.29', '$graph_index124.30']
dispatch pc=128, inst=BINARY_OP(arg=0, lineno=132)
stack ['$phi26.0', '$X122.29', '$graph_index124.30', '$node126.31']
dispatch pc=132, inst=LOAD_FAST(arg=7, lineno=132)
stack ['$phi26.0', '$X122.29', '$binop_add128.32']
dispatch pc=134, inst=BUILD_TUPLE(arg=2, lineno=132)
stack ['$phi26.0', '$X122.29', '$binop_add128.32', '$chunk132.33']
dispatch pc=136, inst=COPY(arg=2, lineno=132)
stack ['$phi26.0', '$X122.29', '$134build_tuple.34']
dispatch pc=138, inst=COPY(arg=2, lineno=132)
stack ['$phi26.0', '$X122.29', '$134build_tuple.34', '$X122.29']
dispatch pc=140, inst=BINARY_SUBSCR(arg=None, lineno=132)
stack ['$phi26.0', '$X122.29', '$134build_tuple.34', '$X122.29', '$134build_tuple.34']
dispatch pc=144, inst=LOAD_CONST(arg=2, lineno=132)
stack ['$phi26.0', '$X122.29', '$134build_tuple.34', '$140binary_subscr.35']
dispatch pc=146, inst=LOAD_FAST(arg=8, lineno=132)
stack ['$phi26.0', '$X122.29', '$134build_tuple.34', '$140binary_subscr.35', '$const144.36']
dispatch pc=148, inst=BINARY_OP(arg=3, lineno=132)
stack ['$phi26.0', '$X122.29', '$134build_tuple.34', '$140binary_subscr.35', '$const144.36', '$pos146.37']
dispatch pc=152, inst=UNARY_INVERT(arg=None, lineno=132)
stack ['$phi26.0', '$X122.29', '$134build_tuple.34', '$140binary_subscr.35', '$binop_lshift148.38']
dispatch pc=154, inst=BINARY_OP(arg=14, lineno=132)
stack ['$phi26.0', '$X122.29', '$134build_tuple.34', '$140binary_subscr.35', '$152unary_invert.39']
dispatch pc=158, inst=SWAP(arg=3, lineno=132)
stack ['$phi26.0', '$X122.29', '$134build_tuple.34', '$binop_iand154.40']
dispatch pc=160, inst=SWAP(arg=2, lineno=132)
stack ['$phi26.0', '$binop_iand154.40', '$134build_tuple.34', '$X122.29']
dispatch pc=162, inst=STORE_SUBSCR(arg=None, lineno=132)
stack ['$phi26.0', '$binop_iand154.40', '$X122.29', '$134build_tuple.34']
dispatch pc=166, inst=JUMP_BACKWARD(arg=73, lineno=132)
stack ['$phi26.0']
end state. edges=[Edge(pc=22, stack=('$phi26.0',), blockstack=(), npush=0)]
pending: deque([State(pc_initial=22 nstack_initial=1)])
-------------------------Prune PHIs-------------------------
Used_phis: defaultdict(<class 'set'>,
            {State(pc_initial=0 nstack_initial=0): set(),
             State(pc_initial=22 nstack_initial=1): {'$phi22.0'},
             State(pc_initial=26 nstack_initial=2): {'$phi26.1'},
             State(pc_initial=168 nstack_initial=2): set()})
defmap: {'$phi168.1': State(pc_initial=22 nstack_initial=1),
 '$phi22.0': State(pc_initial=0 nstack_initial=0),
 '$phi26.1': State(pc_initial=22 nstack_initial=1)}
phismap: defaultdict(<class 'set'>,
            {'$phi168.0': {('$phi22.0', State(pc_initial=22 nstack_initial=1))},
             '$phi168.1': {('$22for_iter.2',
                            State(pc_initial=22 nstack_initial=1))},
             '$phi22.0': {('$20get_iter.8',
                           State(pc_initial=0 nstack_initial=0)),
                          ('$phi26.0', State(pc_initial=26 nstack_initial=2))},
             '$phi26.0': {('$phi22.0', State(pc_initial=22 nstack_initial=1))},
             '$phi26.1': {('$22for_iter.2',
                           State(pc_initial=22 nstack_initial=1))}})
changing phismap: defaultdict(<class 'set'>,
            {'$phi168.0': {('$20get_iter.8',
                            State(pc_initial=0 nstack_initial=0)),
                           ('$phi26.0', State(pc_initial=26 nstack_initial=2))},
             '$phi168.1': {('$22for_iter.2',
                            State(pc_initial=22 nstack_initial=1))},
             '$phi22.0': {('$20get_iter.8',
                           State(pc_initial=0 nstack_initial=0)),
                          ('$phi22.0', State(pc_initial=22 nstack_initial=1))},
             '$phi26.0': {('$20get_iter.8',
                           State(pc_initial=0 nstack_initial=0))},
             '$phi26.1': {('$22for_iter.2',
                           State(pc_initial=22 nstack_initial=1))}})
changing phismap: defaultdict(<class 'set'>,
            {'$phi168.0': {('$20get_iter.8',
                            State(pc_initial=0 nstack_initial=0))},
             '$phi168.1': {('$22for_iter.2',
                            State(pc_initial=22 nstack_initial=1))},
             '$phi22.0': {('$20get_iter.8',
                           State(pc_initial=0 nstack_initial=0))},
             '$phi26.0': {('$20get_iter.8',
                           State(pc_initial=0 nstack_initial=0))},
             '$phi26.1': {('$22for_iter.2',
                           State(pc_initial=22 nstack_initial=1))}})
changing phismap: defaultdict(<class 'set'>,
            {'$phi168.0': {('$20get_iter.8',
                            State(pc_initial=0 nstack_initial=0))},
             '$phi168.1': {('$22for_iter.2',
                            State(pc_initial=22 nstack_initial=1))},
             '$phi22.0': {('$20get_iter.8',
                           State(pc_initial=0 nstack_initial=0))},
             '$phi26.0': {('$20get_iter.8',
                           State(pc_initial=0 nstack_initial=0))},
             '$phi26.1': {('$22for_iter.2',
                           State(pc_initial=22 nstack_initial=1))}})
keep phismap: {'$phi22.0': {('$20get_iter.8', State(pc_initial=0 nstack_initial=0))},
 '$phi26.1': {('$22for_iter.2', State(pc_initial=22 nstack_initial=1))}}
new_out: defaultdict(<class 'dict'>,
            {State(pc_initial=0 nstack_initial=0): {'$phi22.0': '$20get_iter.8'},
             State(pc_initial=22 nstack_initial=1): {'$phi26.1': '$22for_iter.2'}})
----------------------DONE Prune PHIs-----------------------
block_infos State(pc_initial=0 nstack_initial=0):
AdaptBlockInfo(insts=((0, {}), (2, {}), (4, {'res': '$hypervectors4.0'}), (6, {'res': '$symbol6.1'}), (8, {'res': '$const8.2'}), (10, {'res': '$const10.3'}), (12, {'start': '$const8.2', 'stop': '$const10.3', 'step': None, 'res': '$12build_slice.5', 'slicevar': '$12build_slice.4'}), (14, {'items': ['$symbol6.1', '$12build_slice.5'], 'res': '$14build_tuple.6'}), (16, {'index': '$14build_tuple.6', 'target': '$hypervectors4.0', 'res': '$16binary_subscr.7'}), (20, {'value': '$16binary_subscr.7', 'res': '$20get_iter.8'})), outgoing_phis={'$phi22.0': '$20get_iter.8'}, blockstack=(), active_try_block=None, outgoing_edgepushed={22: ('$20get_iter.8',)})
block_infos State(pc_initial=22 nstack_initial=1):
AdaptBlockInfo(insts=((22, {'iterator': '$phi22.0', 'pair': '$22for_iter.1', 'indval': '$22for_iter.2', 'pred': '$22for_iter.3'}),), outgoing_phis={'$phi26.1': '$22for_iter.2'}, blockstack=(), active_try_block=None, outgoing_edgepushed={168: ('$phi22.0', '$22for_iter.2'), 26: ('$phi22.0', '$22for_iter.2')})
block_infos State(pc_initial=26 nstack_initial=2):
AdaptBlockInfo(insts=((26, {'value': '$phi26.1'}), (28, {'res': '$k28.2'}), (30, {'res': '$const30.3'}), (32, {'op': '//', 'lhs': '$k28.2', 'rhs': '$const30.3', 'res': '$binop_floordiv32.4'}), (36, {'value': '$binop_floordiv32.4'}), (38, {'res': '$k38.5'}), (40, {'res': '$const40.6'}), (42, {'op': '%', 'lhs': '$k38.5', 'rhs': '$const40.6', 'res': '$binop_mod42.7'}), (46, {'value': '$binop_mod42.7'}), (48, {'res': '$X48.8'}), (50, {'res': '$graph_index50.9'}), (52, {'res': '$node52.10'}), (54, {'op': '+', 'lhs': '$graph_index50.9', 'rhs': '$node52.10', 'res': '$binop_add54.11'}), (58, {'res': '$chunk58.12'}), (60, {'items': ['$binop_add54.11', '$chunk58.12'], 'res': '$60build_tuple.13'}), (66, {'index': '$60build_tuple.13', 'target': '$X48.8', 'res': '$66binary_subscr.14'}), (70, {'res': '$const70.15'}), (72, {'res': '$pos72.16'}), (74, {'op': '<<', 'lhs': '$const70.15', 'rhs': '$pos72.16', 'res': '$binop_lshift74.17'}), (78, {'op': '|=', 'lhs': '$66binary_subscr.14', 'rhs': '$binop_lshift74.17', 'res': '$binop_ior78.18'}), (86, {'target': '$X48.8', 'index': '$60build_tuple.13', 'value': '$binop_ior78.18'}), (90, {'res': '$k90.19'}), (92, {'res': '$hypervector_size92.20'}), (94, {'op': '+', 'lhs': '$k90.19', 'rhs': '$hypervector_size92.20', 'res': '$binop_add94.21'}), (98, {'res': '$const98.22'}), (100, {'op': '//', 'lhs': '$binop_add94.21', 'rhs': '$const98.22', 'res': '$binop_floordiv100.23'}), (104, {'value': '$binop_floordiv100.23'}), (106, {'res': '$k106.24'}), (108, {'res': '$hypervector_size108.25'}), (110, {'op': '+', 'lhs': '$k106.24', 'rhs': '$hypervector_size108.25', 'res': '$binop_add110.26'}), (114, {'res': '$const114.27'}), (116, {'op': '%', 'lhs': '$binop_add110.26', 'rhs': '$const114.27', 'res': '$binop_mod116.28'}), (120, {'value': '$binop_mod116.28'}), (122, {'res': '$X122.29'}), (124, {'res': '$graph_index124.30'}), (126, {'res': '$node126.31'}), (128, {'op': '+', 'lhs': '$graph_index124.30', 'rhs': '$node126.31', 'res': '$binop_add128.32'}), (132, {'res': '$chunk132.33'}), (134, {'items': ['$binop_add128.32', '$chunk132.33'], 'res': '$134build_tuple.34'}), (140, {'index': '$134build_tuple.34', 'target': '$X122.29', 'res': '$140binary_subscr.35'}), (144, {'res': '$const144.36'}), (146, {'res': '$pos146.37'}), (148, {'op': '<<', 'lhs': '$const144.36', 'rhs': '$pos146.37', 'res': '$binop_lshift148.38'}), (152, {'value': '$binop_lshift148.38', 'res': '$152unary_invert.39'}), (154, {'op': '&=', 'lhs': '$140binary_subscr.35', 'rhs': '$152unary_invert.39', 'res': '$binop_iand154.40'}), (162, {'target': '$X122.29', 'index': '$134build_tuple.34', 'value': '$binop_iand154.40'}), (166, {})), outgoing_phis={}, blockstack=(), active_try_block=None, outgoing_edgepushed={22: ('$phi26.0',)})
block_infos State(pc_initial=168 nstack_initial=2):
AdaptBlockInfo(insts=((170, {'retval': '$const170.2', 'castval': '$170return_const.3'}),), outgoing_phis={}, blockstack=(), active_try_block=None, outgoing_edgepushed={})
label 0:
    hypervectors = arg(0, name=hypervectors) ['hypervectors']
    hypervector_size = arg(1, name=hypervector_size) ['hypervector_size']
    graph_index = arg(2, name=graph_index)   ['graph_index']
    node = arg(3, name=node)                 ['node']
    symbol = arg(4, name=symbol)             ['symbol']
    X = arg(5, name=X)                       ['X']
    $const8.2 = const(NoneType, None)        ['$const8.2']
    $const10.3 = const(NoneType, None)       ['$const10.3']
    $12build_slice.4 = global(slice: <class 'slice'>) ['$12build_slice.4']
    $12build_slice.5 = call $12build_slice.4($const8.2, $const10.3, func=$12build_slice.4, args=(Var($const8.2, graphs.py:124), Var($const10.3, graphs.py:124)), kws=(), vararg=None, varkwarg=None, target=None) ['$12build_slice.4', '$12build_slice.5', '$const10.3', '$const8.2']
    $14build_tuple.6 = build_tuple(items=[Var(symbol, graphs.py:121), Var($12build_slice.5, graphs.py:124)]) ['$12build_slice.5', '$14build_tuple.6', 'symbol']
    $16binary_subscr.7 = getitem(value=hypervectors, index=$14build_tuple.6, fn=<built-in function getitem>) ['$14build_tuple.6', '$16binary_subscr.7', 'hypervectors']
    $20get_iter.8 = getiter(value=$16binary_subscr.7) ['$16binary_subscr.7', '$20get_iter.8']
    $phi22.0 = $20get_iter.8                 ['$20get_iter.8', '$phi22.0']
    jump 22                                  []
label 22:
    $22for_iter.1 = iternext(value=$phi22.0) ['$22for_iter.1', '$phi22.0']
    $22for_iter.2 = pair_first(value=$22for_iter.1) ['$22for_iter.1', '$22for_iter.2']
    $22for_iter.3 = pair_second(value=$22for_iter.1) ['$22for_iter.1', '$22for_iter.3']
    $phi26.1 = $22for_iter.2                 ['$22for_iter.2', '$phi26.1']
    branch $22for_iter.3, 26, 168            ['$22for_iter.3']
label 26:
    k = $phi26.1                             ['$phi26.1', 'k']
    $const30.3 = const(int, 32)              ['$const30.3']
    chunk = k // $const30.3                  ['$const30.3', 'chunk', 'k']
    $const40.6 = const(int, 32)              ['$const40.6']
    pos = k % $const40.6                     ['$const40.6', 'k', 'pos']
    $binop_add54.11 = graph_index + node     ['$binop_add54.11', 'graph_index', 'node']
    $60build_tuple.13 = build_tuple(items=[Var($binop_add54.11, graphs.py:128), Var(chunk, graphs.py:125)]) ['$60build_tuple.13', '$binop_add54.11', 'chunk']
    $66binary_subscr.14 = getitem(value=X, index=$60build_tuple.13, fn=<built-in function getitem>) ['$60build_tuple.13', '$66binary_subscr.14', 'X']
    $const70.15 = const(int, 1)              ['$const70.15']
    $binop_lshift74.17 = $const70.15 << pos  ['$binop_lshift74.17', '$const70.15', 'pos']
    $binop_ior78.18 = inplace_binop(fn=<built-in function ior>, immutable_fn=<built-in function or_>, lhs=$66binary_subscr.14, rhs=$binop_lshift74.17, static_lhs=Undefined, static_rhs=Undefined) ['$66binary_subscr.14', '$binop_ior78.18', '$binop_lshift74.17']
    X[$60build_tuple.13] = $binop_ior78.18   ['$60build_tuple.13', '$binop_ior78.18', 'X']
    $binop_add94.21 = k + hypervector_size   ['$binop_add94.21', 'hypervector_size', 'k']
    $const98.22 = const(int, 32)             ['$const98.22']
    chunk = $binop_add94.21 // $const98.22   ['$binop_add94.21', '$const98.22', 'chunk']
    $binop_add110.26 = k + hypervector_size  ['$binop_add110.26', 'hypervector_size', 'k']
    $const114.27 = const(int, 32)            ['$const114.27']
    pos = $binop_add110.26 % $const114.27    ['$binop_add110.26', '$const114.27', 'pos']
    $binop_add128.32 = graph_index + node    ['$binop_add128.32', 'graph_index', 'node']
    $134build_tuple.34 = build_tuple(items=[Var($binop_add128.32, graphs.py:132), Var(chunk, graphs.py:125)]) ['$134build_tuple.34', '$binop_add128.32', 'chunk']
    $140binary_subscr.35 = getitem(value=X, index=$134build_tuple.34, fn=<built-in function getitem>) ['$134build_tuple.34', '$140binary_subscr.35', 'X']
    $const144.36 = const(int, 1)             ['$const144.36']
    $binop_lshift148.38 = $const144.36 << pos ['$binop_lshift148.38', '$const144.36', 'pos']
    $152unary_invert.39 = unary(fn=<built-in function invert>, value=$binop_lshift148.38) ['$152unary_invert.39', '$binop_lshift148.38']
    $binop_iand154.40 = inplace_binop(fn=<built-in function iand>, immutable_fn=<built-in function and_>, lhs=$140binary_subscr.35, rhs=$152unary_invert.39, static_lhs=Undefined, static_rhs=Undefined) ['$140binary_subscr.35', '$152unary_invert.39', '$binop_iand154.40']
    X[$134build_tuple.34] = $binop_iand154.40 ['$134build_tuple.34', '$binop_iand154.40', 'X']
    jump 22                                  []
label 168:
    $const170.2 = const(NoneType, None)      ['$const170.2']
    $170return_const.3 = cast(value=$const170.2) ['$170return_const.3', '$const170.2']
    return $170return_const.3                ['$170return_const.3']

==== SSA block analysis pass on 0
Running <numba.core.ssa._GatherDefsHandler object at 0x7f8e1691d190>
on stmt: hypervectors = arg(0, name=hypervectors)
on stmt: hypervector_size = arg(1, name=hypervector_size)
on stmt: graph_index = arg(2, name=graph_index)
on stmt: node = arg(3, name=node)
on stmt: symbol = arg(4, name=symbol)
on stmt: X = arg(5, name=X)
on stmt: $const8.2 = const(NoneType, None)
on stmt: $const10.3 = const(NoneType, None)
on stmt: $12build_slice.4 = global(slice: <class 'slice'>)
on stmt: $12build_slice.5 = call $12build_slice.4($const8.2, $const10.3, func=$12build_slice.4, args=(Var($const8.2, graphs.py:124), Var($const10.3, graphs.py:124)), kws=(), vararg=None, varkwarg=None, target=None)
on stmt: $14build_tuple.6 = build_tuple(items=[Var(symbol, graphs.py:121), Var($12build_slice.5, graphs.py:124)])
on stmt: $16binary_subscr.7 = getitem(value=hypervectors, index=$14build_tuple.6, fn=<built-in function getitem>)
on stmt: $20get_iter.8 = getiter(value=$16binary_subscr.7)
on stmt: $phi22.0 = $20get_iter.8
on stmt: jump 22
==== SSA block analysis pass on 22
Running <numba.core.ssa._GatherDefsHandler object at 0x7f8e1691d190>
on stmt: $22for_iter.1 = iternext(value=$phi22.0)
on stmt: $22for_iter.2 = pair_first(value=$22for_iter.1)
on stmt: $22for_iter.3 = pair_second(value=$22for_iter.1)
on stmt: $phi26.1 = $22for_iter.2
on stmt: branch $22for_iter.3, 26, 168
==== SSA block analysis pass on 26
Running <numba.core.ssa._GatherDefsHandler object at 0x7f8e1691d190>
on stmt: k = $phi26.1
on stmt: $const30.3 = const(int, 32)
on stmt: chunk = k // $const30.3
on stmt: $const40.6 = const(int, 32)
on stmt: pos = k % $const40.6
on stmt: $binop_add54.11 = graph_index + node
on stmt: $60build_tuple.13 = build_tuple(items=[Var($binop_add54.11, graphs.py:128), Var(chunk, graphs.py:125)])
on stmt: $66binary_subscr.14 = getitem(value=X, index=$60build_tuple.13, fn=<built-in function getitem>)
on stmt: $const70.15 = const(int, 1)
on stmt: $binop_lshift74.17 = $const70.15 << pos
on stmt: $binop_ior78.18 = inplace_binop(fn=<built-in function ior>, immutable_fn=<built-in function or_>, lhs=$66binary_subscr.14, rhs=$binop_lshift74.17, static_lhs=Undefined, static_rhs=Undefined)
on stmt: X[$60build_tuple.13] = $binop_ior78.18
on stmt: $binop_add94.21 = k + hypervector_size
on stmt: $const98.22 = const(int, 32)
on stmt: chunk = $binop_add94.21 // $const98.22
on stmt: $binop_add110.26 = k + hypervector_size
on stmt: $const114.27 = const(int, 32)
on stmt: pos = $binop_add110.26 % $const114.27
on stmt: $binop_add128.32 = graph_index + node
on stmt: $134build_tuple.34 = build_tuple(items=[Var($binop_add128.32, graphs.py:132), Var(chunk, graphs.py:125)])
on stmt: $140binary_subscr.35 = getitem(value=X, index=$134build_tuple.34, fn=<built-in function getitem>)
on stmt: $const144.36 = const(int, 1)
on stmt: $binop_lshift148.38 = $const144.36 << pos
on stmt: $152unary_invert.39 = unary(fn=<built-in function invert>, value=$binop_lshift148.38)
on stmt: $binop_iand154.40 = inplace_binop(fn=<built-in function iand>, immutable_fn=<built-in function and_>, lhs=$140binary_subscr.35, rhs=$152unary_invert.39, static_lhs=Undefined, static_rhs=Undefined)
on stmt: X[$134build_tuple.34] = $binop_iand154.40
on stmt: jump 22
==== SSA block analysis pass on 168
Running <numba.core.ssa._GatherDefsHandler object at 0x7f8e1691d190>
on stmt: $const170.2 = const(NoneType, None)
on stmt: $170return_const.3 = cast(value=$const170.2)
on stmt: return $170return_const.3
defs defaultdict(<class 'list'>,
            {'$12build_slice.4': [(<numba.core.ir.Assign object at 0x7f8e1691dd30>,
                                   0)],
             '$12build_slice.5': [(<numba.core.ir.Assign object at 0x7f8e1691de20>,
                                   0)],
             '$134build_tuple.34': [(<numba.core.ir.Assign object at 0x7f8e167c90a0>,
                                     26)],
             '$140binary_subscr.35': [(<numba.core.ir.Assign object at 0x7f8e167c9220>,
                                       26)],
             '$14build_tuple.6': [(<numba.core.ir.Assign object at 0x7f8e1691df40>,
                                   0)],
             '$152unary_invert.39': [(<numba.core.ir.Assign object at 0x7f8e167c96a0>,
                                      26)],
             '$16binary_subscr.7': [(<numba.core.ir.Assign object at 0x7f8e1691e090>,
                                     0)],
             '$170return_const.3': [(<numba.core.ir.Assign object at 0x7f8e1691f5f0>,
                                     168)],
             '$20get_iter.8': [(<numba.core.ir.Assign object at 0x7f8e1691e1b0>,
                                0)],
             '$22for_iter.1': [(<numba.core.ir.Assign object at 0x7f8e1691e3c0>,
                                22)],
             '$22for_iter.2': [(<numba.core.ir.Assign object at 0x7f8e1691e4e0>,
                                22)],
             '$22for_iter.3': [(<numba.core.ir.Assign object at 0x7f8e1691e600>,
                                22)],
             '$60build_tuple.13': [(<numba.core.ir.Assign object at 0x7f8e1691f740>,
                                    26)],
             '$66binary_subscr.14': [(<numba.core.ir.Assign object at 0x7f8e1691f8c0>,
                                      26)],
             '$binop_add110.26': [(<numba.core.ir.Assign object at 0x7f8e167c8770>,
                                   26)],
             '$binop_add128.32': [(<numba.core.ir.Assign object at 0x7f8e167c8e90>,
                                   26)],
             '$binop_add54.11': [(<numba.core.ir.Assign object at 0x7f8e1691f530>,
                                  26)],
             '$binop_add94.21': [(<numba.core.ir.Assign object at 0x7f8e167c8140>,
                                  26)],
             '$binop_iand154.40': [(<numba.core.ir.Assign object at 0x7f8e167c9820>,
                                    26)],
             '$binop_ior78.18': [(<numba.core.ir.Assign object at 0x7f8e1691fd70>,
                                  26)],
             '$binop_lshift148.38': [(<numba.core.ir.Assign object at 0x7f8e167c9580>,
                                      26)],
             '$binop_lshift74.17': [(<numba.core.ir.Assign object at 0x7f8e1691fc20>,
                                     26)],
             '$const10.3': [(<numba.core.ir.Assign object at 0x7f8e1691dc10>,
                             0)],
             '$const114.27': [(<numba.core.ir.Assign object at 0x7f8e167c8860>,
                               26)],
             '$const144.36': [(<numba.core.ir.Assign object at 0x7f8e167c9310>,
                               26)],
             '$const170.2': [(<numba.core.ir.Assign object at 0x7f8e1691f1d0>,
                              168)],
             '$const30.3': [(<numba.core.ir.Assign object at 0x7f8e1691ea50>,
                             26)],
             '$const40.6': [(<numba.core.ir.Assign object at 0x7f8e1691eea0>,
                             26)],
             '$const70.15': [(<numba.core.ir.Assign object at 0x7f8e1691f9b0>,
                              26)],
             '$const8.2': [(<numba.core.ir.Assign object at 0x7f8e1691daf0>,
                            0)],
             '$const98.22': [(<numba.core.ir.Assign object at 0x7f8e167c8230>,
                              26)],
             '$phi22.0': [(<numba.core.ir.Assign object at 0x7f8e1691d9d0>, 0)],
             '$phi26.1': [(<numba.core.ir.Assign object at 0x7f8e1691e690>,
                           22)],
             'X': [(<numba.core.ir.Assign object at 0x7f8e1691d7c0>, 0)],
             'chunk': [(<numba.core.ir.Assign object at 0x7f8e1691ebd0>, 26),
                       (<numba.core.ir.Assign object at 0x7f8e167c83b0>, 26)],
             'graph_index': [(<numba.core.ir.Assign object at 0x7f8e1691d4f0>,
                              0)],
             'hypervector_size': [(<numba.core.ir.Assign object at 0x7f8e1691d310>,
                                   0)],
             'hypervectors': [(<numba.core.ir.Assign object at 0x7f8e1691d0a0>,
                               0)],
             'k': [(<numba.core.ir.Assign object at 0x7f8e1691e840>, 26)],
             'node': [(<numba.core.ir.Assign object at 0x7f8e1691d5e0>, 0)],
             'pos': [(<numba.core.ir.Assign object at 0x7f8e1691f020>, 26),
                     (<numba.core.ir.Assign object at 0x7f8e167c89e0>, 26)],
             'symbol': [(<numba.core.ir.Assign object at 0x7f8e1691d6d0>, 0)]})
SSA violators <numba.core.utils.OrderedSet object at 0x7f8e1691d190>
Fix SSA violator on var chunk
==== SSA block rewrite pass on 0
Running <numba.core.ssa._FreshVarHandler object at 0x7f8e1691ecc0>
on stmt: hypervectors = arg(0, name=hypervectors)
on stmt: hypervector_size = arg(1, name=hypervector_size)
on stmt: graph_index = arg(2, name=graph_index)
on stmt: node = arg(3, name=node)
on stmt: symbol = arg(4, name=symbol)
on stmt: X = arg(5, name=X)
on stmt: $const8.2 = const(NoneType, None)
on stmt: $const10.3 = const(NoneType, None)
on stmt: $12build_slice.4 = global(slice: <class 'slice'>)
on stmt: $12build_slice.5 = call $12build_slice.4($const8.2, $const10.3, func=$12build_slice.4, args=(Var($const8.2, graphs.py:124), Var($const10.3, graphs.py:124)), kws=(), vararg=None, varkwarg=None, target=None)
on stmt: $14build_tuple.6 = build_tuple(items=[Var(symbol, graphs.py:121), Var($12build_slice.5, graphs.py:124)])
on stmt: $16binary_subscr.7 = getitem(value=hypervectors, index=$14build_tuple.6, fn=<built-in function getitem>)
on stmt: $20get_iter.8 = getiter(value=$16binary_subscr.7)
on stmt: $phi22.0 = $20get_iter.8
on stmt: jump 22
==== SSA block rewrite pass on 22
Running <numba.core.ssa._FreshVarHandler object at 0x7f8e1691ecc0>
on stmt: $22for_iter.1 = iternext(value=$phi22.0)
on stmt: $22for_iter.2 = pair_first(value=$22for_iter.1)
on stmt: $22for_iter.3 = pair_second(value=$22for_iter.1)
on stmt: $phi26.1 = $22for_iter.2
on stmt: branch $22for_iter.3, 26, 168
==== SSA block rewrite pass on 26
Running <numba.core.ssa._FreshVarHandler object at 0x7f8e1691ecc0>
on stmt: k = $phi26.1
on stmt: $const30.3 = const(int, 32)
on stmt: chunk = k // $const30.3
first assign: chunk
replaced with: chunk = k // $const30.3
on stmt: $const40.6 = const(int, 32)
on stmt: pos = k % $const40.6
on stmt: $binop_add54.11 = graph_index + node
on stmt: $60build_tuple.13 = build_tuple(items=[Var($binop_add54.11, graphs.py:128), Var(chunk, graphs.py:125)])
on stmt: $66binary_subscr.14 = getitem(value=X, index=$60build_tuple.13, fn=<built-in function getitem>)
on stmt: $const70.15 = const(int, 1)
on stmt: $binop_lshift74.17 = $const70.15 << pos
on stmt: $binop_ior78.18 = inplace_binop(fn=<built-in function ior>, immutable_fn=<built-in function or_>, lhs=$66binary_subscr.14, rhs=$binop_lshift74.17, static_lhs=Undefined, static_rhs=Undefined)
on stmt: X[$60build_tuple.13] = $binop_ior78.18
on stmt: $binop_add94.21 = k + hypervector_size
on stmt: $const98.22 = const(int, 32)
on stmt: chunk = $binop_add94.21 // $const98.22
replaced with: chunk.1 = $binop_add94.21 // $const98.22
on stmt: $binop_add110.26 = k + hypervector_size
on stmt: $const114.27 = const(int, 32)
on stmt: pos = $binop_add110.26 % $const114.27
on stmt: $binop_add128.32 = graph_index + node
on stmt: $134build_tuple.34 = build_tuple(items=[Var($binop_add128.32, graphs.py:132), Var(chunk, graphs.py:125)])
on stmt: $140binary_subscr.35 = getitem(value=X, index=$134build_tuple.34, fn=<built-in function getitem>)
on stmt: $const144.36 = const(int, 1)
on stmt: $binop_lshift148.38 = $const144.36 << pos
on stmt: $152unary_invert.39 = unary(fn=<built-in function invert>, value=$binop_lshift148.38)
on stmt: $binop_iand154.40 = inplace_binop(fn=<built-in function iand>, immutable_fn=<built-in function and_>, lhs=$140binary_subscr.35, rhs=$152unary_invert.39, static_lhs=Undefined, static_rhs=Undefined)
on stmt: X[$134build_tuple.34] = $binop_iand154.40
on stmt: jump 22
==== SSA block rewrite pass on 168
Running <numba.core.ssa._FreshVarHandler object at 0x7f8e1691ecc0>
on stmt: $const170.2 = const(NoneType, None)
on stmt: $170return_const.3 = cast(value=$const170.2)
on stmt: return $170return_const.3
Replaced assignments: defaultdict(<class 'list'>,
            {26: [<numba.core.ir.Assign object at 0x7f8e1691cdd0>,
                  <numba.core.ir.Assign object at 0x7f8e1691cb00>]})
==== SSA block rewrite pass on 0
Running <numba.core.ssa._FixSSAVars object at 0x7f8e1691ecc0>
on stmt: hypervectors = arg(0, name=hypervectors)
on stmt: hypervector_size = arg(1, name=hypervector_size)
on stmt: graph_index = arg(2, name=graph_index)
on stmt: node = arg(3, name=node)
on stmt: symbol = arg(4, name=symbol)
on stmt: X = arg(5, name=X)
on stmt: $const8.2 = const(NoneType, None)
on stmt: $const10.3 = const(NoneType, None)
on stmt: $12build_slice.4 = global(slice: <class 'slice'>)
on stmt: $12build_slice.5 = call $12build_slice.4($const8.2, $const10.3, func=$12build_slice.4, args=(Var($const8.2, graphs.py:124), Var($const10.3, graphs.py:124)), kws=(), vararg=None, varkwarg=None, target=None)
on stmt: $14build_tuple.6 = build_tuple(items=[Var(symbol, graphs.py:121), Var($12build_slice.5, graphs.py:124)])
on stmt: $16binary_subscr.7 = getitem(value=hypervectors, index=$14build_tuple.6, fn=<built-in function getitem>)
on stmt: $20get_iter.8 = getiter(value=$16binary_subscr.7)
on stmt: $phi22.0 = $20get_iter.8
on stmt: jump 22
==== SSA block rewrite pass on 22
Running <numba.core.ssa._FixSSAVars object at 0x7f8e1691ecc0>
on stmt: $22for_iter.1 = iternext(value=$phi22.0)
on stmt: $22for_iter.2 = pair_first(value=$22for_iter.1)
on stmt: $22for_iter.3 = pair_second(value=$22for_iter.1)
on stmt: $phi26.1 = $22for_iter.2
on stmt: branch $22for_iter.3, 26, 168
==== SSA block rewrite pass on 26
Running <numba.core.ssa._FixSSAVars object at 0x7f8e1691ecc0>
on stmt: k = $phi26.1
on stmt: $const30.3 = const(int, 32)
on stmt: chunk = k // $const30.3
on stmt: $const40.6 = const(int, 32)
on stmt: pos = k % $const40.6
on stmt: $binop_add54.11 = graph_index + node
on stmt: $60build_tuple.13 = build_tuple(items=[Var($binop_add54.11, graphs.py:128), Var(chunk, graphs.py:125)])
find_def var='chunk' stmt=$60build_tuple.13 = build_tuple(items=[Var($binop_add54.11, graphs.py:128), Var(chunk, graphs.py:125)])
on stmt: $66binary_subscr.14 = getitem(value=X, index=$60build_tuple.13, fn=<built-in function getitem>)
on stmt: $const70.15 = const(int, 1)
on stmt: $binop_lshift74.17 = $const70.15 << pos
on stmt: $binop_ior78.18 = inplace_binop(fn=<built-in function ior>, immutable_fn=<built-in function or_>, lhs=$66binary_subscr.14, rhs=$binop_lshift74.17, static_lhs=Undefined, static_rhs=Undefined)
on stmt: X[$60build_tuple.13] = $binop_ior78.18
on stmt: $binop_add94.21 = k + hypervector_size
on stmt: $const98.22 = const(int, 32)
on stmt: chunk.1 = $binop_add94.21 // $const98.22
on stmt: $binop_add110.26 = k + hypervector_size
on stmt: $const114.27 = const(int, 32)
on stmt: pos = $binop_add110.26 % $const114.27
on stmt: $binop_add128.32 = graph_index + node
on stmt: $134build_tuple.34 = build_tuple(items=[Var($binop_add128.32, graphs.py:132), Var(chunk, graphs.py:125)])
find_def var='chunk' stmt=$134build_tuple.34 = build_tuple(items=[Var($binop_add128.32, graphs.py:132), Var(chunk, graphs.py:125)])
replaced with: $134build_tuple.34 = build_tuple(items=[Var($binop_add128.32, graphs.py:132), Var(chunk.1, graphs.py:130)])
on stmt: $140binary_subscr.35 = getitem(value=X, index=$134build_tuple.34, fn=<built-in function getitem>)
on stmt: $const144.36 = const(int, 1)
on stmt: $binop_lshift148.38 = $const144.36 << pos
on stmt: $152unary_invert.39 = unary(fn=<built-in function invert>, value=$binop_lshift148.38)
on stmt: $binop_iand154.40 = inplace_binop(fn=<built-in function iand>, immutable_fn=<built-in function and_>, lhs=$140binary_subscr.35, rhs=$152unary_invert.39, static_lhs=Undefined, static_rhs=Undefined)
on stmt: X[$134build_tuple.34] = $binop_iand154.40
on stmt: jump 22
==== SSA block rewrite pass on 168
Running <numba.core.ssa._FixSSAVars object at 0x7f8e1691ecc0>
on stmt: $const170.2 = const(NoneType, None)
on stmt: $170return_const.3 = cast(value=$const170.2)
on stmt: return $170return_const.3
Fix SSA violator on var pos
==== SSA block rewrite pass on 0
Running <numba.core.ssa._FreshVarHandler object at 0x7f8e16a47d10>
on stmt: hypervectors = arg(0, name=hypervectors)
on stmt: hypervector_size = arg(1, name=hypervector_size)
on stmt: graph_index = arg(2, name=graph_index)
on stmt: node = arg(3, name=node)
on stmt: symbol = arg(4, name=symbol)
on stmt: X = arg(5, name=X)
on stmt: $const8.2 = const(NoneType, None)
on stmt: $const10.3 = const(NoneType, None)
on stmt: $12build_slice.4 = global(slice: <class 'slice'>)
on stmt: $12build_slice.5 = call $12build_slice.4($const8.2, $const10.3, func=$12build_slice.4, args=(Var($const8.2, graphs.py:124), Var($const10.3, graphs.py:124)), kws=(), vararg=None, varkwarg=None, target=None)
on stmt: $14build_tuple.6 = build_tuple(items=[Var(symbol, graphs.py:121), Var($12build_slice.5, graphs.py:124)])
on stmt: $16binary_subscr.7 = getitem(value=hypervectors, index=$14build_tuple.6, fn=<built-in function getitem>)
on stmt: $20get_iter.8 = getiter(value=$16binary_subscr.7)
on stmt: $phi22.0 = $20get_iter.8
on stmt: jump 22
==== SSA block rewrite pass on 22
Running <numba.core.ssa._FreshVarHandler object at 0x7f8e16a47d10>
on stmt: $22for_iter.1 = iternext(value=$phi22.0)
on stmt: $22for_iter.2 = pair_first(value=$22for_iter.1)
on stmt: $22for_iter.3 = pair_second(value=$22for_iter.1)
on stmt: $phi26.1 = $22for_iter.2
on stmt: branch $22for_iter.3, 26, 168
==== SSA block rewrite pass on 26
Running <numba.core.ssa._FreshVarHandler object at 0x7f8e16a47d10>
on stmt: k = $phi26.1
on stmt: $const30.3 = const(int, 32)
on stmt: chunk = k // $const30.3
on stmt: $const40.6 = const(int, 32)
on stmt: pos = k % $const40.6
first assign: pos
replaced with: pos = k % $const40.6
on stmt: $binop_add54.11 = graph_index + node
on stmt: $60build_tuple.13 = build_tuple(items=[Var($binop_add54.11, graphs.py:128), Var(chunk, graphs.py:125)])
on stmt: $66binary_subscr.14 = getitem(value=X, index=$60build_tuple.13, fn=<built-in function getitem>)
on stmt: $const70.15 = const(int, 1)
on stmt: $binop_lshift74.17 = $const70.15 << pos
on stmt: $binop_ior78.18 = inplace_binop(fn=<built-in function ior>, immutable_fn=<built-in function or_>, lhs=$66binary_subscr.14, rhs=$binop_lshift74.17, static_lhs=Undefined, static_rhs=Undefined)
on stmt: X[$60build_tuple.13] = $binop_ior78.18
on stmt: $binop_add94.21 = k + hypervector_size
on stmt: $const98.22 = const(int, 32)
on stmt: chunk.1 = $binop_add94.21 // $const98.22
on stmt: $binop_add110.26 = k + hypervector_size
on stmt: $const114.27 = const(int, 32)
on stmt: pos = $binop_add110.26 % $const114.27
replaced with: pos.1 = $binop_add110.26 % $const114.27
on stmt: $binop_add128.32 = graph_index + node
on stmt: $134build_tuple.34 = build_tuple(items=[Var($binop_add128.32, graphs.py:132), Var(chunk.1, graphs.py:130)])
on stmt: $140binary_subscr.35 = getitem(value=X, index=$134build_tuple.34, fn=<built-in function getitem>)
on stmt: $const144.36 = const(int, 1)
on stmt: $binop_lshift148.38 = $const144.36 << pos
on stmt: $152unary_invert.39 = unary(fn=<built-in function invert>, value=$binop_lshift148.38)
on stmt: $binop_iand154.40 = inplace_binop(fn=<built-in function iand>, immutable_fn=<built-in function and_>, lhs=$140binary_subscr.35, rhs=$152unary_invert.39, static_lhs=Undefined, static_rhs=Undefined)
on stmt: X[$134build_tuple.34] = $binop_iand154.40
on stmt: jump 22
==== SSA block rewrite pass on 168
Running <numba.core.ssa._FreshVarHandler object at 0x7f8e16a47d10>
on stmt: $const170.2 = const(NoneType, None)
on stmt: $170return_const.3 = cast(value=$const170.2)
on stmt: return $170return_const.3
Replaced assignments: defaultdict(<class 'list'>,
            {26: [<numba.core.ir.Assign object at 0x7f8e1691cbc0>,
                  <numba.core.ir.Assign object at 0x7f8e16ba1790>]})
==== SSA block rewrite pass on 0
Running <numba.core.ssa._FixSSAVars object at 0x7f8e16ba19a0>
on stmt: hypervectors = arg(0, name=hypervectors)
on stmt: hypervector_size = arg(1, name=hypervector_size)
on stmt: graph_index = arg(2, name=graph_index)
on stmt: node = arg(3, name=node)
on stmt: symbol = arg(4, name=symbol)
on stmt: X = arg(5, name=X)
on stmt: $const8.2 = const(NoneType, None)
on stmt: $const10.3 = const(NoneType, None)
on stmt: $12build_slice.4 = global(slice: <class 'slice'>)
on stmt: $12build_slice.5 = call $12build_slice.4($const8.2, $const10.3, func=$12build_slice.4, args=(Var($const8.2, graphs.py:124), Var($const10.3, graphs.py:124)), kws=(), vararg=None, varkwarg=None, target=None)
on stmt: $14build_tuple.6 = build_tuple(items=[Var(symbol, graphs.py:121), Var($12build_slice.5, graphs.py:124)])
on stmt: $16binary_subscr.7 = getitem(value=hypervectors, index=$14build_tuple.6, fn=<built-in function getitem>)
on stmt: $20get_iter.8 = getiter(value=$16binary_subscr.7)
on stmt: $phi22.0 = $20get_iter.8
on stmt: jump 22
==== SSA block rewrite pass on 22
Running <numba.core.ssa._FixSSAVars object at 0x7f8e16ba19a0>
on stmt: $22for_iter.1 = iternext(value=$phi22.0)
on stmt: $22for_iter.2 = pair_first(value=$22for_iter.1)
on stmt: $22for_iter.3 = pair_second(value=$22for_iter.1)
on stmt: $phi26.1 = $22for_iter.2
on stmt: branch $22for_iter.3, 26, 168
==== SSA block rewrite pass on 26
Running <numba.core.ssa._FixSSAVars object at 0x7f8e16ba19a0>
on stmt: k = $phi26.1
on stmt: $const30.3 = const(int, 32)
on stmt: chunk = k // $const30.3
on stmt: $const40.6 = const(int, 32)
on stmt: pos = k % $const40.6
on stmt: $binop_add54.11 = graph_index + node
on stmt: $60build_tuple.13 = build_tuple(items=[Var($binop_add54.11, graphs.py:128), Var(chunk, graphs.py:125)])
on stmt: $66binary_subscr.14 = getitem(value=X, index=$60build_tuple.13, fn=<built-in function getitem>)
on stmt: $const70.15 = const(int, 1)
on stmt: $binop_lshift74.17 = $const70.15 << pos
find_def var='pos' stmt=$binop_lshift74.17 = $const70.15 << pos
on stmt: $binop_ior78.18 = inplace_binop(fn=<built-in function ior>, immutable_fn=<built-in function or_>, lhs=$66binary_subscr.14, rhs=$binop_lshift74.17, static_lhs=Undefined, static_rhs=Undefined)
on stmt: X[$60build_tuple.13] = $binop_ior78.18
on stmt: $binop_add94.21 = k + hypervector_size
on stmt: $const98.22 = const(int, 32)
on stmt: chunk.1 = $binop_add94.21 // $const98.22
on stmt: $binop_add110.26 = k + hypervector_size
on stmt: $const114.27 = const(int, 32)
on stmt: pos.1 = $binop_add110.26 % $const114.27
on stmt: $binop_add128.32 = graph_index + node
on stmt: $134build_tuple.34 = build_tuple(items=[Var($binop_add128.32, graphs.py:132), Var(chunk.1, graphs.py:130)])
on stmt: $140binary_subscr.35 = getitem(value=X, index=$134build_tuple.34, fn=<built-in function getitem>)
on stmt: $const144.36 = const(int, 1)
on stmt: $binop_lshift148.38 = $const144.36 << pos
find_def var='pos' stmt=$binop_lshift148.38 = $const144.36 << pos
replaced with: $binop_lshift148.38 = $const144.36 << pos.1
on stmt: $152unary_invert.39 = unary(fn=<built-in function invert>, value=$binop_lshift148.38)
on stmt: $binop_iand154.40 = inplace_binop(fn=<built-in function iand>, immutable_fn=<built-in function and_>, lhs=$140binary_subscr.35, rhs=$152unary_invert.39, static_lhs=Undefined, static_rhs=Undefined)
on stmt: X[$134build_tuple.34] = $binop_iand154.40
on stmt: jump 22
==== SSA block rewrite pass on 168
Running <numba.core.ssa._FixSSAVars object at 0x7f8e16ba19a0>
on stmt: $const170.2 = const(NoneType, None)
on stmt: $170return_const.3 = cast(value=$const170.2)
on stmt: return $170return_const.3
Creating test data
Epoch#1 -- Accuracy train: 0.7481111111111111 -- Accuracy test: 0.776 
Epoch#2 -- Accuracy train: 0.8164444444444444 -- Accuracy test: 0.826 
Epoch#3 -- Accuracy train: 0.8427777777777777 -- Accuracy test: 0.853 
Epoch#4 -- Accuracy train: 0.7818888888888889 -- Accuracy test: 0.804 
Epoch#5 -- Accuracy train: 0.7876666666666666 -- Accuracy test: 0.81 
Epoch#6 -- Accuracy train: 0.8206666666666667 -- Accuracy test: 0.833 
Epoch#7 -- Accuracy train: 0.8384444444444444 -- Accuracy test: 0.857 
Epoch#8 -- Accuracy train: 0.782 -- Accuracy test: 0.787 
Epoch#9 -- Accuracy train: 0.8914444444444445 -- Accuracy test: 0.899 
Epoch#10 -- Accuracy train: 0.8082222222222222 -- Accuracy test: 0.828 
Epoch#11 -- Accuracy train: 0.8752222222222222 -- Accuracy test: 0.896 
Epoch#12 -- Accuracy train: 0.8177777777777778 -- Accuracy test: 0.826 
Epoch#13 -- Accuracy train: 0.7937777777777778 -- Accuracy test: 0.815 
Epoch#14 -- Accuracy train: 0.8024444444444444 -- Accuracy test: 0.813 
Epoch#15 -- Accuracy train: 0.7551111111111111 -- Accuracy test: 0.749 
Epoch#16 -- Accuracy train: 0.8241111111111111 -- Accuracy test: 0.819 
Epoch#17 -- Accuracy train: 0.8851111111111111 -- Accuracy test: 0.898 
Epoch#18 -- Accuracy train: 0.7924444444444444 -- Accuracy test: 0.802 
Epoch#19 -- Accuracy train: 0.8744444444444445 -- Accuracy test: 0.876 
Epoch#20 -- Accuracy train: 0.8674444444444445 -- Accuracy test: 0.881 
Epoch#21 -- Accuracy train: 0.8268888888888889 -- Accuracy test: 0.833 
Epoch#22 -- Accuracy train: 0.8912222222222222 -- Accuracy test: 0.894 
Epoch#23 -- Accuracy train: 0.8746666666666667 -- Accuracy test: 0.89 
Epoch#24 -- Accuracy train: 0.8377777777777777 -- Accuracy test: 0.842 
Epoch#25 -- Accuracy train: 0.8278888888888889 -- Accuracy test: 0.843 
Epoch#26 -- Accuracy train: 0.8642222222222222 -- Accuracy test: 0.861 
Epoch#27 -- Accuracy train: 0.8116666666666666 -- Accuracy test: 0.816 
Epoch#28 -- Accuracy train: 0.8521111111111112 -- Accuracy test: 0.855 
Epoch#29 -- Accuracy train: 0.831 -- Accuracy test: 0.854 
Epoch#30 -- Accuracy train: 0.8578888888888889 -- Accuracy test: 0.868 
Epoch#31 -- Accuracy train: 0.8821111111111111 -- Accuracy test: 0.89 
Epoch#32 -- Accuracy train: 0.6652222222222223 -- Accuracy test: 0.67 
Epoch#33 -- Accuracy train: 0.8411111111111111 -- Accuracy test: 0.834 
Epoch#34 -- Accuracy train: 0.8128888888888889 -- Accuracy test: 0.825 
Epoch#35 -- Accuracy train: 0.8578888888888889 -- Accuracy test: 0.874 
Epoch#36 -- Accuracy train: 0.843 -- Accuracy test: 0.848 
Epoch#37 -- Accuracy train: 0.8436666666666667 -- Accuracy test: 0.86 
Epoch#38 -- Accuracy train: 0.7351111111111112 -- Accuracy test: 0.739 
Epoch#39 -- Accuracy train: 0.8088888888888889 -- Accuracy test: 0.84 
Epoch#40 -- Accuracy train: 0.617 -- Accuracy test: 0.609 
Epoch#41 -- Accuracy train: 0.8956666666666667 -- Accuracy test: 0.903 
Epoch#42 -- Accuracy train: 0.8708888888888889 -- Accuracy test: 0.879 
Epoch#43 -- Accuracy train: 0.8137777777777778 -- Accuracy test: 0.841 
Epoch#44 -- Accuracy train: 0.7763333333333333 -- Accuracy test: 0.79 
Epoch#45 -- Accuracy train: 0.896 -- Accuracy test: 0.915 
Epoch#46 -- Accuracy train: 0.7686666666666667 -- Accuracy test: 0.792 
Epoch#47 -- Accuracy train: 0.7455555555555555 -- Accuracy test: 0.769 
Epoch#48 -- Accuracy train: 0.7905555555555556 -- Accuracy test: 0.821 
Epoch#49 -- Accuracy train: 0.8486666666666667 -- Accuracy test: 0.862 
Epoch#50 -- Accuracy train: 0.8063333333333333 -- Accuracy test: 0.829 
Time: 1591.2130999565125
Clause #0 W:(7 1) NOT x841
Number of literals: 1
Clause #1 W:(-5 28) NOT x235 AND NOT x274 AND NOT x782
Number of literals: 3
Clause #2 W:(-20 -27) NOT x659 AND NOT x933 AND NOT x992
Number of literals: 3
Clause #3 W:(-16 6) 
Number of literals: 0
Clause #4 W:(-1 -1) NOT x177
Number of literals: 1
Clause #5 W:(26 -43) NOT x128 AND NOT x169 AND NOT x680 AND NOT x715 AND NOT x793
Number of literals: 5
Clause #6 W:(-29 2) NOT x521
Number of literals: 1
Clause #7 W:(0 -5) NOT x150 AND NOT x620 AND NOT x983
Number of literals: 3
Clause #8 W:(24 25) NOT x274
Number of literals: 1
Clause #9 W:(-24 -3) NOT x429 AND NOT x831
Number of literals: 2
Clause #10 W:(0 -20) 
Number of literals: 0
Clause #11 W:(-11 0) NOT x286 AND NOT x729
Number of literals: 2
Clause #12 W:(3 15) NOT x23 AND NOT x325 AND NOT x938
Number of literals: 3
Clause #13 W:(5 14) NOT x720 AND NOT x893 AND NOT x1001
Number of literals: 3
Clause #14 W:(12 15) x324 AND NOT x201 AND NOT x1016
Number of literals: 3
Clause #15 W:(-8 -1) NOT x347
Number of literals: 1
Clause #16 W:(10 17) NOT x305 AND NOT x592
Number of literals: 2
Clause #17 W:(14 19) NOT x364 AND NOT x477
Number of literals: 2
Clause #18 W:(-1 5) 
Number of literals: 0
Clause #19 W:(12 30) NOT x375 AND NOT x894
Number of literals: 2
Clause #20 W:(18 -36) 
Number of literals: 0
Clause #21 W:(-41 14) NOT x18 AND NOT x282 AND NOT x627
Number of literals: 3
Clause #22 W:(-5 20) NOT x417
Number of literals: 1
Clause #23 W:(0 16) NOT x779
Number of literals: 1
Clause #24 W:(-7 -20) NOT x870
Number of literals: 1
Clause #25 W:(-7 15) 
Number of literals: 0
Clause #26 W:(4 9) NOT x135 AND NOT x777 AND NOT x1003
Number of literals: 3
Clause #27 W:(-3 -11) NOT x190 AND NOT x516
Number of literals: 2
Clause #28 W:(11 -10) 
Number of literals: 0
Clause #29 W:(-16 -7) NOT x93 AND NOT x197 AND NOT x624 AND NOT x698
Number of literals: 4
Clause #30 W:(31 -4) 
Number of literals: 0
Clause #31 W:(-7 -16) NOT x413 AND NOT x509
Number of literals: 2
Clause #32 W:(-32 1) NOT x244
Number of literals: 1
Clause #33 W:(7 13) 
Number of literals: 0
Clause #34 W:(-7 5) 
Number of literals: 0
Clause #35 W:(-6 59) NOT x868
Number of literals: 1
Clause #36 W:(34 0) NOT x315 AND NOT x374 AND NOT x688 AND NOT x1004
Number of literals: 4
Clause #37 W:(-5 -11) NOT x264 AND NOT x310 AND NOT x981
Number of literals: 3
Clause #38 W:(20 17) NOT x546 AND NOT x575 AND NOT x705 AND NOT x706
Number of literals: 4
Clause #39 W:(-5 8) NOT x263
Number of literals: 1
Clause #40 W:(15 9) NOT x237 AND NOT x358
Number of literals: 2
Clause #41 W:(-18 -4) NOT x9 AND NOT x718 AND NOT x958
Number of literals: 3
Clause #42 W:(-34 3) NOT x589
Number of literals: 1
Clause #43 W:(-11 6) 
Number of literals: 0
Clause #44 W:(-9 -3) NOT x225 AND NOT x300 AND NOT x493 AND NOT x694
Number of literals: 4
Clause #45 W:(-7 3) 
Number of literals: 0
Clause #46 W:(6 18) NOT x107 AND NOT x116 AND NOT x821 AND NOT x945
Number of literals: 4
Clause #47 W:(23 8) NOT x317
Number of literals: 1
Clause #48 W:(-10 -19) 
Number of literals: 0
Clause #49 W:(-6 35) NOT x69 AND NOT x191
Number of literals: 2
Clause #50 W:(-13 -38) NOT x139 AND NOT x275 AND NOT x341
Number of literals: 3
Clause #51 W:(-11 -13) NOT x402 AND NOT x916
Number of literals: 2
Clause #52 W:(-34 -1) NOT x177 AND NOT x935
Number of literals: 2
Clause #53 W:(3 31) 
Number of literals: 0
Clause #54 W:(-26 -6) NOT x892
Number of literals: 1
Clause #55 W:(15 12) x45 AND NOT x167 AND NOT x439 AND NOT x485 AND NOT x744 AND NOT x794 AND NOT x795
Number of literals: 7
Clause #56 W:(-39 -3) NOT x122 AND NOT x760
Number of literals: 2
Clause #57 W:(-12 -8) x471 AND NOT x674 AND NOT x892
Number of literals: 3
Clause #58 W:(-1 27) NOT x379
Number of literals: 1
Clause #59 W:(-5 1) NOT x854
Number of literals: 1
Clause #60 W:(-7 -23) 
Number of literals: 0
Clause #61 W:(-9 0) 
Number of literals: 0
Clause #62 W:(-38 -6) 
Number of literals: 0
Clause #63 W:(-14 -3) NOT x338
Number of literals: 1
Clause #64 W:(1 5) NOT x867
Number of literals: 1
Clause #65 W:(1 3) x872 AND x892 AND NOT x72 AND NOT x975
Number of literals: 4
Clause #66 W:(27 25) 
Number of literals: 0
Clause #67 W:(-40 4) 
Number of literals: 0
Clause #68 W:(4 -6) NOT x32 AND NOT x69 AND NOT x288 AND NOT x784 AND NOT x841
Number of literals: 5
Clause #69 W:(14 8) NOT x355 AND NOT x850
Number of literals: 2
Clause #70 W:(3 8) NOT x119 AND NOT x611
Number of literals: 2
Clause #71 W:(51 -13) NOT x67 AND NOT x254 AND NOT x917
Number of literals: 3
Clause #72 W:(-16 15) NOT x573 AND NOT x718
Number of literals: 2
Clause #73 W:(-11 8) NOT x23
Number of literals: 1
Clause #74 W:(-25 -13) NOT x316
Number of literals: 1
Clause #75 W:(-36 6) 
Number of literals: 0
Clause #76 W:(-10 5) NOT x36 AND NOT x794
Number of literals: 2
Clause #77 W:(-27 -25) NOT x81 AND NOT x390 AND NOT x939
Number of literals: 3
Clause #78 W:(22 3) NOT x156 AND NOT x262
Number of literals: 2
Clause #79 W:(0 10) NOT x276
Number of literals: 1
Clause #80 W:(-7 -13) NOT x477 AND NOT x720
Number of literals: 2
Clause #81 W:(122 -109) x153
Number of literals: 1
Clause #82 W:(-120 37) x334 AND NOT x464 AND NOT x655 AND NOT x813
Number of literals: 4
Clause #83 W:(67 -62) NOT x471
Number of literals: 1
Clause #84 W:(17 -67) NOT x152 AND NOT x411 AND NOT x730 AND NOT x928
Number of literals: 4
Clause #85 W:(3 -17) NOT x466
Number of literals: 1
Clause #86 W:(-11 -5) NOT x541 AND NOT x863
Number of literals: 2
Clause #87 W:(13 1) NOT x83 AND NOT x370 AND NOT x443 AND NOT x560
Number of literals: 4
Clause #88 W:(-41 -7) NOT x550 AND NOT x761
Number of literals: 2
Clause #89 W:(-13 -4) NOT x251 AND NOT x481 AND NOT x719 AND NOT x883
Number of literals: 4
Clause #90 W:(12 2) NOT x799
Number of literals: 1
Clause #91 W:(10 12) x334 AND NOT x721
Number of literals: 2
Clause #92 W:(-2 8) NOT x45 AND NOT x137 AND NOT x320
Number of literals: 3
Clause #93 W:(-44 4) NOT x126
Number of literals: 1
Clause #94 W:(2 -25) NOT x674 AND NOT x949
Number of literals: 2
Clause #95 W:(4 15) x153
Number of literals: 1
Clause #96 W:(-17 5) NOT x24 AND NOT x94 AND NOT x287 AND NOT x547
Number of literals: 4
Clause #97 W:(-8 9) NOT x645 AND NOT x780 AND NOT x801 AND NOT x961
Number of literals: 4
Clause #98 W:(2 -24) NOT x539
Number of literals: 1
Clause #99 W:(-6 4) NOT x503
Number of literals: 1
Clause #100 W:(45 -30) x225 AND NOT x656
Number of literals: 2
Clause #101 W:(-2 -21) NOT x536 AND NOT x577 AND NOT x969
Number of literals: 3
Clause #102 W:(76 -25) NOT x530 AND NOT x874
Number of literals: 2
Clause #103 W:(8 15) NOT x241 AND NOT x253
Number of literals: 2
Clause #104 W:(4 -38) NOT x355 AND NOT x999
Number of literals: 2
Clause #105 W:(4 17) 
Number of literals: 0
Clause #106 W:(1 45) NOT x783 AND NOT x892
Number of literals: 2
Clause #107 W:(23 9) NOT x588 AND NOT x615 AND NOT x903
Number of literals: 3
Clause #108 W:(-46 -3) NOT x334 AND NOT x872
Number of literals: 2
Clause #109 W:(-18 2) NOT x72 AND NOT x736 AND NOT x872 AND NOT x1011
Number of literals: 4
Clause #110 W:(-3 26) NOT x862
Number of literals: 1
Clause #111 W:(-2 -10) x872
Number of literals: 1
Clause #112 W:(15 18) NOT x186 AND NOT x300 AND NOT x361
Number of literals: 3
Clause #113 W:(16 6) NOT x500
Number of literals: 1
Clause #114 W:(39 -52) 
Number of literals: 0
Clause #115 W:(-1 27) NOT x431 AND NOT x810
Number of literals: 2
Clause #116 W:(-12 -2) NOT x311 AND NOT x368
Number of literals: 2
Clause #117 W:(1 4) NOT x205 AND NOT x668
Number of literals: 2
Clause #118 W:(7 8) NOT x581 AND NOT x782
Number of literals: 2
Clause #119 W:(-8 0) NOT x260 AND NOT x287 AND NOT x872
Number of literals: 3
Clause #120 W:(-2 18) NOT x739 AND NOT x952
Number of literals: 2
Clause #121 W:(-3 11) NOT x81 AND NOT x261 AND NOT x865 AND NOT x1001
Number of literals: 4
Clause #122 W:(11 -10) NOT x601
Number of literals: 1
Clause #123 W:(42 -65) NOT x30 AND NOT x431 AND NOT x525 AND NOT x835 AND NOT x892
Number of literals: 5
Clause #124 W:(-13 -29) NOT x548
Number of literals: 1
Clause #125 W:(-3 14) NOT x728
Number of literals: 1
Clause #126 W:(43 -37) x872 AND NOT x691
Number of literals: 2
Clause #127 W:(16 10) NOT x943
Number of literals: 1
Clause #128 W:(46 -96) NOT x601 AND NOT x656
Number of literals: 2
Clause #129 W:(21 18) NOT x370
Number of literals: 1
Clause #130 W:(9 -1) NOT x207 AND NOT x361 AND NOT x379 AND NOT x443
Number of literals: 4
Clause #131 W:(-18 22) NOT x503 AND NOT x874
Number of literals: 2
Clause #132 W:(24 -39) x197 AND x294 AND NOT x153 AND NOT x402 AND NOT x726
Number of literals: 5
Clause #133 W:(18 -5) 
Number of literals: 0
Clause #134 W:(43 10) NOT x458 AND NOT x792 AND NOT x975
Number of literals: 3
Clause #135 W:(18 1) NOT x290 AND NOT x782 AND NOT x863
Number of literals: 3
Clause #136 W:(-1 -6) NOT x692
Number of literals: 1
Clause #137 W:(-98 97) NOT x153 AND NOT x362 AND NOT x478
Number of literals: 3
Clause #138 W:(1 -2) 
Number of literals: 0
Clause #139 W:(12 -25) NOT x119 AND NOT x217
Number of literals: 2
Clause #140 W:(35 -12) x872
Number of literals: 1
Clause #141 W:(62 -80) NOT x87 AND NOT x197 AND NOT x708
Number of literals: 3
Clause #142 W:(-7 26) NOT x138 AND NOT x210 AND NOT x245 AND NOT x318 AND NOT x661
Number of literals: 5
Clause #143 W:(-3 -26) NOT x16 AND NOT x280
Number of literals: 2
Clause #144 W:(4 12) 
Number of literals: 0
Clause #145 W:(-12 59) 
Number of literals: 0
Clause #146 W:(-9 -1) NOT x18 AND NOT x731 AND NOT x881
Number of literals: 3
Clause #147 W:(7 -20) NOT x126 AND NOT x803 AND NOT x875
Number of literals: 3
Clause #148 W:(-10 0) 
Number of literals: 0
Clause #149 W:(13 3) NOT x69 AND NOT x160 AND NOT x229
Number of literals: 3
Clause #150 W:(42 -30) NOT x17 AND NOT x78 AND NOT x294 AND NOT x562
Number of literals: 4
Clause #151 W:(3 1) NOT x69 AND NOT x512
Number of literals: 2
Clause #152 W:(19 35) NOT x241
Number of literals: 1
Clause #153 W:(14 -10) NOT x776
Number of literals: 1
Clause #154 W:(-4 22) NOT x264 AND NOT x291 AND NOT x826 AND NOT x1008
Number of literals: 4
Clause #155 W:(-5 14) NOT x979 AND NOT x987
Number of literals: 2
Clause #156 W:(16 16) 
Number of literals: 0
Clause #157 W:(23 31) NOT x351 AND NOT x942
Number of literals: 2
Clause #158 W:(1 3) 
Number of literals: 0
Clause #159 W:(11 -23) NOT x207 AND NOT x895
Number of literals: 2
Clause #160 W:(6 14) NOT x843
Number of literals: 1
Clause #161 W:(48 -39) NOT x668
Number of literals: 1
Clause #162 W:(-15 3) NOT x334 AND NOT x805
Number of literals: 2
Clause #163 W:(-27 21) NOT x27 AND NOT x639 AND NOT x913 AND NOT x960
Number of literals: 4
Clause #164 W:(28 -30) x872
Number of literals: 1
Clause #165 W:(25 -34) NOT x479
Number of literals: 1
Clause #166 W:(-11 -8) NOT x841
Number of literals: 1
Clause #167 W:(-17 15) NOT x174 AND NOT x197 AND NOT x656 AND NOT x724 AND NOT x793
Number of literals: 5
Clause #168 W:(-11 18) NOT x234 AND NOT x853
Number of literals: 2
Clause #169 W:(-36 -8) NOT x131 AND NOT x570 AND NOT x824
Number of literals: 3
Clause #170 W:(34 -41) 
Number of literals: 0
Clause #171 W:(11 -13) 
Number of literals: 0
Clause #172 W:(-2 19) NOT x217
Number of literals: 1
Clause #173 W:(-5 15) NOT x139 AND NOT x358 AND NOT x490 AND NOT x816 AND NOT x819 AND NOT x848
Number of literals: 6
Clause #174 W:(10 10) NOT x55 AND NOT x762
Number of literals: 2
Clause #175 W:(-27 8) NOT x597
Number of literals: 1
Clause #176 W:(-16 -2) NOT x10
Number of literals: 1
Clause #177 W:(48 3) 
Number of literals: 0
Clause #178 W:(29 3) NOT x97 AND NOT x504
Number of literals: 2
Clause #179 W:(-26 43) NOT x555 AND NOT x1013
Number of literals: 2
Clause #180 W:(-9 53) NOT x169 AND NOT x274 AND NOT x561 AND NOT x709 AND NOT x835 AND NOT x899
Number of literals: 6
Clause #181 W:(20 7) NOT x265 AND NOT x637
Number of literals: 2
Clause #182 W:(-8 -4) NOT x274 AND NOT x695 AND NOT x892
Number of literals: 3
Clause #183 W:(6 -10) 
Number of literals: 0
Clause #184 W:(-4 -37) NOT x77
Number of literals: 1
Clause #185 W:(-7 -4) NOT x814 AND NOT x885 AND NOT x1006
Number of literals: 3
Clause #186 W:(-35 -5) NOT x207 AND NOT x267 AND NOT x465
Number of literals: 3
Clause #187 W:(-1 3) x122 AND NOT x960
Number of literals: 2
Clause #188 W:(7 -18) NOT x579 AND NOT x838 AND NOT x881
Number of literals: 3
Clause #189 W:(19 -6) NOT x485 AND NOT x942
Number of literals: 2
Clause #190 W:(29 -70) 
Number of literals: 0
Clause #191 W:(27 17) NOT x1 AND NOT x389 AND NOT x473 AND NOT x690 AND NOT x910
Number of literals: 5
Clause #192 W:(-5 -32) 
Number of literals: 0
Clause #193 W:(-9 3) NOT x856
Number of literals: 1
Clause #194 W:(-20 -23) NOT x510
Number of literals: 1
Clause #195 W:(-13 -22) x747
Number of literals: 1
Clause #196 W:(6 -10) NOT x974
Number of literals: 1
Clause #197 W:(17 10) NOT x66 AND NOT x751
Number of literals: 2
Clause #198 W:(-17 -11) NOT x210 AND NOT x218 AND NOT x400
Number of literals: 3
Clause #199 W:(-34 4) NOT x265 AND NOT x943
Number of literals: 2
Clause #200 W:(10 1) NOT x909
Number of literals: 1
Clause #201 W:(8 10) NOT x617 AND NOT x872 AND NOT x962
Number of literals: 3
Clause #202 W:(5 5) NOT x225 AND NOT x421 AND NOT x892
Number of literals: 3
Clause #203 W:(7 0) NOT x459 AND NOT x537 AND NOT x606
Number of literals: 3
Clause #204 W:(-1 29) NOT x68
Number of literals: 1
Clause #205 W:(-8 -14) NOT x454 AND NOT x507
Number of literals: 2
Clause #206 W:(0 -2) NOT x256
Number of literals: 1
Clause #207 W:(-27 35) NOT x347 AND NOT x586 AND NOT x904
Number of literals: 3
Clause #208 W:(-67 -4) NOT x46 AND NOT x107 AND NOT x521
Number of literals: 3
Clause #209 W:(8 10) NOT x134
Number of literals: 1
Clause #210 W:(-27 -25) NOT x122 AND NOT x230 AND NOT x832
Number of literals: 3
Clause #211 W:(28 -47) x225 AND NOT x125 AND NOT x294
Number of literals: 3
Clause #212 W:(30 -16) NOT x723 AND NOT x793
Number of literals: 2
Clause #213 W:(-40 -24) NOT x222 AND NOT x285 AND NOT x887
Number of literals: 3
Clause #214 W:(6 8) NOT x685
Number of literals: 1
Clause #215 W:(-20 4) NOT x156 AND NOT x218 AND NOT x671
Number of literals: 3
Clause #216 W:(62 -30) NOT x293 AND NOT x639 AND NOT x909
Number of literals: 3
Clause #217 W:(60 -54) 
Number of literals: 0
Clause #218 W:(9 -21) NOT x209 AND NOT x644 AND NOT x1003
Number of literals: 3
Clause #219 W:(-7 -16) NOT x200 AND NOT x383 AND NOT x523 AND NOT x872
Number of literals: 4
Clause #220 W:(-27 -1) NOT x284 AND NOT x772
Number of literals: 2
Clause #221 W:(-6 17) NOT x106
Number of literals: 1
Clause #222 W:(9 19) x892 AND NOT x438
Number of literals: 2
Clause #223 W:(15 -2) NOT x153
Number of literals: 1
Clause #224 W:(-6 -5) NOT x898
Number of literals: 1
Clause #225 W:(-40 23) NOT x334 AND NOT x826
Number of literals: 2
Clause #226 W:(9 11) NOT x275 AND NOT x430 AND NOT x469 AND NOT x777 AND NOT x833
Number of literals: 5
Clause #227 W:(-32 6) x872 AND NOT x77 AND NOT x489 AND NOT x753
Number of literals: 4
Clause #228 W:(-1 -2) NOT x439 AND NOT x602
Number of literals: 2
Clause #229 W:(52 -21) NOT x197 AND NOT x623 AND NOT x913
Number of literals: 3
Clause #230 W:(-4 11) 
Number of literals: 0
Clause #231 W:(-4 9) 
Number of literals: 0
Clause #232 W:(3 -7) NOT x771 AND NOT x909
Number of literals: 2
Clause #233 W:(-23 23) NOT x733 AND NOT x872 AND NOT x892
Number of literals: 3
Clause #234 W:(0 -9) 
Number of literals: 0
Clause #235 W:(-22 36) NOT x360 AND NOT x446 AND NOT x663
Number of literals: 3
Clause #236 W:(-1 6) NOT x530 AND NOT x625 AND NOT x931
Number of literals: 3
Clause #237 W:(31 4) 
Number of literals: 0
Clause #238 W:(-9 -34) NOT x379 AND NOT x563
Number of literals: 2
Clause #239 W:(-12 0) NOT x624
Number of literals: 1
Clause #240 W:(26 8) x153
Number of literals: 1
Clause #241 W:(-51 29) NOT x813 AND NOT x892 AND NOT x976
Number of literals: 3
Clause #242 W:(3 -1) 
Number of literals: 0
Clause #243 W:(-32 -29) 
Number of literals: 0
Clause #244 W:(-32 12) x1011 AND NOT x471
Number of literals: 2
Clause #245 W:(3 -10) NOT x972
Number of literals: 1
Clause #246 W:(18 -3) NOT x471
Number of literals: 1
Clause #247 W:(-31 -13) NOT x830
Number of literals: 1
Clause #248 W:(1 -13) NOT x264 AND NOT x328 AND NOT x541 AND NOT x795 AND NOT x811
Number of literals: 5
Clause #249 W:(22 1) 
Number of literals: 0
Clause #250 W:(-6 1) NOT x22 AND NOT x893 AND NOT x953 AND NOT x1002
Number of literals: 4
Clause #251 W:(17 1) NOT x214
Number of literals: 1
Clause #252 W:(-41 40) NOT x714
Number of literals: 1
Clause #253 W:(-1 1) NOT x333
Number of literals: 1
Clause #254 W:(-13 -16) NOT x28 AND NOT x153 AND NOT x339 AND NOT x502
Number of literals: 4
Clause #255 W:(31 14) NOT x17 AND NOT x461
Number of literals: 2
Clause #256 W:(6 0) NOT x294 AND NOT x943
Number of literals: 2
Clause #257 W:(-18 18) NOT x36 AND NOT x225 AND NOT x289 AND NOT x334 AND NOT x544 AND NOT x840 AND NOT x1017
Number of literals: 7
Clause #258 W:(13 7) NOT x358 AND NOT x385
Number of literals: 2
Clause #259 W:(-6 -18) 
Number of literals: 0
Clause #260 W:(-20 -16) NOT x89 AND NOT x195 AND NOT x509 AND NOT x1018
Number of literals: 4
Clause #261 W:(-13 -7) NOT x164 AND NOT x189
Number of literals: 2
Clause #262 W:(-1 21) NOT x205 AND NOT x930
Number of literals: 2
Clause #263 W:(3 1) NOT x892
Number of literals: 1
Clause #264 W:(-25 -36) NOT x110 AND NOT x196 AND NOT x523 AND NOT x604 AND NOT x954
Number of literals: 5
Clause #265 W:(-7 25) NOT x248
Number of literals: 1
Clause #266 W:(-3 -1) NOT x95
Number of literals: 1
Clause #267 W:(-8 -2) NOT x240 AND NOT x350
Number of literals: 2
Clause #268 W:(0 21) NOT x125 AND NOT x414 AND NOT x950
Number of literals: 3
Clause #269 W:(22 0) NOT x405 AND NOT x912
Number of literals: 2
Clause #270 W:(-33 65) 
Number of literals: 0
Clause #271 W:(-9 24) NOT x133 AND NOT x294 AND NOT x808 AND NOT x850
Number of literals: 4
Clause #272 W:(1 -11) NOT x192 AND NOT x441 AND NOT x827 AND NOT x993
Number of literals: 4
Clause #273 W:(16 -10) NOT x1
Number of literals: 1
Clause #274 W:(-47 -5) NOT x158 AND NOT x225 AND NOT x553 AND NOT x603 AND NOT x743
Number of literals: 5
Clause #275 W:(35 -6) 
Number of literals: 0
Clause #276 W:(3 25) NOT x16 AND NOT x100 AND NOT x293 AND NOT x404
Number of literals: 4
Clause #277 W:(-1 -10) NOT x214
Number of literals: 1
Clause #278 W:(-5 -3) NOT x796
Number of literals: 1
Clause #279 W:(-2 6) NOT x446
Number of literals: 1
Clause #280 W:(-32 -7) NOT x56 AND NOT x656
Number of literals: 2
Clause #281 W:(-1 5) NOT x872
Number of literals: 1
Clause #282 W:(-5 -1) NOT x397
Number of literals: 1
Clause #283 W:(-5 1) x334 AND NOT x958
Number of literals: 2
Clause #284 W:(-19 -8) NOT x83 AND NOT x439 AND NOT x505 AND NOT x885
Number of literals: 4
Clause #285 W:(-4 -4) NOT x516
Number of literals: 1
Clause #286 W:(14 40) NOT x145
Number of literals: 1
Clause #287 W:(-20 27) 
Number of literals: 0
Clause #288 W:(7 29) NOT x872
Number of literals: 1
Clause #289 W:(35 -23) NOT x89 AND NOT x301
Number of literals: 2
Clause #290 W:(-12 12) NOT x485
Number of literals: 1
Clause #291 W:(-10 -4) NOT x321
Number of literals: 1
Clause #292 W:(18 20) NOT x260 AND NOT x509 AND NOT x537
Number of literals: 3
Clause #293 W:(-47 30) NOT x135 AND NOT x745 AND NOT x879
Number of literals: 3
Clause #294 W:(10 4) NOT x187 AND NOT x519 AND NOT x559 AND NOT x691 AND NOT x788 AND NOT x968
Number of literals: 6
Clause #295 W:(16 3) NOT x255 AND NOT x701 AND NOT x714
Number of literals: 3
Clause #296 W:(29 5) NOT x906
Number of literals: 1
Clause #297 W:(-5 -5) NOT x798
Number of literals: 1
Clause #298 W:(3 0) x834 AND NOT x133 AND NOT x386 AND NOT x426 AND NOT x725
Number of literals: 5
Clause #299 W:(-6 -5) NOT x18 AND NOT x225 AND NOT x282
Number of literals: 3
Clause #300 W:(-23 21) NOT x558 AND NOT x576 AND NOT x578 AND NOT x668 AND NOT x840 AND NOT x956
Number of literals: 6
Clause #301 W:(7 17) NOT x278 AND NOT x738
Number of literals: 2
Clause #302 W:(0 6) NOT x689 AND NOT x773
Number of literals: 2
Clause #303 W:(8 4) NOT x19 AND NOT x206 AND NOT x225
Number of literals: 3
Clause #304 W:(7 -3) NOT x110 AND NOT x397 AND NOT x636 AND NOT x641
Number of literals: 4
Clause #305 W:(15 2) NOT x640 AND NOT x823
Number of literals: 2
Clause #306 W:(-3 12) NOT x238 AND NOT x646 AND NOT x670
Number of literals: 3
Clause #307 W:(13 -14) NOT x299 AND NOT x615
Number of literals: 2
Clause #308 W:(65 -106) 
Number of literals: 0
Clause #309 W:(-20 -2) NOT x75
Number of literals: 1
Clause #310 W:(20 15) NOT x713
Number of literals: 1
Clause #311 W:(-11 9) NOT x23 AND NOT x798
Number of literals: 2
Clause #312 W:(-9 3) NOT x391
Number of literals: 1
Clause #313 W:(44 -20) NOT x287 AND NOT x549 AND NOT x566 AND NOT x729
Number of literals: 4
Clause #314 W:(23 -5) NOT x599 AND NOT x660
Number of literals: 2
Clause #315 W:(23 27) NOT x282 AND NOT x483 AND NOT x960
Number of literals: 3
Clause #316 W:(9 -9) NOT x63 AND NOT x382
Number of literals: 2
Clause #317 W:(3 -1) NOT x451
Number of literals: 1
Clause #318 W:(-21 -11) NOT x975 AND NOT x994
Number of literals: 2
Clause #319 W:(48 -29) NOT x98
Number of literals: 1
Clause #320 W:(-19 5) NOT x378
Number of literals: 1
Clause #321 W:(-4 -7) NOT x334 AND NOT x566 AND NOT x594 AND NOT x634
Number of literals: 4
Clause #322 W:(-26 -8) NOT x114 AND NOT x353 AND NOT x637
Number of literals: 3
Clause #323 W:(15 5) NOT x276 AND NOT x322 AND NOT x449
Number of literals: 3
Clause #324 W:(-5 16) NOT x782
Number of literals: 1
Clause #325 W:(57 -44) 
Number of literals: 0
Clause #326 W:(3 16) NOT x946
Number of literals: 1
Clause #327 W:(33 -13) NOT x285 AND NOT x374
Number of literals: 2
Clause #328 W:(-45 -7) NOT x308 AND NOT x694 AND NOT x867
Number of literals: 3
Clause #329 W:(14 8) NOT x28
Number of literals: 1
Clause #330 W:(-9 7) 
Number of literals: 0
Clause #331 W:(-61 88) NOT x272
Number of literals: 1
Clause #332 W:(15 -8) NOT x11 AND NOT x130 AND NOT x345 AND NOT x506 AND NOT x567 AND NOT x971 AND NOT x1002
Number of literals: 7
Clause #333 W:(36 -9) NOT x140 AND NOT x968
Number of literals: 2
Clause #334 W:(1 2) NOT x540 AND NOT x823
Number of literals: 2
Clause #335 W:(1 -2) NOT x250 AND NOT x809
Number of literals: 2
Clause #336 W:(-8 10) NOT x4 AND NOT x165 AND NOT x458 AND NOT x720
Number of literals: 4
Clause #337 W:(30 -47) NOT x263 AND NOT x433 AND NOT x965 AND NOT x969
Number of literals: 4
Clause #338 W:(0 20) NOT x454
Number of literals: 1
Clause #339 W:(-12 49) NOT x507 AND NOT x766 AND NOT x806
Number of literals: 3
Clause #340 W:(-30 -4) NOT x121 AND NOT x213 AND NOT x867
Number of literals: 3
Clause #341 W:(-74 -19) NOT x197 AND NOT x303 AND NOT x441 AND NOT x513 AND NOT x560 AND NOT x838
Number of literals: 6
Clause #342 W:(-10 12) NOT x270 AND NOT x283 AND NOT x665
Number of literals: 3
Clause #343 W:(26 18) NOT x237 AND NOT x471 AND NOT x961
Number of literals: 3
Clause #344 W:(-112 101) x197 AND NOT x565
Number of literals: 2
Clause #345 W:(13 20) NOT x373
Number of literals: 1
Clause #346 W:(52 -26) NOT x901 AND NOT x997
Number of literals: 2
Clause #347 W:(-18 -29) NOT x517
Number of literals: 1
Clause #348 W:(49 -9) NOT x48 AND NOT x452
Number of literals: 2
Clause #349 W:(-9 32) NOT x335 AND NOT x372
Number of literals: 2
Clause #350 W:(-62 1) NOT x99 AND NOT x684
Number of literals: 2
Clause #351 W:(2 28) NOT x453 AND NOT x883
Number of literals: 2
Clause #352 W:(-4 7) NOT x734
Number of literals: 1
Clause #353 W:(-20 -10) 
Number of literals: 0
Clause #354 W:(14 1) 
Number of literals: 0
Clause #355 W:(21 11) NOT x787
Number of literals: 1
Clause #356 W:(-38 -3) NOT x497
Number of literals: 1
Clause #357 W:(1 3) NOT x271 AND NOT x447 AND NOT x859
Number of literals: 3
Clause #358 W:(14 1) 
Number of literals: 0
Clause #359 W:(49 -44) NOT x522 AND NOT x663 AND NOT x694
Number of literals: 3
Clause #360 W:(-35 -19) NOT x66 AND NOT x208
Number of literals: 2
Clause #361 W:(17 35) NOT x570
Number of literals: 1
Clause #362 W:(5 -14) NOT x328 AND NOT x374 AND NOT x930 AND NOT x960
Number of literals: 4
Clause #363 W:(19 13) NOT x378 AND NOT x774 AND NOT x775
Number of literals: 3
Clause #364 W:(-29 9) 
Number of literals: 0
Clause #365 W:(-40 12) NOT x152 AND NOT x796
Number of literals: 2
Clause #366 W:(-4 -26) NOT x178 AND NOT x711 AND NOT x712
Number of literals: 3
Clause #367 W:(-16 20) NOT x383 AND NOT x453
Number of literals: 2
Clause #368 W:(5 12) NOT x422 AND NOT x971 AND NOT x992
Number of literals: 3
Clause #369 W:(-4 49) NOT x114
Number of literals: 1
Clause #370 W:(-14 -6) NOT x181
Number of literals: 1
Clause #371 W:(15 2) NOT x22
Number of literals: 1
Clause #372 W:(-30 3) NOT x185 AND NOT x759
Number of literals: 2
Clause #373 W:(-3 26) NOT x194 AND NOT x699
Number of literals: 2
Clause #374 W:(-3 -31) NOT x583
Number of literals: 1
Clause #375 W:(-22 -6) 
Number of literals: 0
Clause #376 W:(57 -36) NOT x8 AND NOT x171 AND NOT x306 AND NOT x798
Number of literals: 4
Clause #377 W:(17 -41) x892
Number of literals: 1
Clause #378 W:(-8 -15) 
Number of literals: 0
Clause #379 W:(13 9) NOT x909
Number of literals: 1
Clause #380 W:(-12 -1) NOT x303 AND NOT x815
Number of literals: 2
Clause #381 W:(-19 -3) NOT x263 AND NOT x981
Number of literals: 2
Clause #382 W:(-14 48) x72 AND NOT x97 AND NOT x564 AND NOT x719
Number of literals: 4
Clause #383 W:(12 -29) x334 AND NOT x325
Number of literals: 2
Clause #384 W:(-13 -21) 
Number of literals: 0
Clause #385 W:(-5 -9) NOT x328 AND NOT x599 AND NOT x984
Number of literals: 3
Clause #386 W:(3 -44) NOT x172
Number of literals: 1
Clause #387 W:(-14 -12) 
Number of literals: 0
Clause #388 W:(0 4) NOT x115 AND NOT x467
Number of literals: 2
Clause #389 W:(-3 30) NOT x64 AND NOT x104 AND NOT x1015
Number of literals: 3
Clause #390 W:(4 -18) x225 AND NOT x813 AND NOT x930
Number of literals: 3
Clause #391 W:(13 26) NOT x326 AND NOT x398 AND NOT x502 AND NOT x679
Number of literals: 4
Clause #392 W:(9 7) NOT x117 AND NOT x887
Number of literals: 2
Clause #393 W:(-9 21) NOT x244
Number of literals: 1
Clause #394 W:(41 -2) NOT x30 AND NOT x415 AND NOT x457 AND NOT x481
Number of literals: 4
Clause #395 W:(-3 2) NOT x143
Number of literals: 1
Clause #396 W:(-70 78) NOT x421 AND NOT x698 AND NOT x872
Number of literals: 3
Clause #397 W:(-17 6) NOT x892
Number of literals: 1
Clause #398 W:(-2 17) NOT x224 AND NOT x611
Number of literals: 2
Clause #399 W:(3 -11) NOT x437
Number of literals: 1
Clause #400 W:(-9 -9) NOT x122 AND NOT x196 AND NOT x776 AND NOT x936
Number of literals: 4
Clause #401 W:(-21 44) NOT x145 AND NOT x334 AND NOT x444
Number of literals: 3
Clause #402 W:(62 -32) NOT x707 AND NOT x1016
Number of literals: 2
Clause #403 W:(29 0) NOT x42 AND NOT x868
Number of literals: 2
Clause #404 W:(-59 14) NOT x524
Number of literals: 1
Clause #405 W:(8 -2) NOT x350 AND NOT x733 AND NOT x1010
Number of literals: 3
Clause #406 W:(-31 15) NOT x57 AND NOT x283 AND NOT x778
Number of literals: 3
Clause #407 W:(7 -21) NOT x271 AND NOT x385 AND NOT x970
Number of literals: 3
Clause #408 W:(22 2) NOT x558 AND NOT x647
Number of literals: 2
Clause #409 W:(8 -6) NOT x33 AND NOT x294 AND NOT x680 AND NOT x851
Number of literals: 4
Clause #410 W:(-1 -5) NOT x337 AND NOT x647
Number of literals: 2
Clause #411 W:(-8 -22) NOT x392 AND NOT x669
Number of literals: 2
Clause #412 W:(1 23) NOT x249
Number of literals: 1
Clause #413 W:(-27 -2) x225
Number of literals: 1
Clause #414 W:(19 31) NOT x276 AND NOT x991
Number of literals: 2
Clause #415 W:(-2 19) 
Number of literals: 0
Clause #416 W:(-3 8) NOT x492 AND NOT x930
Number of literals: 2
Clause #417 W:(38 -23) NOT x268 AND NOT x1001
Number of literals: 2
Clause #418 W:(-29 18) NOT x559 AND NOT x947
Number of literals: 2
Clause #419 W:(8 44) NOT x169 AND NOT x243 AND NOT x768 AND NOT x973
Number of literals: 4
Clause #420 W:(-24 17) NOT x214 AND NOT x985
Number of literals: 2
Clause #421 W:(2 11) NOT x408 AND NOT x546 AND NOT x792
Number of literals: 3
Clause #422 W:(9 -3) NOT x38
Number of literals: 1
Clause #423 W:(34 1) NOT x740
Number of literals: 1
Clause #424 W:(-5 -26) x225
Number of literals: 1
Clause #425 W:(49 -38) NOT x349
Number of literals: 1
Clause #426 W:(-54 36) NOT x872
Number of literals: 1
Clause #427 W:(5 1) NOT x41 AND NOT x493
Number of literals: 2
Clause #428 W:(-9 -43) 
Number of literals: 0
Clause #429 W:(31 0) NOT x157 AND NOT x549
Number of literals: 2
Clause #430 W:(-19 -1) NOT x300 AND NOT x552 AND NOT x637 AND NOT x775
Number of literals: 4
Clause #431 W:(-13 -15) NOT x259 AND NOT x548 AND NOT x619
Number of literals: 3
Clause #432 W:(14 15) NOT x112 AND NOT x220 AND NOT x892
Number of literals: 3
Clause #433 W:(49 -52) NOT x99
Number of literals: 1
Clause #434 W:(4 4) NOT x606 AND NOT x786 AND NOT x825 AND NOT x856
Number of literals: 4
Clause #435 W:(-15 -40) x872
Number of literals: 1
Clause #436 W:(11 9) NOT x351 AND NOT x784 AND NOT x990
Number of literals: 3
Clause #437 W:(-113 133) x334 AND NOT x515
Number of literals: 2
Clause #438 W:(8 -40) NOT x288 AND NOT x1019
Number of literals: 2
Clause #439 W:(11 -2) NOT x251 AND NOT x650
Number of literals: 2
Clause #440 W:(-26 29) NOT x763
Number of literals: 1
Clause #441 W:(24 8) x334 AND NOT x348 AND NOT x766
Number of literals: 3
Clause #442 W:(1 -2) NOT x176 AND NOT x774
Number of literals: 2
Clause #443 W:(-9 -3) NOT x456
Number of literals: 1
Clause #444 W:(0 53) NOT x43 AND NOT x153
Number of literals: 2
Clause #445 W:(28 9) NOT x19 AND NOT x69 AND NOT x126 AND NOT x550 AND NOT x892
Number of literals: 5
Clause #446 W:(20 -6) NOT x599
Number of literals: 1
Clause #447 W:(-44 4) NOT x410 AND NOT x549
Number of literals: 2
Clause #448 W:(-20 24) NOT x631
Number of literals: 1
Clause #449 W:(24 -5) 
Number of literals: 0
Clause #450 W:(-3 -14) NOT x121 AND NOT x412 AND NOT x523 AND NOT x646 AND NOT x730 AND NOT x956
Number of literals: 6
Clause #451 W:(22 -35) NOT x205 AND NOT x512
Number of literals: 2
Clause #452 W:(-2 3) NOT x817
Number of literals: 1
Clause #453 W:(-22 13) NOT x524 AND NOT x1020
Number of literals: 2
Clause #454 W:(4 1) NOT x228 AND NOT x349
Number of literals: 2
Clause #455 W:(-15 -30) NOT x107 AND NOT x133 AND NOT x142 AND NOT x171
Number of literals: 4
Clause #456 W:(10 -12) 
Number of literals: 0
Clause #457 W:(28 -34) NOT x544 AND NOT x633
Number of literals: 2
Clause #458 W:(-18 -19) NOT x39 AND NOT x300 AND NOT x814 AND NOT x969
Number of literals: 4
Clause #459 W:(54 -24) NOT x272 AND NOT x642 AND NOT x960 AND NOT x1020
Number of literals: 4
Clause #460 W:(14 18) NOT x805 AND NOT x815
Number of literals: 2
Clause #461 W:(-12 -2) NOT x333 AND NOT x625 AND NOT x768
Number of literals: 3
Clause #462 W:(7 -11) 
Number of literals: 0
Clause #463 W:(-2 -4) NOT x665
Number of literals: 1
Clause #464 W:(-40 -11) NOT x415 AND NOT x901
Number of literals: 2
Clause #465 W:(-1 0) NOT x1021
Number of literals: 1
Clause #466 W:(-6 -4) NOT x106 AND NOT x392 AND NOT x583 AND NOT x923
Number of literals: 4
Clause #467 W:(-45 -22) NOT x379 AND NOT x905
Number of literals: 2
Clause #468 W:(-9 -14) NOT x869
Number of literals: 1
Clause #469 W:(-2 -20) NOT x1 AND NOT x175 AND NOT x296
Number of literals: 3
Clause #470 W:(3 -26) NOT x695 AND NOT x908
Number of literals: 2
Clause #471 W:(-4 22) NOT x477 AND NOT x674
Number of literals: 2
Clause #472 W:(3 -45) NOT x112 AND NOT x587 AND NOT x867
Number of literals: 3
Clause #473 W:(45 -45) NOT x50 AND NOT x389 AND NOT x989
Number of literals: 3
Clause #474 W:(0 3) NOT x209 AND NOT x329 AND NOT x359 AND NOT x409
Number of literals: 4
Clause #475 W:(-17 19) NOT x172 AND NOT x532
Number of literals: 2
Clause #476 W:(8 34) NOT x784 AND NOT x811
Number of literals: 2
Clause #477 W:(0 -6) NOT x740 AND NOT x971
Number of literals: 2
Clause #478 W:(-14 2) NOT x54
Number of literals: 1
Clause #479 W:(-2 -4) NOT x231 AND NOT x753
Number of literals: 2
Clause #480 W:(-11 -28) 
Number of literals: 0
Clause #481 W:(0 19) NOT x156
Number of literals: 1
Clause #482 W:(11 -31) NOT x182 AND NOT x209 AND NOT x899
Number of literals: 3
Clause #483 W:(-10 -1) 
Number of literals: 0
Clause #484 W:(15 -32) NOT x892
Number of literals: 1
Clause #485 W:(26 -24) NOT x580 AND NOT x1001
Number of literals: 2
Clause #486 W:(-13 -31) 
Number of literals: 0
Clause #487 W:(-12 21) 
Number of literals: 0
Clause #488 W:(11 5) NOT x579
Number of literals: 1
Clause #489 W:(1 5) NOT x111 AND NOT x742
Number of literals: 2
Clause #490 W:(-27 75) x471 AND NOT x107
Number of literals: 2
Clause #491 W:(-11 -8) NOT x7 AND NOT x469 AND NOT x552 AND NOT x735 AND NOT x916
Number of literals: 5
Clause #492 W:(1 10) NOT x136 AND NOT x304 AND NOT x497 AND NOT x835 AND NOT x889
Number of literals: 5
Clause #493 W:(44 -9) NOT x808 AND NOT x923
Number of literals: 2
Clause #494 W:(27 -22) NOT x363 AND NOT x853
Number of literals: 2
Clause #495 W:(-29 18) NOT x214 AND NOT x853
Number of literals: 2
Clause #496 W:(-3 7) NOT x241 AND NOT x448 AND NOT x539 AND NOT x802
Number of literals: 4
Clause #497 W:(-17 -7) NOT x790 AND NOT x862 AND NOT x871 AND NOT x951
Number of literals: 4
Clause #498 W:(55 -86) x656 AND NOT x41 AND NOT x322 AND NOT x920
Number of literals: 4
Clause #499 W:(-61 -5) NOT x225 AND NOT x892
Number of literals: 2
results: Results(training_time_s=1591.2130999565125, inference_time_s=0.4689803123474121, memory_usage_mb=425.3359375, accuracy=0.829, precision=0.8344741680935011, recall=0.829, f1_score=0.816563115867831)
confusion matrix: [[175, 144], [27, 654]]
reporting runs/2024-12-19T22:05:18/results.toml
reporting runs/2024-12-19T22:05:18/confusion_matrix.csv
reporting runs/2024-12-19T22:05:18/weights.csv
