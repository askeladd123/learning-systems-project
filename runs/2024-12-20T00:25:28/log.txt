creating new run in runs/2024-12-20T00:25:28
reporting parameters in runs/2024-12-20T00:25:28/params.toml, values:
{'epochs': 150, 'number_of_clauses': 500, 't': 200, 's': 2.7001431109237517, 'depth': 3, 'hypervector_size': 256, 'hypervector_bits': 2, 'message_size': 256, 'message_bits': 2, 'double_hashing': False, 'max_included_literals': 16}
loading dataset from /home/ask/skole-learning-systems/attempt1/data/3x3_medium.csv
hashing dataset
saving dataset report to runs/2024-12-20T00:25:28/dataset.toml, content:
{'filename': '/home/ask/skole-learning-systems/attempt1/data/3x3_medium.csv', 'hash-blake2b': 'e9bf73e53fde757aee03a9898821212a0b3ffc12b8ac80471fda9e14e5c6d7ecd20c3cf42daf290055e4d53e56700ff350d4ae6970c2f5d38736556be10fa3de', 'dimensions': 3, 'rows': 10000}
X_train shape: (9000,)
X_test shape: (1000,)
Creating training data
bytecode dump:
>          0	NOP(arg=None, lineno=72)
           2	RESUME(arg=0, lineno=72)
           4	LOAD_GLOBAL(arg=1, lineno=75)
          14	LOAD_FAST(arg=1, lineno=75)
          16	LOAD_ATTR(arg=2, lineno=75)
          36	LOAD_CONST(arg=1, lineno=75)
          38	BINARY_SUBSCR(arg=None, lineno=75)
          42	CALL(arg=1, lineno=75)
          50	GET_ITER(arg=None, lineno=75)
>         52	FOR_ITER(arg=50, lineno=75)
          56	STORE_FAST(arg=2, lineno=75)
          58	LOAD_GLOBAL(arg=1, lineno=76)
          68	LOAD_FAST(arg=0, lineno=76)
          70	LOAD_FAST(arg=0, lineno=76)
          72	LOAD_CONST(arg=2, lineno=76)
          74	BINARY_OP(arg=5, lineno=76)
          78	CALL(arg=2, lineno=76)
          86	GET_ITER(arg=None, lineno=76)
>         88	FOR_ITER(arg=30, lineno=76)
          92	STORE_FAST(arg=3, lineno=76)
          94	LOAD_FAST(arg=3, lineno=77)
          96	LOAD_CONST(arg=3, lineno=77)
          98	BINARY_OP(arg=2, lineno=77)
         102	STORE_FAST(arg=4, lineno=77)
         104	LOAD_FAST(arg=3, lineno=78)
         106	LOAD_CONST(arg=3, lineno=78)
         108	BINARY_OP(arg=6, lineno=78)
         112	STORE_FAST(arg=5, lineno=78)
         114	LOAD_FAST(arg=1, lineno=79)
         116	LOAD_FAST(arg=2, lineno=79)
         118	LOAD_FAST(arg=4, lineno=79)
         120	BUILD_TUPLE(arg=2, lineno=79)
         122	COPY(arg=2, lineno=79)
         124	COPY(arg=2, lineno=79)
         126	BINARY_SUBSCR(arg=None, lineno=79)
         130	LOAD_CONST(arg=4, lineno=79)
         132	LOAD_FAST(arg=5, lineno=79)
         134	BINARY_OP(arg=3, lineno=79)
         138	BINARY_OP(arg=20, lineno=79)
         142	SWAP(arg=3, lineno=79)
         144	SWAP(arg=2, lineno=79)
         146	STORE_SUBSCR(arg=None, lineno=79)
         150	JUMP_BACKWARD(arg=32, lineno=79)
>        152	END_FOR(arg=None, lineno=76)
         154	JUMP_BACKWARD(arg=52, lineno=76)
>        156	END_FOR(arg=None, lineno=75)
         158	RETURN_CONST(arg=0, lineno=75)
pending: deque([State(pc_initial=0 nstack_initial=0)])
stack: []
state.pc_initial: State(pc_initial=0 nstack_initial=0)
dispatch pc=0, inst=NOP(arg=None, lineno=72)
stack []
dispatch pc=2, inst=RESUME(arg=0, lineno=72)
stack []
dispatch pc=4, inst=LOAD_GLOBAL(arg=1, lineno=75)
stack []
dispatch pc=14, inst=LOAD_FAST(arg=1, lineno=75)
stack ['$null$4.1', '$4load_global.0']
dispatch pc=16, inst=LOAD_ATTR(arg=2, lineno=75)
stack ['$null$4.1', '$4load_global.0', '$X14.2']
dispatch pc=36, inst=LOAD_CONST(arg=1, lineno=75)
stack ['$null$4.1', '$4load_global.0', '$16load_attr.3']
dispatch pc=38, inst=BINARY_SUBSCR(arg=None, lineno=75)
stack ['$null$4.1', '$4load_global.0', '$16load_attr.3', '$const36.4']
dispatch pc=42, inst=CALL(arg=1, lineno=75)
stack ['$null$4.1', '$4load_global.0', '$38binary_subscr.5']
dispatch pc=50, inst=GET_ITER(arg=None, lineno=75)
stack ['$42call.6']
end state. edges=[Edge(pc=52, stack=('$50get_iter.7',), blockstack=(), npush=0)]
pending: deque([State(pc_initial=52 nstack_initial=1)])
stack: ['$phi52.0']
state.pc_initial: State(pc_initial=52 nstack_initial=1)
dispatch pc=52, inst=FOR_ITER(arg=50, lineno=75)
stack ['$phi52.0']
end state. edges=[Edge(pc=156, stack=('$phi52.0', '$52for_iter.2'), blockstack=(), npush=0), Edge(pc=56, stack=('$phi52.0', '$52for_iter.2'), blockstack=(), npush=0)]
pending: deque([State(pc_initial=156 nstack_initial=2), State(pc_initial=56 nstack_initial=2)])
stack: ['$phi156.0', '$phi156.1']
state.pc_initial: State(pc_initial=156 nstack_initial=2)
dispatch pc=156, inst=END_FOR(arg=None, lineno=75)
stack ['$phi156.0', '$phi156.1']
dispatch pc=158, inst=RETURN_CONST(arg=0, lineno=75)
stack []
end state. edges=[]
pending: deque([State(pc_initial=56 nstack_initial=2)])
stack: ['$phi56.0', '$phi56.1']
state.pc_initial: State(pc_initial=56 nstack_initial=2)
dispatch pc=56, inst=STORE_FAST(arg=2, lineno=75)
stack ['$phi56.0', '$phi56.1']
dispatch pc=58, inst=LOAD_GLOBAL(arg=1, lineno=76)
stack ['$phi56.0']
dispatch pc=68, inst=LOAD_FAST(arg=0, lineno=76)
stack ['$phi56.0', '$null$58.3', '$58load_global.2']
dispatch pc=70, inst=LOAD_FAST(arg=0, lineno=76)
stack ['$phi56.0', '$null$58.3', '$58load_global.2', '$hypervector_size68.4']
dispatch pc=72, inst=LOAD_CONST(arg=2, lineno=76)
stack ['$phi56.0', '$null$58.3', '$58load_global.2', '$hypervector_size68.4', '$hypervector_size70.5']
dispatch pc=74, inst=BINARY_OP(arg=5, lineno=76)
stack ['$phi56.0', '$null$58.3', '$58load_global.2', '$hypervector_size68.4', '$hypervector_size70.5', '$const72.6']
dispatch pc=78, inst=CALL(arg=2, lineno=76)
stack ['$phi56.0', '$null$58.3', '$58load_global.2', '$hypervector_size68.4', '$binop_mul74.7']
dispatch pc=86, inst=GET_ITER(arg=None, lineno=76)
stack ['$phi56.0', '$78call.8']
end state. edges=[Edge(pc=88, stack=('$phi56.0', '$86get_iter.9'), blockstack=(), npush=0)]
pending: deque([State(pc_initial=88 nstack_initial=2)])
stack: ['$phi88.0', '$phi88.1']
state.pc_initial: State(pc_initial=88 nstack_initial=2)
dispatch pc=88, inst=FOR_ITER(arg=30, lineno=76)
stack ['$phi88.0', '$phi88.1']
end state. edges=[Edge(pc=152, stack=('$phi88.0', '$phi88.1', '$88for_iter.3'), blockstack=(), npush=0), Edge(pc=92, stack=('$phi88.0', '$phi88.1', '$88for_iter.3'), blockstack=(), npush=0)]
pending: deque([State(pc_initial=152 nstack_initial=3), State(pc_initial=92 nstack_initial=3)])
stack: ['$phi152.0', '$phi152.1', '$phi152.2']
state.pc_initial: State(pc_initial=152 nstack_initial=3)
dispatch pc=152, inst=END_FOR(arg=None, lineno=76)
stack ['$phi152.0', '$phi152.1', '$phi152.2']
dispatch pc=154, inst=JUMP_BACKWARD(arg=52, lineno=76)
stack ['$phi152.0']
end state. edges=[Edge(pc=52, stack=('$phi152.0',), blockstack=(), npush=0)]
pending: deque([State(pc_initial=92 nstack_initial=3), State(pc_initial=52 nstack_initial=1)])
stack: ['$phi92.0', '$phi92.1', '$phi92.2']
state.pc_initial: State(pc_initial=92 nstack_initial=3)
dispatch pc=92, inst=STORE_FAST(arg=3, lineno=76)
stack ['$phi92.0', '$phi92.1', '$phi92.2']
dispatch pc=94, inst=LOAD_FAST(arg=3, lineno=77)
stack ['$phi92.0', '$phi92.1']
dispatch pc=96, inst=LOAD_CONST(arg=3, lineno=77)
stack ['$phi92.0', '$phi92.1', '$k94.3']
dispatch pc=98, inst=BINARY_OP(arg=2, lineno=77)
stack ['$phi92.0', '$phi92.1', '$k94.3', '$const96.4']
dispatch pc=102, inst=STORE_FAST(arg=4, lineno=77)
stack ['$phi92.0', '$phi92.1', '$binop_floordiv98.5']
dispatch pc=104, inst=LOAD_FAST(arg=3, lineno=78)
stack ['$phi92.0', '$phi92.1']
dispatch pc=106, inst=LOAD_CONST(arg=3, lineno=78)
stack ['$phi92.0', '$phi92.1', '$k104.6']
dispatch pc=108, inst=BINARY_OP(arg=6, lineno=78)
stack ['$phi92.0', '$phi92.1', '$k104.6', '$const106.7']
dispatch pc=112, inst=STORE_FAST(arg=5, lineno=78)
stack ['$phi92.0', '$phi92.1', '$binop_mod108.8']
dispatch pc=114, inst=LOAD_FAST(arg=1, lineno=79)
stack ['$phi92.0', '$phi92.1']
dispatch pc=116, inst=LOAD_FAST(arg=2, lineno=79)
stack ['$phi92.0', '$phi92.1', '$X114.9']
dispatch pc=118, inst=LOAD_FAST(arg=4, lineno=79)
stack ['$phi92.0', '$phi92.1', '$X114.9', '$i116.10']
dispatch pc=120, inst=BUILD_TUPLE(arg=2, lineno=79)
stack ['$phi92.0', '$phi92.1', '$X114.9', '$i116.10', '$chunk118.11']
dispatch pc=122, inst=COPY(arg=2, lineno=79)
stack ['$phi92.0', '$phi92.1', '$X114.9', '$120build_tuple.12']
dispatch pc=124, inst=COPY(arg=2, lineno=79)
stack ['$phi92.0', '$phi92.1', '$X114.9', '$120build_tuple.12', '$X114.9']
dispatch pc=126, inst=BINARY_SUBSCR(arg=None, lineno=79)
stack ['$phi92.0', '$phi92.1', '$X114.9', '$120build_tuple.12', '$X114.9', '$120build_tuple.12']
dispatch pc=130, inst=LOAD_CONST(arg=4, lineno=79)
stack ['$phi92.0', '$phi92.1', '$X114.9', '$120build_tuple.12', '$126binary_subscr.13']
dispatch pc=132, inst=LOAD_FAST(arg=5, lineno=79)
stack ['$phi92.0', '$phi92.1', '$X114.9', '$120build_tuple.12', '$126binary_subscr.13', '$const130.14']
dispatch pc=134, inst=BINARY_OP(arg=3, lineno=79)
stack ['$phi92.0', '$phi92.1', '$X114.9', '$120build_tuple.12', '$126binary_subscr.13', '$const130.14', '$pos132.15']
dispatch pc=138, inst=BINARY_OP(arg=20, lineno=79)
stack ['$phi92.0', '$phi92.1', '$X114.9', '$120build_tuple.12', '$126binary_subscr.13', '$binop_lshift134.16']
dispatch pc=142, inst=SWAP(arg=3, lineno=79)
stack ['$phi92.0', '$phi92.1', '$X114.9', '$120build_tuple.12', '$binop_ior138.17']
dispatch pc=144, inst=SWAP(arg=2, lineno=79)
stack ['$phi92.0', '$phi92.1', '$binop_ior138.17', '$120build_tuple.12', '$X114.9']
dispatch pc=146, inst=STORE_SUBSCR(arg=None, lineno=79)
stack ['$phi92.0', '$phi92.1', '$binop_ior138.17', '$X114.9', '$120build_tuple.12']
dispatch pc=150, inst=JUMP_BACKWARD(arg=32, lineno=79)
stack ['$phi92.0', '$phi92.1']
end state. edges=[Edge(pc=88, stack=('$phi92.0', '$phi92.1'), blockstack=(), npush=0)]
pending: deque([State(pc_initial=52 nstack_initial=1), State(pc_initial=88 nstack_initial=2)])
pending: deque([State(pc_initial=88 nstack_initial=2)])
-------------------------Prune PHIs-------------------------
Used_phis: defaultdict(<class 'set'>,
            {State(pc_initial=0 nstack_initial=0): set(),
             State(pc_initial=52 nstack_initial=1): {'$phi52.0'},
             State(pc_initial=56 nstack_initial=2): {'$phi56.1'},
             State(pc_initial=88 nstack_initial=2): {'$phi88.1'},
             State(pc_initial=92 nstack_initial=3): {'$phi92.2'},
             State(pc_initial=152 nstack_initial=3): set(),
             State(pc_initial=156 nstack_initial=2): set()})
defmap: {'$phi152.2': State(pc_initial=88 nstack_initial=2),
 '$phi156.1': State(pc_initial=52 nstack_initial=1),
 '$phi52.0': State(pc_initial=0 nstack_initial=0),
 '$phi56.1': State(pc_initial=52 nstack_initial=1),
 '$phi88.1': State(pc_initial=56 nstack_initial=2),
 '$phi92.2': State(pc_initial=88 nstack_initial=2)}
phismap: defaultdict(<class 'set'>,
            {'$phi152.0': {('$phi88.0', State(pc_initial=88 nstack_initial=2))},
             '$phi152.1': {('$phi88.1', State(pc_initial=88 nstack_initial=2))},
             '$phi152.2': {('$88for_iter.3',
                            State(pc_initial=88 nstack_initial=2))},
             '$phi156.0': {('$phi52.0', State(pc_initial=52 nstack_initial=1))},
             '$phi156.1': {('$52for_iter.2',
                            State(pc_initial=52 nstack_initial=1))},
             '$phi52.0': {('$50get_iter.7',
                           State(pc_initial=0 nstack_initial=0)),
                          ('$phi152.0',
                           State(pc_initial=152 nstack_initial=3))},
             '$phi56.0': {('$phi52.0', State(pc_initial=52 nstack_initial=1))},
             '$phi56.1': {('$52for_iter.2',
                           State(pc_initial=52 nstack_initial=1))},
             '$phi88.0': {('$phi56.0', State(pc_initial=56 nstack_initial=2)),
                          ('$phi92.0', State(pc_initial=92 nstack_initial=3))},
             '$phi88.1': {('$86get_iter.9',
                           State(pc_initial=56 nstack_initial=2)),
                          ('$phi92.1', State(pc_initial=92 nstack_initial=3))},
             '$phi92.0': {('$phi88.0', State(pc_initial=88 nstack_initial=2))},
             '$phi92.1': {('$phi88.1', State(pc_initial=88 nstack_initial=2))},
             '$phi92.2': {('$88for_iter.3',
                           State(pc_initial=88 nstack_initial=2))}})
changing phismap: defaultdict(<class 'set'>,
            {'$phi152.0': {('$phi56.0', State(pc_initial=56 nstack_initial=2)),
                           ('$phi92.0', State(pc_initial=92 nstack_initial=3))},
             '$phi152.1': {('$86get_iter.9',
                            State(pc_initial=56 nstack_initial=2)),
                           ('$phi92.1', State(pc_initial=92 nstack_initial=3))},
             '$phi152.2': {('$88for_iter.3',
                            State(pc_initial=88 nstack_initial=2))},
             '$phi156.0': {('$50get_iter.7',
                            State(pc_initial=0 nstack_initial=0)),
                           ('$phi152.0',
                            State(pc_initial=152 nstack_initial=3))},
             '$phi156.1': {('$52for_iter.2',
                            State(pc_initial=52 nstack_initial=1))},
             '$phi52.0': {('$50get_iter.7',
                           State(pc_initial=0 nstack_initial=0)),
                          ('$phi56.0', State(pc_initial=56 nstack_initial=2)),
                          ('$phi92.0', State(pc_initial=92 nstack_initial=3))},
             '$phi56.0': {('$50get_iter.7',
                           State(pc_initial=0 nstack_initial=0)),
                          ('$phi56.0', State(pc_initial=56 nstack_initial=2)),
                          ('$phi92.0', State(pc_initial=92 nstack_initial=3))},
             '$phi56.1': {('$52for_iter.2',
                           State(pc_initial=52 nstack_initial=1))},
             '$phi88.0': {('$50get_iter.7',
                           State(pc_initial=0 nstack_initial=0)),
                          ('$phi88.0', State(pc_initial=88 nstack_initial=2))},
             '$phi88.1': {('$86get_iter.9',
                           State(pc_initial=56 nstack_initial=2)),
                          ('$phi88.1', State(pc_initial=88 nstack_initial=2))},
             '$phi92.0': {('$50get_iter.7',
                           State(pc_initial=0 nstack_initial=0))},
             '$phi92.1': {('$86get_iter.9',
                           State(pc_initial=56 nstack_initial=2))},
             '$phi92.2': {('$88for_iter.3',
                           State(pc_initial=88 nstack_initial=2))}})
changing phismap: defaultdict(<class 'set'>,
            {'$phi152.0': {('$50get_iter.7',
                            State(pc_initial=0 nstack_initial=0))},
             '$phi152.1': {('$86get_iter.9',
                            State(pc_initial=56 nstack_initial=2))},
             '$phi152.2': {('$88for_iter.3',
                            State(pc_initial=88 nstack_initial=2))},
             '$phi156.0': {('$50get_iter.7',
                            State(pc_initial=0 nstack_initial=0))},
             '$phi156.1': {('$52for_iter.2',
                            State(pc_initial=52 nstack_initial=1))},
             '$phi52.0': {('$50get_iter.7',
                           State(pc_initial=0 nstack_initial=0))},
             '$phi56.0': {('$50get_iter.7',
                           State(pc_initial=0 nstack_initial=0))},
             '$phi56.1': {('$52for_iter.2',
                           State(pc_initial=52 nstack_initial=1))},
             '$phi88.0': {('$50get_iter.7',
                           State(pc_initial=0 nstack_initial=0))},
             '$phi88.1': {('$86get_iter.9',
                           State(pc_initial=56 nstack_initial=2))},
             '$phi92.0': {('$50get_iter.7',
                           State(pc_initial=0 nstack_initial=0))},
             '$phi92.1': {('$86get_iter.9',
                           State(pc_initial=56 nstack_initial=2))},
             '$phi92.2': {('$88for_iter.3',
                           State(pc_initial=88 nstack_initial=2))}})
changing phismap: defaultdict(<class 'set'>,
            {'$phi152.0': {('$50get_iter.7',
                            State(pc_initial=0 nstack_initial=0))},
             '$phi152.1': {('$86get_iter.9',
                            State(pc_initial=56 nstack_initial=2))},
             '$phi152.2': {('$88for_iter.3',
                            State(pc_initial=88 nstack_initial=2))},
             '$phi156.0': {('$50get_iter.7',
                            State(pc_initial=0 nstack_initial=0))},
             '$phi156.1': {('$52for_iter.2',
                            State(pc_initial=52 nstack_initial=1))},
             '$phi52.0': {('$50get_iter.7',
                           State(pc_initial=0 nstack_initial=0))},
             '$phi56.0': {('$50get_iter.7',
                           State(pc_initial=0 nstack_initial=0))},
             '$phi56.1': {('$52for_iter.2',
                           State(pc_initial=52 nstack_initial=1))},
             '$phi88.0': {('$50get_iter.7',
                           State(pc_initial=0 nstack_initial=0))},
             '$phi88.1': {('$86get_iter.9',
                           State(pc_initial=56 nstack_initial=2))},
             '$phi92.0': {('$50get_iter.7',
                           State(pc_initial=0 nstack_initial=0))},
             '$phi92.1': {('$86get_iter.9',
                           State(pc_initial=56 nstack_initial=2))},
             '$phi92.2': {('$88for_iter.3',
                           State(pc_initial=88 nstack_initial=2))}})
keep phismap: {'$phi52.0': {('$50get_iter.7', State(pc_initial=0 nstack_initial=0))},
 '$phi56.1': {('$52for_iter.2', State(pc_initial=52 nstack_initial=1))},
 '$phi88.1': {('$86get_iter.9', State(pc_initial=56 nstack_initial=2))},
 '$phi92.2': {('$88for_iter.3', State(pc_initial=88 nstack_initial=2))}}
new_out: defaultdict(<class 'dict'>,
            {State(pc_initial=0 nstack_initial=0): {'$phi52.0': '$50get_iter.7'},
             State(pc_initial=52 nstack_initial=1): {'$phi56.1': '$52for_iter.2'},
             State(pc_initial=56 nstack_initial=2): {'$phi88.1': '$86get_iter.9'},
             State(pc_initial=88 nstack_initial=2): {'$phi92.2': '$88for_iter.3'}})
----------------------DONE Prune PHIs-----------------------
block_infos State(pc_initial=0 nstack_initial=0):
AdaptBlockInfo(insts=((0, {}), (2, {}), (4, {'idx': 0, 'res': '$4load_global.0'}), (14, {'res': '$X14.2'}), (16, {'item': '$X14.2', 'res': '$16load_attr.3'}), (36, {'res': '$const36.4'}), (38, {'index': '$const36.4', 'target': '$16load_attr.3', 'res': '$38binary_subscr.5'}), (42, {'func': '$4load_global.0', 'args': ['$38binary_subscr.5'], 'kw_names': None, 'res': '$42call.6'}), (50, {'value': '$42call.6', 'res': '$50get_iter.7'})), outgoing_phis={'$phi52.0': '$50get_iter.7'}, blockstack=(), active_try_block=None, outgoing_edgepushed={52: ('$50get_iter.7',)})
block_infos State(pc_initial=52 nstack_initial=1):
AdaptBlockInfo(insts=((52, {'iterator': '$phi52.0', 'pair': '$52for_iter.1', 'indval': '$52for_iter.2', 'pred': '$52for_iter.3'}),), outgoing_phis={'$phi56.1': '$52for_iter.2'}, blockstack=(), active_try_block=None, outgoing_edgepushed={156: ('$phi52.0', '$52for_iter.2'), 56: ('$phi52.0', '$52for_iter.2')})
block_infos State(pc_initial=56 nstack_initial=2):
AdaptBlockInfo(insts=((56, {'value': '$phi56.1'}), (58, {'idx': 0, 'res': '$58load_global.2'}), (68, {'res': '$hypervector_size68.4'}), (70, {'res': '$hypervector_size70.5'}), (72, {'res': '$const72.6'}), (74, {'op': '*', 'lhs': '$hypervector_size70.5', 'rhs': '$const72.6', 'res': '$binop_mul74.7'}), (78, {'func': '$58load_global.2', 'args': ['$hypervector_size68.4', '$binop_mul74.7'], 'kw_names': None, 'res': '$78call.8'}), (86, {'value': '$78call.8', 'res': '$86get_iter.9'})), outgoing_phis={'$phi88.1': '$86get_iter.9'}, blockstack=(), active_try_block=None, outgoing_edgepushed={88: ('$phi56.0', '$86get_iter.9')})
block_infos State(pc_initial=88 nstack_initial=2):
AdaptBlockInfo(insts=((88, {'iterator': '$phi88.1', 'pair': '$88for_iter.2', 'indval': '$88for_iter.3', 'pred': '$88for_iter.4'}),), outgoing_phis={'$phi92.2': '$88for_iter.3'}, blockstack=(), active_try_block=None, outgoing_edgepushed={152: ('$phi88.0', '$phi88.1', '$88for_iter.3'), 92: ('$phi88.0', '$phi88.1', '$88for_iter.3')})
block_infos State(pc_initial=92 nstack_initial=3):
AdaptBlockInfo(insts=((92, {'value': '$phi92.2'}), (94, {'res': '$k94.3'}), (96, {'res': '$const96.4'}), (98, {'op': '//', 'lhs': '$k94.3', 'rhs': '$const96.4', 'res': '$binop_floordiv98.5'}), (102, {'value': '$binop_floordiv98.5'}), (104, {'res': '$k104.6'}), (106, {'res': '$const106.7'}), (108, {'op': '%', 'lhs': '$k104.6', 'rhs': '$const106.7', 'res': '$binop_mod108.8'}), (112, {'value': '$binop_mod108.8'}), (114, {'res': '$X114.9'}), (116, {'res': '$i116.10'}), (118, {'res': '$chunk118.11'}), (120, {'items': ['$i116.10', '$chunk118.11'], 'res': '$120build_tuple.12'}), (126, {'index': '$120build_tuple.12', 'target': '$X114.9', 'res': '$126binary_subscr.13'}), (130, {'res': '$const130.14'}), (132, {'res': '$pos132.15'}), (134, {'op': '<<', 'lhs': '$const130.14', 'rhs': '$pos132.15', 'res': '$binop_lshift134.16'}), (138, {'op': '|=', 'lhs': '$126binary_subscr.13', 'rhs': '$binop_lshift134.16', 'res': '$binop_ior138.17'}), (146, {'target': '$X114.9', 'index': '$120build_tuple.12', 'value': '$binop_ior138.17'}), (150, {})), outgoing_phis={}, blockstack=(), active_try_block=None, outgoing_edgepushed={88: ('$phi92.0', '$phi92.1')})
block_infos State(pc_initial=152 nstack_initial=3):
AdaptBlockInfo(insts=((154, {}),), outgoing_phis={}, blockstack=(), active_try_block=None, outgoing_edgepushed={52: ('$phi152.0',)})
block_infos State(pc_initial=156 nstack_initial=2):
AdaptBlockInfo(insts=((158, {'retval': '$const158.2', 'castval': '$158return_const.3'}),), outgoing_phis={}, blockstack=(), active_try_block=None, outgoing_edgepushed={})
label 0:
    hypervector_size = arg(0, name=hypervector_size) ['hypervector_size']
    X = arg(1, name=X)                       ['X']
    $4load_global.0 = global(range: <class 'range'>) ['$4load_global.0']
    $16load_attr.3 = getattr(value=X, attr=shape) ['$16load_attr.3', 'X']
    $const36.4 = const(int, 0)               ['$const36.4']
    $38binary_subscr.5 = getitem(value=$16load_attr.3, index=$const36.4, fn=<built-in function getitem>) ['$16load_attr.3', '$38binary_subscr.5', '$const36.4']
    $42call.6 = call $4load_global.0($38binary_subscr.5, func=$4load_global.0, args=[Var($38binary_subscr.5, graphs.py:75)], kws=(), vararg=None, varkwarg=None, target=None) ['$38binary_subscr.5', '$42call.6', '$4load_global.0']
    $50get_iter.7 = getiter(value=$42call.6) ['$42call.6', '$50get_iter.7']
    $phi52.0 = $50get_iter.7                 ['$50get_iter.7', '$phi52.0']
    jump 52                                  []
label 52:
    $52for_iter.1 = iternext(value=$phi52.0) ['$52for_iter.1', '$phi52.0']
    $52for_iter.2 = pair_first(value=$52for_iter.1) ['$52for_iter.1', '$52for_iter.2']
    $52for_iter.3 = pair_second(value=$52for_iter.1) ['$52for_iter.1', '$52for_iter.3']
    $phi56.1 = $52for_iter.2                 ['$52for_iter.2', '$phi56.1']
    branch $52for_iter.3, 56, 156            ['$52for_iter.3']
label 56:
    i = $phi56.1                             ['$phi56.1', 'i']
    $58load_global.2 = global(range: <class 'range'>) ['$58load_global.2']
    $const72.6 = const(int, 2)               ['$const72.6']
    $binop_mul74.7 = hypervector_size * $const72.6 ['$binop_mul74.7', '$const72.6', 'hypervector_size']
    $78call.8 = call $58load_global.2(hypervector_size, $binop_mul74.7, func=$58load_global.2, args=[Var(hypervector_size, graphs.py:72), Var($binop_mul74.7, graphs.py:76)], kws=(), vararg=None, varkwarg=None, target=None) ['$58load_global.2', '$78call.8', '$binop_mul74.7', 'hypervector_size']
    $86get_iter.9 = getiter(value=$78call.8) ['$78call.8', '$86get_iter.9']
    $phi88.1 = $86get_iter.9                 ['$86get_iter.9', '$phi88.1']
    jump 88                                  []
label 88:
    $88for_iter.2 = iternext(value=$phi88.1) ['$88for_iter.2', '$phi88.1']
    $88for_iter.3 = pair_first(value=$88for_iter.2) ['$88for_iter.2', '$88for_iter.3']
    $88for_iter.4 = pair_second(value=$88for_iter.2) ['$88for_iter.2', '$88for_iter.4']
    $phi92.2 = $88for_iter.3                 ['$88for_iter.3', '$phi92.2']
    branch $88for_iter.4, 92, 152            ['$88for_iter.4']
label 92:
    k = $phi92.2                             ['$phi92.2', 'k']
    $const96.4 = const(int, 32)              ['$const96.4']
    chunk = k // $const96.4                  ['$const96.4', 'chunk', 'k']
    $const106.7 = const(int, 32)             ['$const106.7']
    pos = k % $const106.7                    ['$const106.7', 'k', 'pos']
    $120build_tuple.12 = build_tuple(items=[Var(i, graphs.py:75), Var(chunk, graphs.py:77)]) ['$120build_tuple.12', 'chunk', 'i']
    $126binary_subscr.13 = getitem(value=X, index=$120build_tuple.12, fn=<built-in function getitem>) ['$120build_tuple.12', '$126binary_subscr.13', 'X']
    $const130.14 = const(int, 1)             ['$const130.14']
    $binop_lshift134.16 = $const130.14 << pos ['$binop_lshift134.16', '$const130.14', 'pos']
    $binop_ior138.17 = inplace_binop(fn=<built-in function ior>, immutable_fn=<built-in function or_>, lhs=$126binary_subscr.13, rhs=$binop_lshift134.16, static_lhs=Undefined, static_rhs=Undefined) ['$126binary_subscr.13', '$binop_ior138.17', '$binop_lshift134.16']
    X[$120build_tuple.12] = $binop_ior138.17 ['$120build_tuple.12', '$binop_ior138.17', 'X']
    jump 88                                  []
label 152:
    jump 52                                  []
label 156:
    $const158.2 = const(NoneType, None)      ['$const158.2']
    $158return_const.3 = cast(value=$const158.2) ['$158return_const.3', '$const158.2']
    return $158return_const.3                ['$158return_const.3']

==== SSA block analysis pass on 0
Running <numba.core.ssa._GatherDefsHandler object at 0x78e0964f1af0>
on stmt: hypervector_size = arg(0, name=hypervector_size)
on stmt: X = arg(1, name=X)
on stmt: $4load_global.0 = global(range: <class 'range'>)
on stmt: $16load_attr.3 = getattr(value=X, attr=shape)
on stmt: $const36.4 = const(int, 0)
on stmt: $38binary_subscr.5 = static_getitem(value=$16load_attr.3, index=0, index_var=$const36.4, fn=<built-in function getitem>)
on stmt: $42call.6 = call $4load_global.0($38binary_subscr.5, func=$4load_global.0, args=[Var($38binary_subscr.5, graphs.py:75)], kws=(), vararg=None, varkwarg=None, target=None)
on stmt: $50get_iter.7 = getiter(value=$42call.6)
on stmt: $phi52.0 = $50get_iter.7
on stmt: jump 52
==== SSA block analysis pass on 52
Running <numba.core.ssa._GatherDefsHandler object at 0x78e0964f1af0>
on stmt: $52for_iter.1 = iternext(value=$phi52.0)
on stmt: $52for_iter.2 = pair_first(value=$52for_iter.1)
on stmt: $52for_iter.3 = pair_second(value=$52for_iter.1)
on stmt: $phi56.1 = $52for_iter.2
on stmt: branch $52for_iter.3, 56, 156
==== SSA block analysis pass on 56
Running <numba.core.ssa._GatherDefsHandler object at 0x78e0964f1af0>
on stmt: i = $phi56.1
on stmt: $58load_global.2 = global(range: <class 'range'>)
on stmt: $const72.6 = const(int, 2)
on stmt: $binop_mul74.7 = hypervector_size * $const72.6
on stmt: $78call.8 = call $58load_global.2(hypervector_size, $binop_mul74.7, func=$58load_global.2, args=[Var(hypervector_size, graphs.py:72), Var($binop_mul74.7, graphs.py:76)], kws=(), vararg=None, varkwarg=None, target=None)
on stmt: $86get_iter.9 = getiter(value=$78call.8)
on stmt: $phi88.1 = $86get_iter.9
on stmt: jump 88
==== SSA block analysis pass on 88
Running <numba.core.ssa._GatherDefsHandler object at 0x78e0964f1af0>
on stmt: $88for_iter.2 = iternext(value=$phi88.1)
on stmt: $88for_iter.3 = pair_first(value=$88for_iter.2)
on stmt: $88for_iter.4 = pair_second(value=$88for_iter.2)
on stmt: $phi92.2 = $88for_iter.3
on stmt: branch $88for_iter.4, 92, 152
==== SSA block analysis pass on 92
Running <numba.core.ssa._GatherDefsHandler object at 0x78e0964f1af0>
on stmt: k = $phi92.2
on stmt: $const96.4 = const(int, 32)
on stmt: chunk = k // $const96.4
on stmt: $const106.7 = const(int, 32)
on stmt: pos = k % $const106.7
on stmt: $120build_tuple.12 = build_tuple(items=[Var(i, graphs.py:75), Var(chunk, graphs.py:77)])
on stmt: $126binary_subscr.13 = getitem(value=X, index=$120build_tuple.12, fn=<built-in function getitem>)
on stmt: $const130.14 = const(int, 1)
on stmt: $binop_lshift134.16 = $const130.14 << pos
on stmt: $binop_ior138.17 = inplace_binop(fn=<built-in function ior>, immutable_fn=<built-in function or_>, lhs=$126binary_subscr.13, rhs=$binop_lshift134.16, static_lhs=Undefined, static_rhs=Undefined)
on stmt: X[$120build_tuple.12] = $binop_ior138.17
on stmt: jump 88
==== SSA block analysis pass on 152
Running <numba.core.ssa._GatherDefsHandler object at 0x78e0964f1af0>
on stmt: jump 52
==== SSA block analysis pass on 156
Running <numba.core.ssa._GatherDefsHandler object at 0x78e0964f1af0>
on stmt: $const158.2 = const(NoneType, None)
on stmt: $158return_const.3 = cast(value=$const158.2)
on stmt: return $158return_const.3
defs defaultdict(<class 'list'>,
            {'$120build_tuple.12': [(<numba.core.ir.Assign object at 0x78e0964f3bc0>,
                                     92)],
             '$126binary_subscr.13': [(<numba.core.ir.Assign object at 0x78e0964f3d10>,
                                       92)],
             '$158return_const.3': [(<numba.core.ir.Assign object at 0x78e0964f2ea0>,
                                     156)],
             '$16load_attr.3': [(<numba.core.ir.Assign object at 0x78e0964f0da0>,
                                 0)],
             '$38binary_subscr.5': [(<numba.core.ir.Assign object at 0x78e0964f1b50>,
                                     0)],
             '$42call.6': [(<numba.core.ir.Assign object at 0x78e0964f2450>,
                            0)],
             '$4load_global.0': [(<numba.core.ir.Assign object at 0x78e0964f2090>,
                                  0)],
             '$50get_iter.7': [(<numba.core.ir.Assign object at 0x78e0964f24e0>,
                                0)],
             '$52for_iter.1': [(<numba.core.ir.Assign object at 0x78e0964f2690>,
                                52)],
             '$52for_iter.2': [(<numba.core.ir.Assign object at 0x78e0964f2720>,
                                52)],
             '$52for_iter.3': [(<numba.core.ir.Assign object at 0x78e0964f27b0>,
                                52)],
             '$58load_global.2': [(<numba.core.ir.Assign object at 0x78e0964f29c0>,
                                   56)],
             '$78call.8': [(<numba.core.ir.Assign object at 0x78e0964f2d80>,
                            56)],
             '$86get_iter.9': [(<numba.core.ir.Assign object at 0x78e0964f2e10>,
                                56)],
             '$88for_iter.2': [(<numba.core.ir.Assign object at 0x78e0964f2f90>,
                                88)],
             '$88for_iter.3': [(<numba.core.ir.Assign object at 0x78e0964f3050>,
                                88)],
             '$88for_iter.4': [(<numba.core.ir.Assign object at 0x78e0964f3140>,
                                88)],
             '$binop_ior138.17': [(<numba.core.ir.Assign object at 0x78e0965181a0>,
                                   92)],
             '$binop_lshift134.16': [(<numba.core.ir.Assign object at 0x78e096518080>,
                                      92)],
             '$binop_mul74.7': [(<numba.core.ir.Assign object at 0x78e0964f2c90>,
                                 56)],
             '$const106.7': [(<numba.core.ir.Assign object at 0x78e0964f3980>,
                              92)],
             '$const130.14': [(<numba.core.ir.Assign object at 0x78e0964f3e00>,
                               92)],
             '$const158.2': [(<numba.core.ir.Assign object at 0x78e0964f0f50>,
                              156)],
             '$const36.4': [(<numba.core.ir.Assign object at 0x78e0964f2150>,
                             0)],
             '$const72.6': [(<numba.core.ir.Assign object at 0x78e0964f2ba0>,
                             56)],
             '$const96.4': [(<numba.core.ir.Assign object at 0x78e0964f3560>,
                             92)],
             '$phi52.0': [(<numba.core.ir.Assign object at 0x78e0964f0d70>, 0)],
             '$phi56.1': [(<numba.core.ir.Assign object at 0x78e0964f2600>,
                           52)],
             '$phi88.1': [(<numba.core.ir.Assign object at 0x78e0964f2ae0>,
                           56)],
             '$phi92.2': [(<numba.core.ir.Assign object at 0x78e0964f31d0>,
                           88)],
             'X': [(<numba.core.ir.Assign object at 0x78e0964f22a0>, 0)],
             'chunk': [(<numba.core.ir.Assign object at 0x78e0964f36b0>, 92)],
             'hypervector_size': [(<numba.core.ir.Assign object at 0x78e0964f21b0>,
                                   0)],
             'i': [(<numba.core.ir.Assign object at 0x78e0964f2900>, 56)],
             'k': [(<numba.core.ir.Assign object at 0x78e0964f3350>, 92)],
             'pos': [(<numba.core.ir.Assign object at 0x78e0964f3ad0>, 92)]})
SSA violators <numba.core.utils.OrderedSet object at 0x78e0964f1af0>
bytecode dump:
>          0	NOP(arg=None, lineno=121)
           2	RESUME(arg=0, lineno=121)
           4	LOAD_FAST(arg=0, lineno=124)
           6	LOAD_FAST(arg=4, lineno=124)
           8	LOAD_CONST(arg=0, lineno=124)
          10	LOAD_CONST(arg=0, lineno=124)
          12	BUILD_SLICE(arg=2, lineno=124)
          14	BUILD_TUPLE(arg=2, lineno=124)
          16	BINARY_SUBSCR(arg=None, lineno=124)
          20	GET_ITER(arg=None, lineno=124)
>         22	FOR_ITER(arg=71, lineno=124)
          26	STORE_FAST(arg=6, lineno=124)
          28	LOAD_FAST(arg=6, lineno=125)
          30	LOAD_CONST(arg=1, lineno=125)
          32	BINARY_OP(arg=2, lineno=125)
          36	STORE_FAST(arg=7, lineno=125)
          38	LOAD_FAST(arg=6, lineno=126)
          40	LOAD_CONST(arg=1, lineno=126)
          42	BINARY_OP(arg=6, lineno=126)
          46	STORE_FAST(arg=8, lineno=126)
          48	LOAD_FAST(arg=5, lineno=128)
          50	LOAD_FAST(arg=2, lineno=128)
          52	LOAD_FAST(arg=3, lineno=128)
          54	BINARY_OP(arg=0, lineno=128)
          58	LOAD_FAST(arg=7, lineno=128)
          60	BUILD_TUPLE(arg=2, lineno=128)
          62	COPY(arg=2, lineno=128)
          64	COPY(arg=2, lineno=128)
          66	BINARY_SUBSCR(arg=None, lineno=128)
          70	LOAD_CONST(arg=2, lineno=128)
          72	LOAD_FAST(arg=8, lineno=128)
          74	BINARY_OP(arg=3, lineno=128)
          78	BINARY_OP(arg=20, lineno=128)
          82	SWAP(arg=3, lineno=128)
          84	SWAP(arg=2, lineno=128)
          86	STORE_SUBSCR(arg=None, lineno=128)
          90	LOAD_FAST(arg=6, lineno=130)
          92	LOAD_FAST(arg=1, lineno=130)
          94	BINARY_OP(arg=0, lineno=130)
          98	LOAD_CONST(arg=1, lineno=130)
         100	BINARY_OP(arg=2, lineno=130)
         104	STORE_FAST(arg=7, lineno=130)
         106	LOAD_FAST(arg=6, lineno=131)
         108	LOAD_FAST(arg=1, lineno=131)
         110	BINARY_OP(arg=0, lineno=131)
         114	LOAD_CONST(arg=1, lineno=131)
         116	BINARY_OP(arg=6, lineno=131)
         120	STORE_FAST(arg=8, lineno=131)
         122	LOAD_FAST(arg=5, lineno=132)
         124	LOAD_FAST(arg=2, lineno=132)
         126	LOAD_FAST(arg=3, lineno=132)
         128	BINARY_OP(arg=0, lineno=132)
         132	LOAD_FAST(arg=7, lineno=132)
         134	BUILD_TUPLE(arg=2, lineno=132)
         136	COPY(arg=2, lineno=132)
         138	COPY(arg=2, lineno=132)
         140	BINARY_SUBSCR(arg=None, lineno=132)
         144	LOAD_CONST(arg=2, lineno=132)
         146	LOAD_FAST(arg=8, lineno=132)
         148	BINARY_OP(arg=3, lineno=132)
         152	UNARY_INVERT(arg=None, lineno=132)
         154	BINARY_OP(arg=14, lineno=132)
         158	SWAP(arg=3, lineno=132)
         160	SWAP(arg=2, lineno=132)
         162	STORE_SUBSCR(arg=None, lineno=132)
         166	JUMP_BACKWARD(arg=73, lineno=132)
>        168	END_FOR(arg=None, lineno=124)
         170	RETURN_CONST(arg=0, lineno=124)
pending: deque([State(pc_initial=0 nstack_initial=0)])
stack: []
state.pc_initial: State(pc_initial=0 nstack_initial=0)
dispatch pc=0, inst=NOP(arg=None, lineno=121)
stack []
dispatch pc=2, inst=RESUME(arg=0, lineno=121)
stack []
dispatch pc=4, inst=LOAD_FAST(arg=0, lineno=124)
stack []
dispatch pc=6, inst=LOAD_FAST(arg=4, lineno=124)
stack ['$hypervectors4.0']
dispatch pc=8, inst=LOAD_CONST(arg=0, lineno=124)
stack ['$hypervectors4.0', '$symbol6.1']
dispatch pc=10, inst=LOAD_CONST(arg=0, lineno=124)
stack ['$hypervectors4.0', '$symbol6.1', '$const8.2']
dispatch pc=12, inst=BUILD_SLICE(arg=2, lineno=124)
stack ['$hypervectors4.0', '$symbol6.1', '$const8.2', '$const10.3']
dispatch pc=14, inst=BUILD_TUPLE(arg=2, lineno=124)
stack ['$hypervectors4.0', '$symbol6.1', '$12build_slice.5']
dispatch pc=16, inst=BINARY_SUBSCR(arg=None, lineno=124)
stack ['$hypervectors4.0', '$14build_tuple.6']
dispatch pc=20, inst=GET_ITER(arg=None, lineno=124)
stack ['$16binary_subscr.7']
end state. edges=[Edge(pc=22, stack=('$20get_iter.8',), blockstack=(), npush=0)]
pending: deque([State(pc_initial=22 nstack_initial=1)])
stack: ['$phi22.0']
state.pc_initial: State(pc_initial=22 nstack_initial=1)
dispatch pc=22, inst=FOR_ITER(arg=71, lineno=124)
stack ['$phi22.0']
end state. edges=[Edge(pc=168, stack=('$phi22.0', '$22for_iter.2'), blockstack=(), npush=0), Edge(pc=26, stack=('$phi22.0', '$22for_iter.2'), blockstack=(), npush=0)]
pending: deque([State(pc_initial=168 nstack_initial=2), State(pc_initial=26 nstack_initial=2)])
stack: ['$phi168.0', '$phi168.1']
state.pc_initial: State(pc_initial=168 nstack_initial=2)
dispatch pc=168, inst=END_FOR(arg=None, lineno=124)
stack ['$phi168.0', '$phi168.1']
dispatch pc=170, inst=RETURN_CONST(arg=0, lineno=124)
stack []
end state. edges=[]
pending: deque([State(pc_initial=26 nstack_initial=2)])
stack: ['$phi26.0', '$phi26.1']
state.pc_initial: State(pc_initial=26 nstack_initial=2)
dispatch pc=26, inst=STORE_FAST(arg=6, lineno=124)
stack ['$phi26.0', '$phi26.1']
dispatch pc=28, inst=LOAD_FAST(arg=6, lineno=125)
stack ['$phi26.0']
dispatch pc=30, inst=LOAD_CONST(arg=1, lineno=125)
stack ['$phi26.0', '$k28.2']
dispatch pc=32, inst=BINARY_OP(arg=2, lineno=125)
stack ['$phi26.0', '$k28.2', '$const30.3']
dispatch pc=36, inst=STORE_FAST(arg=7, lineno=125)
stack ['$phi26.0', '$binop_floordiv32.4']
dispatch pc=38, inst=LOAD_FAST(arg=6, lineno=126)
stack ['$phi26.0']
dispatch pc=40, inst=LOAD_CONST(arg=1, lineno=126)
stack ['$phi26.0', '$k38.5']
dispatch pc=42, inst=BINARY_OP(arg=6, lineno=126)
stack ['$phi26.0', '$k38.5', '$const40.6']
dispatch pc=46, inst=STORE_FAST(arg=8, lineno=126)
stack ['$phi26.0', '$binop_mod42.7']
dispatch pc=48, inst=LOAD_FAST(arg=5, lineno=128)
stack ['$phi26.0']
dispatch pc=50, inst=LOAD_FAST(arg=2, lineno=128)
stack ['$phi26.0', '$X48.8']
dispatch pc=52, inst=LOAD_FAST(arg=3, lineno=128)
stack ['$phi26.0', '$X48.8', '$graph_index50.9']
dispatch pc=54, inst=BINARY_OP(arg=0, lineno=128)
stack ['$phi26.0', '$X48.8', '$graph_index50.9', '$node52.10']
dispatch pc=58, inst=LOAD_FAST(arg=7, lineno=128)
stack ['$phi26.0', '$X48.8', '$binop_add54.11']
dispatch pc=60, inst=BUILD_TUPLE(arg=2, lineno=128)
stack ['$phi26.0', '$X48.8', '$binop_add54.11', '$chunk58.12']
dispatch pc=62, inst=COPY(arg=2, lineno=128)
stack ['$phi26.0', '$X48.8', '$60build_tuple.13']
dispatch pc=64, inst=COPY(arg=2, lineno=128)
stack ['$phi26.0', '$X48.8', '$60build_tuple.13', '$X48.8']
dispatch pc=66, inst=BINARY_SUBSCR(arg=None, lineno=128)
stack ['$phi26.0', '$X48.8', '$60build_tuple.13', '$X48.8', '$60build_tuple.13']
dispatch pc=70, inst=LOAD_CONST(arg=2, lineno=128)
stack ['$phi26.0', '$X48.8', '$60build_tuple.13', '$66binary_subscr.14']
dispatch pc=72, inst=LOAD_FAST(arg=8, lineno=128)
stack ['$phi26.0', '$X48.8', '$60build_tuple.13', '$66binary_subscr.14', '$const70.15']
dispatch pc=74, inst=BINARY_OP(arg=3, lineno=128)
stack ['$phi26.0', '$X48.8', '$60build_tuple.13', '$66binary_subscr.14', '$const70.15', '$pos72.16']
dispatch pc=78, inst=BINARY_OP(arg=20, lineno=128)
stack ['$phi26.0', '$X48.8', '$60build_tuple.13', '$66binary_subscr.14', '$binop_lshift74.17']
dispatch pc=82, inst=SWAP(arg=3, lineno=128)
stack ['$phi26.0', '$X48.8', '$60build_tuple.13', '$binop_ior78.18']
dispatch pc=84, inst=SWAP(arg=2, lineno=128)
stack ['$phi26.0', '$binop_ior78.18', '$60build_tuple.13', '$X48.8']
dispatch pc=86, inst=STORE_SUBSCR(arg=None, lineno=128)
stack ['$phi26.0', '$binop_ior78.18', '$X48.8', '$60build_tuple.13']
dispatch pc=90, inst=LOAD_FAST(arg=6, lineno=130)
stack ['$phi26.0']
dispatch pc=92, inst=LOAD_FAST(arg=1, lineno=130)
stack ['$phi26.0', '$k90.19']
dispatch pc=94, inst=BINARY_OP(arg=0, lineno=130)
stack ['$phi26.0', '$k90.19', '$hypervector_size92.20']
dispatch pc=98, inst=LOAD_CONST(arg=1, lineno=130)
stack ['$phi26.0', '$binop_add94.21']
dispatch pc=100, inst=BINARY_OP(arg=2, lineno=130)
stack ['$phi26.0', '$binop_add94.21', '$const98.22']
dispatch pc=104, inst=STORE_FAST(arg=7, lineno=130)
stack ['$phi26.0', '$binop_floordiv100.23']
dispatch pc=106, inst=LOAD_FAST(arg=6, lineno=131)
stack ['$phi26.0']
dispatch pc=108, inst=LOAD_FAST(arg=1, lineno=131)
stack ['$phi26.0', '$k106.24']
dispatch pc=110, inst=BINARY_OP(arg=0, lineno=131)
stack ['$phi26.0', '$k106.24', '$hypervector_size108.25']
dispatch pc=114, inst=LOAD_CONST(arg=1, lineno=131)
stack ['$phi26.0', '$binop_add110.26']
dispatch pc=116, inst=BINARY_OP(arg=6, lineno=131)
stack ['$phi26.0', '$binop_add110.26', '$const114.27']
dispatch pc=120, inst=STORE_FAST(arg=8, lineno=131)
stack ['$phi26.0', '$binop_mod116.28']
dispatch pc=122, inst=LOAD_FAST(arg=5, lineno=132)
stack ['$phi26.0']
dispatch pc=124, inst=LOAD_FAST(arg=2, lineno=132)
stack ['$phi26.0', '$X122.29']
dispatch pc=126, inst=LOAD_FAST(arg=3, lineno=132)
stack ['$phi26.0', '$X122.29', '$graph_index124.30']
dispatch pc=128, inst=BINARY_OP(arg=0, lineno=132)
stack ['$phi26.0', '$X122.29', '$graph_index124.30', '$node126.31']
dispatch pc=132, inst=LOAD_FAST(arg=7, lineno=132)
stack ['$phi26.0', '$X122.29', '$binop_add128.32']
dispatch pc=134, inst=BUILD_TUPLE(arg=2, lineno=132)
stack ['$phi26.0', '$X122.29', '$binop_add128.32', '$chunk132.33']
dispatch pc=136, inst=COPY(arg=2, lineno=132)
stack ['$phi26.0', '$X122.29', '$134build_tuple.34']
dispatch pc=138, inst=COPY(arg=2, lineno=132)
stack ['$phi26.0', '$X122.29', '$134build_tuple.34', '$X122.29']
dispatch pc=140, inst=BINARY_SUBSCR(arg=None, lineno=132)
stack ['$phi26.0', '$X122.29', '$134build_tuple.34', '$X122.29', '$134build_tuple.34']
dispatch pc=144, inst=LOAD_CONST(arg=2, lineno=132)
stack ['$phi26.0', '$X122.29', '$134build_tuple.34', '$140binary_subscr.35']
dispatch pc=146, inst=LOAD_FAST(arg=8, lineno=132)
stack ['$phi26.0', '$X122.29', '$134build_tuple.34', '$140binary_subscr.35', '$const144.36']
dispatch pc=148, inst=BINARY_OP(arg=3, lineno=132)
stack ['$phi26.0', '$X122.29', '$134build_tuple.34', '$140binary_subscr.35', '$const144.36', '$pos146.37']
dispatch pc=152, inst=UNARY_INVERT(arg=None, lineno=132)
stack ['$phi26.0', '$X122.29', '$134build_tuple.34', '$140binary_subscr.35', '$binop_lshift148.38']
dispatch pc=154, inst=BINARY_OP(arg=14, lineno=132)
stack ['$phi26.0', '$X122.29', '$134build_tuple.34', '$140binary_subscr.35', '$152unary_invert.39']
dispatch pc=158, inst=SWAP(arg=3, lineno=132)
stack ['$phi26.0', '$X122.29', '$134build_tuple.34', '$binop_iand154.40']
dispatch pc=160, inst=SWAP(arg=2, lineno=132)
stack ['$phi26.0', '$binop_iand154.40', '$134build_tuple.34', '$X122.29']
dispatch pc=162, inst=STORE_SUBSCR(arg=None, lineno=132)
stack ['$phi26.0', '$binop_iand154.40', '$X122.29', '$134build_tuple.34']
dispatch pc=166, inst=JUMP_BACKWARD(arg=73, lineno=132)
stack ['$phi26.0']
end state. edges=[Edge(pc=22, stack=('$phi26.0',), blockstack=(), npush=0)]
pending: deque([State(pc_initial=22 nstack_initial=1)])
-------------------------Prune PHIs-------------------------
Used_phis: defaultdict(<class 'set'>,
            {State(pc_initial=0 nstack_initial=0): set(),
             State(pc_initial=22 nstack_initial=1): {'$phi22.0'},
             State(pc_initial=26 nstack_initial=2): {'$phi26.1'},
             State(pc_initial=168 nstack_initial=2): set()})
defmap: {'$phi168.1': State(pc_initial=22 nstack_initial=1),
 '$phi22.0': State(pc_initial=0 nstack_initial=0),
 '$phi26.1': State(pc_initial=22 nstack_initial=1)}
phismap: defaultdict(<class 'set'>,
            {'$phi168.0': {('$phi22.0', State(pc_initial=22 nstack_initial=1))},
             '$phi168.1': {('$22for_iter.2',
                            State(pc_initial=22 nstack_initial=1))},
             '$phi22.0': {('$20get_iter.8',
                           State(pc_initial=0 nstack_initial=0)),
                          ('$phi26.0', State(pc_initial=26 nstack_initial=2))},
             '$phi26.0': {('$phi22.0', State(pc_initial=22 nstack_initial=1))},
             '$phi26.1': {('$22for_iter.2',
                           State(pc_initial=22 nstack_initial=1))}})
changing phismap: defaultdict(<class 'set'>,
            {'$phi168.0': {('$20get_iter.8',
                            State(pc_initial=0 nstack_initial=0)),
                           ('$phi26.0', State(pc_initial=26 nstack_initial=2))},
             '$phi168.1': {('$22for_iter.2',
                            State(pc_initial=22 nstack_initial=1))},
             '$phi22.0': {('$20get_iter.8',
                           State(pc_initial=0 nstack_initial=0)),
                          ('$phi22.0', State(pc_initial=22 nstack_initial=1))},
             '$phi26.0': {('$20get_iter.8',
                           State(pc_initial=0 nstack_initial=0))},
             '$phi26.1': {('$22for_iter.2',
                           State(pc_initial=22 nstack_initial=1))}})
changing phismap: defaultdict(<class 'set'>,
            {'$phi168.0': {('$20get_iter.8',
                            State(pc_initial=0 nstack_initial=0))},
             '$phi168.1': {('$22for_iter.2',
                            State(pc_initial=22 nstack_initial=1))},
             '$phi22.0': {('$20get_iter.8',
                           State(pc_initial=0 nstack_initial=0))},
             '$phi26.0': {('$20get_iter.8',
                           State(pc_initial=0 nstack_initial=0))},
             '$phi26.1': {('$22for_iter.2',
                           State(pc_initial=22 nstack_initial=1))}})
changing phismap: defaultdict(<class 'set'>,
            {'$phi168.0': {('$20get_iter.8',
                            State(pc_initial=0 nstack_initial=0))},
             '$phi168.1': {('$22for_iter.2',
                            State(pc_initial=22 nstack_initial=1))},
             '$phi22.0': {('$20get_iter.8',
                           State(pc_initial=0 nstack_initial=0))},
             '$phi26.0': {('$20get_iter.8',
                           State(pc_initial=0 nstack_initial=0))},
             '$phi26.1': {('$22for_iter.2',
                           State(pc_initial=22 nstack_initial=1))}})
keep phismap: {'$phi22.0': {('$20get_iter.8', State(pc_initial=0 nstack_initial=0))},
 '$phi26.1': {('$22for_iter.2', State(pc_initial=22 nstack_initial=1))}}
new_out: defaultdict(<class 'dict'>,
            {State(pc_initial=0 nstack_initial=0): {'$phi22.0': '$20get_iter.8'},
             State(pc_initial=22 nstack_initial=1): {'$phi26.1': '$22for_iter.2'}})
----------------------DONE Prune PHIs-----------------------
block_infos State(pc_initial=0 nstack_initial=0):
AdaptBlockInfo(insts=((0, {}), (2, {}), (4, {'res': '$hypervectors4.0'}), (6, {'res': '$symbol6.1'}), (8, {'res': '$const8.2'}), (10, {'res': '$const10.3'}), (12, {'start': '$const8.2', 'stop': '$const10.3', 'step': None, 'res': '$12build_slice.5', 'slicevar': '$12build_slice.4'}), (14, {'items': ['$symbol6.1', '$12build_slice.5'], 'res': '$14build_tuple.6'}), (16, {'index': '$14build_tuple.6', 'target': '$hypervectors4.0', 'res': '$16binary_subscr.7'}), (20, {'value': '$16binary_subscr.7', 'res': '$20get_iter.8'})), outgoing_phis={'$phi22.0': '$20get_iter.8'}, blockstack=(), active_try_block=None, outgoing_edgepushed={22: ('$20get_iter.8',)})
block_infos State(pc_initial=22 nstack_initial=1):
AdaptBlockInfo(insts=((22, {'iterator': '$phi22.0', 'pair': '$22for_iter.1', 'indval': '$22for_iter.2', 'pred': '$22for_iter.3'}),), outgoing_phis={'$phi26.1': '$22for_iter.2'}, blockstack=(), active_try_block=None, outgoing_edgepushed={168: ('$phi22.0', '$22for_iter.2'), 26: ('$phi22.0', '$22for_iter.2')})
block_infos State(pc_initial=26 nstack_initial=2):
AdaptBlockInfo(insts=((26, {'value': '$phi26.1'}), (28, {'res': '$k28.2'}), (30, {'res': '$const30.3'}), (32, {'op': '//', 'lhs': '$k28.2', 'rhs': '$const30.3', 'res': '$binop_floordiv32.4'}), (36, {'value': '$binop_floordiv32.4'}), (38, {'res': '$k38.5'}), (40, {'res': '$const40.6'}), (42, {'op': '%', 'lhs': '$k38.5', 'rhs': '$const40.6', 'res': '$binop_mod42.7'}), (46, {'value': '$binop_mod42.7'}), (48, {'res': '$X48.8'}), (50, {'res': '$graph_index50.9'}), (52, {'res': '$node52.10'}), (54, {'op': '+', 'lhs': '$graph_index50.9', 'rhs': '$node52.10', 'res': '$binop_add54.11'}), (58, {'res': '$chunk58.12'}), (60, {'items': ['$binop_add54.11', '$chunk58.12'], 'res': '$60build_tuple.13'}), (66, {'index': '$60build_tuple.13', 'target': '$X48.8', 'res': '$66binary_subscr.14'}), (70, {'res': '$const70.15'}), (72, {'res': '$pos72.16'}), (74, {'op': '<<', 'lhs': '$const70.15', 'rhs': '$pos72.16', 'res': '$binop_lshift74.17'}), (78, {'op': '|=', 'lhs': '$66binary_subscr.14', 'rhs': '$binop_lshift74.17', 'res': '$binop_ior78.18'}), (86, {'target': '$X48.8', 'index': '$60build_tuple.13', 'value': '$binop_ior78.18'}), (90, {'res': '$k90.19'}), (92, {'res': '$hypervector_size92.20'}), (94, {'op': '+', 'lhs': '$k90.19', 'rhs': '$hypervector_size92.20', 'res': '$binop_add94.21'}), (98, {'res': '$const98.22'}), (100, {'op': '//', 'lhs': '$binop_add94.21', 'rhs': '$const98.22', 'res': '$binop_floordiv100.23'}), (104, {'value': '$binop_floordiv100.23'}), (106, {'res': '$k106.24'}), (108, {'res': '$hypervector_size108.25'}), (110, {'op': '+', 'lhs': '$k106.24', 'rhs': '$hypervector_size108.25', 'res': '$binop_add110.26'}), (114, {'res': '$const114.27'}), (116, {'op': '%', 'lhs': '$binop_add110.26', 'rhs': '$const114.27', 'res': '$binop_mod116.28'}), (120, {'value': '$binop_mod116.28'}), (122, {'res': '$X122.29'}), (124, {'res': '$graph_index124.30'}), (126, {'res': '$node126.31'}), (128, {'op': '+', 'lhs': '$graph_index124.30', 'rhs': '$node126.31', 'res': '$binop_add128.32'}), (132, {'res': '$chunk132.33'}), (134, {'items': ['$binop_add128.32', '$chunk132.33'], 'res': '$134build_tuple.34'}), (140, {'index': '$134build_tuple.34', 'target': '$X122.29', 'res': '$140binary_subscr.35'}), (144, {'res': '$const144.36'}), (146, {'res': '$pos146.37'}), (148, {'op': '<<', 'lhs': '$const144.36', 'rhs': '$pos146.37', 'res': '$binop_lshift148.38'}), (152, {'value': '$binop_lshift148.38', 'res': '$152unary_invert.39'}), (154, {'op': '&=', 'lhs': '$140binary_subscr.35', 'rhs': '$152unary_invert.39', 'res': '$binop_iand154.40'}), (162, {'target': '$X122.29', 'index': '$134build_tuple.34', 'value': '$binop_iand154.40'}), (166, {})), outgoing_phis={}, blockstack=(), active_try_block=None, outgoing_edgepushed={22: ('$phi26.0',)})
block_infos State(pc_initial=168 nstack_initial=2):
AdaptBlockInfo(insts=((170, {'retval': '$const170.2', 'castval': '$170return_const.3'}),), outgoing_phis={}, blockstack=(), active_try_block=None, outgoing_edgepushed={})
label 0:
    hypervectors = arg(0, name=hypervectors) ['hypervectors']
    hypervector_size = arg(1, name=hypervector_size) ['hypervector_size']
    graph_index = arg(2, name=graph_index)   ['graph_index']
    node = arg(3, name=node)                 ['node']
    symbol = arg(4, name=symbol)             ['symbol']
    X = arg(5, name=X)                       ['X']
    $const8.2 = const(NoneType, None)        ['$const8.2']
    $const10.3 = const(NoneType, None)       ['$const10.3']
    $12build_slice.4 = global(slice: <class 'slice'>) ['$12build_slice.4']
    $12build_slice.5 = call $12build_slice.4($const8.2, $const10.3, func=$12build_slice.4, args=(Var($const8.2, graphs.py:124), Var($const10.3, graphs.py:124)), kws=(), vararg=None, varkwarg=None, target=None) ['$12build_slice.4', '$12build_slice.5', '$const10.3', '$const8.2']
    $14build_tuple.6 = build_tuple(items=[Var(symbol, graphs.py:121), Var($12build_slice.5, graphs.py:124)]) ['$12build_slice.5', '$14build_tuple.6', 'symbol']
    $16binary_subscr.7 = getitem(value=hypervectors, index=$14build_tuple.6, fn=<built-in function getitem>) ['$14build_tuple.6', '$16binary_subscr.7', 'hypervectors']
    $20get_iter.8 = getiter(value=$16binary_subscr.7) ['$16binary_subscr.7', '$20get_iter.8']
    $phi22.0 = $20get_iter.8                 ['$20get_iter.8', '$phi22.0']
    jump 22                                  []
label 22:
    $22for_iter.1 = iternext(value=$phi22.0) ['$22for_iter.1', '$phi22.0']
    $22for_iter.2 = pair_first(value=$22for_iter.1) ['$22for_iter.1', '$22for_iter.2']
    $22for_iter.3 = pair_second(value=$22for_iter.1) ['$22for_iter.1', '$22for_iter.3']
    $phi26.1 = $22for_iter.2                 ['$22for_iter.2', '$phi26.1']
    branch $22for_iter.3, 26, 168            ['$22for_iter.3']
label 26:
    k = $phi26.1                             ['$phi26.1', 'k']
    $const30.3 = const(int, 32)              ['$const30.3']
    chunk = k // $const30.3                  ['$const30.3', 'chunk', 'k']
    $const40.6 = const(int, 32)              ['$const40.6']
    pos = k % $const40.6                     ['$const40.6', 'k', 'pos']
    $binop_add54.11 = graph_index + node     ['$binop_add54.11', 'graph_index', 'node']
    $60build_tuple.13 = build_tuple(items=[Var($binop_add54.11, graphs.py:128), Var(chunk, graphs.py:125)]) ['$60build_tuple.13', '$binop_add54.11', 'chunk']
    $66binary_subscr.14 = getitem(value=X, index=$60build_tuple.13, fn=<built-in function getitem>) ['$60build_tuple.13', '$66binary_subscr.14', 'X']
    $const70.15 = const(int, 1)              ['$const70.15']
    $binop_lshift74.17 = $const70.15 << pos  ['$binop_lshift74.17', '$const70.15', 'pos']
    $binop_ior78.18 = inplace_binop(fn=<built-in function ior>, immutable_fn=<built-in function or_>, lhs=$66binary_subscr.14, rhs=$binop_lshift74.17, static_lhs=Undefined, static_rhs=Undefined) ['$66binary_subscr.14', '$binop_ior78.18', '$binop_lshift74.17']
    X[$60build_tuple.13] = $binop_ior78.18   ['$60build_tuple.13', '$binop_ior78.18', 'X']
    $binop_add94.21 = k + hypervector_size   ['$binop_add94.21', 'hypervector_size', 'k']
    $const98.22 = const(int, 32)             ['$const98.22']
    chunk = $binop_add94.21 // $const98.22   ['$binop_add94.21', '$const98.22', 'chunk']
    $binop_add110.26 = k + hypervector_size  ['$binop_add110.26', 'hypervector_size', 'k']
    $const114.27 = const(int, 32)            ['$const114.27']
    pos = $binop_add110.26 % $const114.27    ['$binop_add110.26', '$const114.27', 'pos']
    $binop_add128.32 = graph_index + node    ['$binop_add128.32', 'graph_index', 'node']
    $134build_tuple.34 = build_tuple(items=[Var($binop_add128.32, graphs.py:132), Var(chunk, graphs.py:125)]) ['$134build_tuple.34', '$binop_add128.32', 'chunk']
    $140binary_subscr.35 = getitem(value=X, index=$134build_tuple.34, fn=<built-in function getitem>) ['$134build_tuple.34', '$140binary_subscr.35', 'X']
    $const144.36 = const(int, 1)             ['$const144.36']
    $binop_lshift148.38 = $const144.36 << pos ['$binop_lshift148.38', '$const144.36', 'pos']
    $152unary_invert.39 = unary(fn=<built-in function invert>, value=$binop_lshift148.38) ['$152unary_invert.39', '$binop_lshift148.38']
    $binop_iand154.40 = inplace_binop(fn=<built-in function iand>, immutable_fn=<built-in function and_>, lhs=$140binary_subscr.35, rhs=$152unary_invert.39, static_lhs=Undefined, static_rhs=Undefined) ['$140binary_subscr.35', '$152unary_invert.39', '$binop_iand154.40']
    X[$134build_tuple.34] = $binop_iand154.40 ['$134build_tuple.34', '$binop_iand154.40', 'X']
    jump 22                                  []
label 168:
    $const170.2 = const(NoneType, None)      ['$const170.2']
    $170return_const.3 = cast(value=$const170.2) ['$170return_const.3', '$const170.2']
    return $170return_const.3                ['$170return_const.3']

==== SSA block analysis pass on 0
Running <numba.core.ssa._GatherDefsHandler object at 0x78e096465040>
on stmt: hypervectors = arg(0, name=hypervectors)
on stmt: hypervector_size = arg(1, name=hypervector_size)
on stmt: graph_index = arg(2, name=graph_index)
on stmt: node = arg(3, name=node)
on stmt: symbol = arg(4, name=symbol)
on stmt: X = arg(5, name=X)
on stmt: $const8.2 = const(NoneType, None)
on stmt: $const10.3 = const(NoneType, None)
on stmt: $12build_slice.4 = global(slice: <class 'slice'>)
on stmt: $12build_slice.5 = call $12build_slice.4($const8.2, $const10.3, func=$12build_slice.4, args=(Var($const8.2, graphs.py:124), Var($const10.3, graphs.py:124)), kws=(), vararg=None, varkwarg=None, target=None)
on stmt: $14build_tuple.6 = build_tuple(items=[Var(symbol, graphs.py:121), Var($12build_slice.5, graphs.py:124)])
on stmt: $16binary_subscr.7 = getitem(value=hypervectors, index=$14build_tuple.6, fn=<built-in function getitem>)
on stmt: $20get_iter.8 = getiter(value=$16binary_subscr.7)
on stmt: $phi22.0 = $20get_iter.8
on stmt: jump 22
==== SSA block analysis pass on 22
Running <numba.core.ssa._GatherDefsHandler object at 0x78e096465040>
on stmt: $22for_iter.1 = iternext(value=$phi22.0)
on stmt: $22for_iter.2 = pair_first(value=$22for_iter.1)
on stmt: $22for_iter.3 = pair_second(value=$22for_iter.1)
on stmt: $phi26.1 = $22for_iter.2
on stmt: branch $22for_iter.3, 26, 168
==== SSA block analysis pass on 26
Running <numba.core.ssa._GatherDefsHandler object at 0x78e096465040>
on stmt: k = $phi26.1
on stmt: $const30.3 = const(int, 32)
on stmt: chunk = k // $const30.3
on stmt: $const40.6 = const(int, 32)
on stmt: pos = k % $const40.6
on stmt: $binop_add54.11 = graph_index + node
on stmt: $60build_tuple.13 = build_tuple(items=[Var($binop_add54.11, graphs.py:128), Var(chunk, graphs.py:125)])
on stmt: $66binary_subscr.14 = getitem(value=X, index=$60build_tuple.13, fn=<built-in function getitem>)
on stmt: $const70.15 = const(int, 1)
on stmt: $binop_lshift74.17 = $const70.15 << pos
on stmt: $binop_ior78.18 = inplace_binop(fn=<built-in function ior>, immutable_fn=<built-in function or_>, lhs=$66binary_subscr.14, rhs=$binop_lshift74.17, static_lhs=Undefined, static_rhs=Undefined)
on stmt: X[$60build_tuple.13] = $binop_ior78.18
on stmt: $binop_add94.21 = k + hypervector_size
on stmt: $const98.22 = const(int, 32)
on stmt: chunk = $binop_add94.21 // $const98.22
on stmt: $binop_add110.26 = k + hypervector_size
on stmt: $const114.27 = const(int, 32)
on stmt: pos = $binop_add110.26 % $const114.27
on stmt: $binop_add128.32 = graph_index + node
on stmt: $134build_tuple.34 = build_tuple(items=[Var($binop_add128.32, graphs.py:132), Var(chunk, graphs.py:125)])
on stmt: $140binary_subscr.35 = getitem(value=X, index=$134build_tuple.34, fn=<built-in function getitem>)
on stmt: $const144.36 = const(int, 1)
on stmt: $binop_lshift148.38 = $const144.36 << pos
on stmt: $152unary_invert.39 = unary(fn=<built-in function invert>, value=$binop_lshift148.38)
on stmt: $binop_iand154.40 = inplace_binop(fn=<built-in function iand>, immutable_fn=<built-in function and_>, lhs=$140binary_subscr.35, rhs=$152unary_invert.39, static_lhs=Undefined, static_rhs=Undefined)
on stmt: X[$134build_tuple.34] = $binop_iand154.40
on stmt: jump 22
==== SSA block analysis pass on 168
Running <numba.core.ssa._GatherDefsHandler object at 0x78e096465040>
on stmt: $const170.2 = const(NoneType, None)
on stmt: $170return_const.3 = cast(value=$const170.2)
on stmt: return $170return_const.3
defs defaultdict(<class 'list'>,
            {'$12build_slice.4': [(<numba.core.ir.Assign object at 0x78e096465d60>,
                                   0)],
             '$12build_slice.5': [(<numba.core.ir.Assign object at 0x78e096465e50>,
                                   0)],
             '$134build_tuple.34': [(<numba.core.ir.Assign object at 0x78e0961090d0>,
                                     26)],
             '$140binary_subscr.35': [(<numba.core.ir.Assign object at 0x78e096109250>,
                                       26)],
             '$14build_tuple.6': [(<numba.core.ir.Assign object at 0x78e096465f70>,
                                   0)],
             '$152unary_invert.39': [(<numba.core.ir.Assign object at 0x78e0961096d0>,
                                      26)],
             '$16binary_subscr.7': [(<numba.core.ir.Assign object at 0x78e0964660c0>,
                                     0)],
             '$170return_const.3': [(<numba.core.ir.Assign object at 0x78e096467620>,
                                     168)],
             '$20get_iter.8': [(<numba.core.ir.Assign object at 0x78e0964661e0>,
                                0)],
             '$22for_iter.1': [(<numba.core.ir.Assign object at 0x78e0964663f0>,
                                22)],
             '$22for_iter.2': [(<numba.core.ir.Assign object at 0x78e096466510>,
                                22)],
             '$22for_iter.3': [(<numba.core.ir.Assign object at 0x78e096466630>,
                                22)],
             '$60build_tuple.13': [(<numba.core.ir.Assign object at 0x78e096467770>,
                                    26)],
             '$66binary_subscr.14': [(<numba.core.ir.Assign object at 0x78e0964678f0>,
                                      26)],
             '$binop_add110.26': [(<numba.core.ir.Assign object at 0x78e0961087a0>,
                                   26)],
             '$binop_add128.32': [(<numba.core.ir.Assign object at 0x78e096108ec0>,
                                   26)],
             '$binop_add54.11': [(<numba.core.ir.Assign object at 0x78e096467560>,
                                  26)],
             '$binop_add94.21': [(<numba.core.ir.Assign object at 0x78e096108170>,
                                  26)],
             '$binop_iand154.40': [(<numba.core.ir.Assign object at 0x78e096109850>,
                                    26)],
             '$binop_ior78.18': [(<numba.core.ir.Assign object at 0x78e096467da0>,
                                  26)],
             '$binop_lshift148.38': [(<numba.core.ir.Assign object at 0x78e0961095b0>,
                                      26)],
             '$binop_lshift74.17': [(<numba.core.ir.Assign object at 0x78e096467c50>,
                                     26)],
             '$const10.3': [(<numba.core.ir.Assign object at 0x78e096465c40>,
                             0)],
             '$const114.27': [(<numba.core.ir.Assign object at 0x78e096108890>,
                               26)],
             '$const144.36': [(<numba.core.ir.Assign object at 0x78e096109340>,
                               26)],
             '$const170.2': [(<numba.core.ir.Assign object at 0x78e096467200>,
                              168)],
             '$const30.3': [(<numba.core.ir.Assign object at 0x78e096466a80>,
                             26)],
             '$const40.6': [(<numba.core.ir.Assign object at 0x78e096466ed0>,
                             26)],
             '$const70.15': [(<numba.core.ir.Assign object at 0x78e0964679e0>,
                              26)],
             '$const8.2': [(<numba.core.ir.Assign object at 0x78e096465b50>,
                            0)],
             '$const98.22': [(<numba.core.ir.Assign object at 0x78e096108260>,
                              26)],
             '$phi22.0': [(<numba.core.ir.Assign object at 0x78e096465a30>, 0)],
             '$phi26.1': [(<numba.core.ir.Assign object at 0x78e0964666c0>,
                           22)],
             'X': [(<numba.core.ir.Assign object at 0x78e096465820>, 0)],
             'chunk': [(<numba.core.ir.Assign object at 0x78e096466c00>, 26),
                       (<numba.core.ir.Assign object at 0x78e0961083e0>, 26)],
             'graph_index': [(<numba.core.ir.Assign object at 0x78e096465550>,
                              0)],
             'hypervector_size': [(<numba.core.ir.Assign object at 0x78e096465130>,
                                   0)],
             'hypervectors': [(<numba.core.ir.Assign object at 0x78e0964653d0>,
                               0)],
             'k': [(<numba.core.ir.Assign object at 0x78e096466870>, 26)],
             'node': [(<numba.core.ir.Assign object at 0x78e096465640>, 0)],
             'pos': [(<numba.core.ir.Assign object at 0x78e096467050>, 26),
                     (<numba.core.ir.Assign object at 0x78e096108a10>, 26)],
             'symbol': [(<numba.core.ir.Assign object at 0x78e096465730>, 0)]})
SSA violators <numba.core.utils.OrderedSet object at 0x78e096393e00>
Fix SSA violator on var chunk
==== SSA block rewrite pass on 0
Running <numba.core.ssa._FreshVarHandler object at 0x78e096519250>
on stmt: hypervectors = arg(0, name=hypervectors)
on stmt: hypervector_size = arg(1, name=hypervector_size)
on stmt: graph_index = arg(2, name=graph_index)
on stmt: node = arg(3, name=node)
on stmt: symbol = arg(4, name=symbol)
on stmt: X = arg(5, name=X)
on stmt: $const8.2 = const(NoneType, None)
on stmt: $const10.3 = const(NoneType, None)
on stmt: $12build_slice.4 = global(slice: <class 'slice'>)
on stmt: $12build_slice.5 = call $12build_slice.4($const8.2, $const10.3, func=$12build_slice.4, args=(Var($const8.2, graphs.py:124), Var($const10.3, graphs.py:124)), kws=(), vararg=None, varkwarg=None, target=None)
on stmt: $14build_tuple.6 = build_tuple(items=[Var(symbol, graphs.py:121), Var($12build_slice.5, graphs.py:124)])
on stmt: $16binary_subscr.7 = getitem(value=hypervectors, index=$14build_tuple.6, fn=<built-in function getitem>)
on stmt: $20get_iter.8 = getiter(value=$16binary_subscr.7)
on stmt: $phi22.0 = $20get_iter.8
on stmt: jump 22
==== SSA block rewrite pass on 22
Running <numba.core.ssa._FreshVarHandler object at 0x78e096519250>
on stmt: $22for_iter.1 = iternext(value=$phi22.0)
on stmt: $22for_iter.2 = pair_first(value=$22for_iter.1)
on stmt: $22for_iter.3 = pair_second(value=$22for_iter.1)
on stmt: $phi26.1 = $22for_iter.2
on stmt: branch $22for_iter.3, 26, 168
==== SSA block rewrite pass on 26
Running <numba.core.ssa._FreshVarHandler object at 0x78e096519250>
on stmt: k = $phi26.1
on stmt: $const30.3 = const(int, 32)
on stmt: chunk = k // $const30.3
first assign: chunk
replaced with: chunk = k // $const30.3
on stmt: $const40.6 = const(int, 32)
on stmt: pos = k % $const40.6
on stmt: $binop_add54.11 = graph_index + node
on stmt: $60build_tuple.13 = build_tuple(items=[Var($binop_add54.11, graphs.py:128), Var(chunk, graphs.py:125)])
on stmt: $66binary_subscr.14 = getitem(value=X, index=$60build_tuple.13, fn=<built-in function getitem>)
on stmt: $const70.15 = const(int, 1)
on stmt: $binop_lshift74.17 = $const70.15 << pos
on stmt: $binop_ior78.18 = inplace_binop(fn=<built-in function ior>, immutable_fn=<built-in function or_>, lhs=$66binary_subscr.14, rhs=$binop_lshift74.17, static_lhs=Undefined, static_rhs=Undefined)
on stmt: X[$60build_tuple.13] = $binop_ior78.18
on stmt: $binop_add94.21 = k + hypervector_size
on stmt: $const98.22 = const(int, 32)
on stmt: chunk = $binop_add94.21 // $const98.22
replaced with: chunk.1 = $binop_add94.21 // $const98.22
on stmt: $binop_add110.26 = k + hypervector_size
on stmt: $const114.27 = const(int, 32)
on stmt: pos = $binop_add110.26 % $const114.27
on stmt: $binop_add128.32 = graph_index + node
on stmt: $134build_tuple.34 = build_tuple(items=[Var($binop_add128.32, graphs.py:132), Var(chunk, graphs.py:125)])
on stmt: $140binary_subscr.35 = getitem(value=X, index=$134build_tuple.34, fn=<built-in function getitem>)
on stmt: $const144.36 = const(int, 1)
on stmt: $binop_lshift148.38 = $const144.36 << pos
on stmt: $152unary_invert.39 = unary(fn=<built-in function invert>, value=$binop_lshift148.38)
on stmt: $binop_iand154.40 = inplace_binop(fn=<built-in function iand>, immutable_fn=<built-in function and_>, lhs=$140binary_subscr.35, rhs=$152unary_invert.39, static_lhs=Undefined, static_rhs=Undefined)
on stmt: X[$134build_tuple.34] = $binop_iand154.40
on stmt: jump 22
==== SSA block rewrite pass on 168
Running <numba.core.ssa._FreshVarHandler object at 0x78e096519250>
on stmt: $const170.2 = const(NoneType, None)
on stmt: $170return_const.3 = cast(value=$const170.2)
on stmt: return $170return_const.3
Replaced assignments: defaultdict(<class 'list'>,
            {26: [<numba.core.ir.Assign object at 0x78e0964f2840>,
                  <numba.core.ir.Assign object at 0x78e0964f2270>]})
==== SSA block rewrite pass on 0
Running <numba.core.ssa._FixSSAVars object at 0x78e096519250>
on stmt: hypervectors = arg(0, name=hypervectors)
on stmt: hypervector_size = arg(1, name=hypervector_size)
on stmt: graph_index = arg(2, name=graph_index)
on stmt: node = arg(3, name=node)
on stmt: symbol = arg(4, name=symbol)
on stmt: X = arg(5, name=X)
on stmt: $const8.2 = const(NoneType, None)
on stmt: $const10.3 = const(NoneType, None)
on stmt: $12build_slice.4 = global(slice: <class 'slice'>)
on stmt: $12build_slice.5 = call $12build_slice.4($const8.2, $const10.3, func=$12build_slice.4, args=(Var($const8.2, graphs.py:124), Var($const10.3, graphs.py:124)), kws=(), vararg=None, varkwarg=None, target=None)
on stmt: $14build_tuple.6 = build_tuple(items=[Var(symbol, graphs.py:121), Var($12build_slice.5, graphs.py:124)])
on stmt: $16binary_subscr.7 = getitem(value=hypervectors, index=$14build_tuple.6, fn=<built-in function getitem>)
on stmt: $20get_iter.8 = getiter(value=$16binary_subscr.7)
on stmt: $phi22.0 = $20get_iter.8
on stmt: jump 22
==== SSA block rewrite pass on 22
Running <numba.core.ssa._FixSSAVars object at 0x78e096519250>
on stmt: $22for_iter.1 = iternext(value=$phi22.0)
on stmt: $22for_iter.2 = pair_first(value=$22for_iter.1)
on stmt: $22for_iter.3 = pair_second(value=$22for_iter.1)
on stmt: $phi26.1 = $22for_iter.2
on stmt: branch $22for_iter.3, 26, 168
==== SSA block rewrite pass on 26
Running <numba.core.ssa._FixSSAVars object at 0x78e096519250>
on stmt: k = $phi26.1
on stmt: $const30.3 = const(int, 32)
on stmt: chunk = k // $const30.3
on stmt: $const40.6 = const(int, 32)
on stmt: pos = k % $const40.6
on stmt: $binop_add54.11 = graph_index + node
on stmt: $60build_tuple.13 = build_tuple(items=[Var($binop_add54.11, graphs.py:128), Var(chunk, graphs.py:125)])
find_def var='chunk' stmt=$60build_tuple.13 = build_tuple(items=[Var($binop_add54.11, graphs.py:128), Var(chunk, graphs.py:125)])
on stmt: $66binary_subscr.14 = getitem(value=X, index=$60build_tuple.13, fn=<built-in function getitem>)
on stmt: $const70.15 = const(int, 1)
on stmt: $binop_lshift74.17 = $const70.15 << pos
on stmt: $binop_ior78.18 = inplace_binop(fn=<built-in function ior>, immutable_fn=<built-in function or_>, lhs=$66binary_subscr.14, rhs=$binop_lshift74.17, static_lhs=Undefined, static_rhs=Undefined)
on stmt: X[$60build_tuple.13] = $binop_ior78.18
on stmt: $binop_add94.21 = k + hypervector_size
on stmt: $const98.22 = const(int, 32)
on stmt: chunk.1 = $binop_add94.21 // $const98.22
on stmt: $binop_add110.26 = k + hypervector_size
on stmt: $const114.27 = const(int, 32)
on stmt: pos = $binop_add110.26 % $const114.27
on stmt: $binop_add128.32 = graph_index + node
on stmt: $134build_tuple.34 = build_tuple(items=[Var($binop_add128.32, graphs.py:132), Var(chunk, graphs.py:125)])
find_def var='chunk' stmt=$134build_tuple.34 = build_tuple(items=[Var($binop_add128.32, graphs.py:132), Var(chunk, graphs.py:125)])
replaced with: $134build_tuple.34 = build_tuple(items=[Var($binop_add128.32, graphs.py:132), Var(chunk.1, graphs.py:130)])
on stmt: $140binary_subscr.35 = getitem(value=X, index=$134build_tuple.34, fn=<built-in function getitem>)
on stmt: $const144.36 = const(int, 1)
on stmt: $binop_lshift148.38 = $const144.36 << pos
on stmt: $152unary_invert.39 = unary(fn=<built-in function invert>, value=$binop_lshift148.38)
on stmt: $binop_iand154.40 = inplace_binop(fn=<built-in function iand>, immutable_fn=<built-in function and_>, lhs=$140binary_subscr.35, rhs=$152unary_invert.39, static_lhs=Undefined, static_rhs=Undefined)
on stmt: X[$134build_tuple.34] = $binop_iand154.40
on stmt: jump 22
==== SSA block rewrite pass on 168
Running <numba.core.ssa._FixSSAVars object at 0x78e096519250>
on stmt: $const170.2 = const(NoneType, None)
on stmt: $170return_const.3 = cast(value=$const170.2)
on stmt: return $170return_const.3
Fix SSA violator on var pos
==== SSA block rewrite pass on 0
Running <numba.core.ssa._FreshVarHandler object at 0x78e0963bca40>
on stmt: hypervectors = arg(0, name=hypervectors)
on stmt: hypervector_size = arg(1, name=hypervector_size)
on stmt: graph_index = arg(2, name=graph_index)
on stmt: node = arg(3, name=node)
on stmt: symbol = arg(4, name=symbol)
on stmt: X = arg(5, name=X)
on stmt: $const8.2 = const(NoneType, None)
on stmt: $const10.3 = const(NoneType, None)
on stmt: $12build_slice.4 = global(slice: <class 'slice'>)
on stmt: $12build_slice.5 = call $12build_slice.4($const8.2, $const10.3, func=$12build_slice.4, args=(Var($const8.2, graphs.py:124), Var($const10.3, graphs.py:124)), kws=(), vararg=None, varkwarg=None, target=None)
on stmt: $14build_tuple.6 = build_tuple(items=[Var(symbol, graphs.py:121), Var($12build_slice.5, graphs.py:124)])
on stmt: $16binary_subscr.7 = getitem(value=hypervectors, index=$14build_tuple.6, fn=<built-in function getitem>)
on stmt: $20get_iter.8 = getiter(value=$16binary_subscr.7)
on stmt: $phi22.0 = $20get_iter.8
on stmt: jump 22
==== SSA block rewrite pass on 22
Running <numba.core.ssa._FreshVarHandler object at 0x78e0963bca40>
on stmt: $22for_iter.1 = iternext(value=$phi22.0)
on stmt: $22for_iter.2 = pair_first(value=$22for_iter.1)
on stmt: $22for_iter.3 = pair_second(value=$22for_iter.1)
on stmt: $phi26.1 = $22for_iter.2
on stmt: branch $22for_iter.3, 26, 168
==== SSA block rewrite pass on 26
Running <numba.core.ssa._FreshVarHandler object at 0x78e0963bca40>
on stmt: k = $phi26.1
on stmt: $const30.3 = const(int, 32)
on stmt: chunk = k // $const30.3
on stmt: $const40.6 = const(int, 32)
on stmt: pos = k % $const40.6
first assign: pos
replaced with: pos = k % $const40.6
on stmt: $binop_add54.11 = graph_index + node
on stmt: $60build_tuple.13 = build_tuple(items=[Var($binop_add54.11, graphs.py:128), Var(chunk, graphs.py:125)])
on stmt: $66binary_subscr.14 = getitem(value=X, index=$60build_tuple.13, fn=<built-in function getitem>)
on stmt: $const70.15 = const(int, 1)
on stmt: $binop_lshift74.17 = $const70.15 << pos
on stmt: $binop_ior78.18 = inplace_binop(fn=<built-in function ior>, immutable_fn=<built-in function or_>, lhs=$66binary_subscr.14, rhs=$binop_lshift74.17, static_lhs=Undefined, static_rhs=Undefined)
on stmt: X[$60build_tuple.13] = $binop_ior78.18
on stmt: $binop_add94.21 = k + hypervector_size
on stmt: $const98.22 = const(int, 32)
on stmt: chunk.1 = $binop_add94.21 // $const98.22
on stmt: $binop_add110.26 = k + hypervector_size
on stmt: $const114.27 = const(int, 32)
on stmt: pos = $binop_add110.26 % $const114.27
replaced with: pos.1 = $binop_add110.26 % $const114.27
on stmt: $binop_add128.32 = graph_index + node
on stmt: $134build_tuple.34 = build_tuple(items=[Var($binop_add128.32, graphs.py:132), Var(chunk.1, graphs.py:130)])
on stmt: $140binary_subscr.35 = getitem(value=X, index=$134build_tuple.34, fn=<built-in function getitem>)
on stmt: $const144.36 = const(int, 1)
on stmt: $binop_lshift148.38 = $const144.36 << pos
on stmt: $152unary_invert.39 = unary(fn=<built-in function invert>, value=$binop_lshift148.38)
on stmt: $binop_iand154.40 = inplace_binop(fn=<built-in function iand>, immutable_fn=<built-in function and_>, lhs=$140binary_subscr.35, rhs=$152unary_invert.39, static_lhs=Undefined, static_rhs=Undefined)
on stmt: X[$134build_tuple.34] = $binop_iand154.40
on stmt: jump 22
==== SSA block rewrite pass on 168
Running <numba.core.ssa._FreshVarHandler object at 0x78e0963bca40>
on stmt: $const170.2 = const(NoneType, None)
on stmt: $170return_const.3 = cast(value=$const170.2)
on stmt: return $170return_const.3
Replaced assignments: defaultdict(<class 'list'>,
            {26: [<numba.core.ir.Assign object at 0x78e096442c90>,
                  <numba.core.ir.Assign object at 0x78e096464c80>]})
==== SSA block rewrite pass on 0
Running <numba.core.ssa._FixSSAVars object at 0x78e0e0be1c40>
on stmt: hypervectors = arg(0, name=hypervectors)
on stmt: hypervector_size = arg(1, name=hypervector_size)
on stmt: graph_index = arg(2, name=graph_index)
on stmt: node = arg(3, name=node)
on stmt: symbol = arg(4, name=symbol)
on stmt: X = arg(5, name=X)
on stmt: $const8.2 = const(NoneType, None)
on stmt: $const10.3 = const(NoneType, None)
on stmt: $12build_slice.4 = global(slice: <class 'slice'>)
on stmt: $12build_slice.5 = call $12build_slice.4($const8.2, $const10.3, func=$12build_slice.4, args=(Var($const8.2, graphs.py:124), Var($const10.3, graphs.py:124)), kws=(), vararg=None, varkwarg=None, target=None)
on stmt: $14build_tuple.6 = build_tuple(items=[Var(symbol, graphs.py:121), Var($12build_slice.5, graphs.py:124)])
on stmt: $16binary_subscr.7 = getitem(value=hypervectors, index=$14build_tuple.6, fn=<built-in function getitem>)
on stmt: $20get_iter.8 = getiter(value=$16binary_subscr.7)
on stmt: $phi22.0 = $20get_iter.8
on stmt: jump 22
==== SSA block rewrite pass on 22
Running <numba.core.ssa._FixSSAVars object at 0x78e0e0be1c40>
on stmt: $22for_iter.1 = iternext(value=$phi22.0)
on stmt: $22for_iter.2 = pair_first(value=$22for_iter.1)
on stmt: $22for_iter.3 = pair_second(value=$22for_iter.1)
on stmt: $phi26.1 = $22for_iter.2
on stmt: branch $22for_iter.3, 26, 168
==== SSA block rewrite pass on 26
Running <numba.core.ssa._FixSSAVars object at 0x78e0e0be1c40>
on stmt: k = $phi26.1
on stmt: $const30.3 = const(int, 32)
on stmt: chunk = k // $const30.3
on stmt: $const40.6 = const(int, 32)
on stmt: pos = k % $const40.6
on stmt: $binop_add54.11 = graph_index + node
on stmt: $60build_tuple.13 = build_tuple(items=[Var($binop_add54.11, graphs.py:128), Var(chunk, graphs.py:125)])
on stmt: $66binary_subscr.14 = getitem(value=X, index=$60build_tuple.13, fn=<built-in function getitem>)
on stmt: $const70.15 = const(int, 1)
on stmt: $binop_lshift74.17 = $const70.15 << pos
find_def var='pos' stmt=$binop_lshift74.17 = $const70.15 << pos
on stmt: $binop_ior78.18 = inplace_binop(fn=<built-in function ior>, immutable_fn=<built-in function or_>, lhs=$66binary_subscr.14, rhs=$binop_lshift74.17, static_lhs=Undefined, static_rhs=Undefined)
on stmt: X[$60build_tuple.13] = $binop_ior78.18
on stmt: $binop_add94.21 = k + hypervector_size
on stmt: $const98.22 = const(int, 32)
on stmt: chunk.1 = $binop_add94.21 // $const98.22
on stmt: $binop_add110.26 = k + hypervector_size
on stmt: $const114.27 = const(int, 32)
on stmt: pos.1 = $binop_add110.26 % $const114.27
on stmt: $binop_add128.32 = graph_index + node
on stmt: $134build_tuple.34 = build_tuple(items=[Var($binop_add128.32, graphs.py:132), Var(chunk.1, graphs.py:130)])
on stmt: $140binary_subscr.35 = getitem(value=X, index=$134build_tuple.34, fn=<built-in function getitem>)
on stmt: $const144.36 = const(int, 1)
on stmt: $binop_lshift148.38 = $const144.36 << pos
find_def var='pos' stmt=$binop_lshift148.38 = $const144.36 << pos
replaced with: $binop_lshift148.38 = $const144.36 << pos.1
on stmt: $152unary_invert.39 = unary(fn=<built-in function invert>, value=$binop_lshift148.38)
on stmt: $binop_iand154.40 = inplace_binop(fn=<built-in function iand>, immutable_fn=<built-in function and_>, lhs=$140binary_subscr.35, rhs=$152unary_invert.39, static_lhs=Undefined, static_rhs=Undefined)
on stmt: X[$134build_tuple.34] = $binop_iand154.40
on stmt: jump 22
==== SSA block rewrite pass on 168
Running <numba.core.ssa._FixSSAVars object at 0x78e0e0be1c40>
on stmt: $const170.2 = const(NoneType, None)
on stmt: $170return_const.3 = cast(value=$const170.2)
on stmt: return $170return_const.3
Creating test data
Epoch#1 -- Accuracy train: 0.6643333333333333 -- Accuracy test: 0.681 
Epoch#2 -- Accuracy train: 0.5496666666666666 -- Accuracy test: 0.557 
Epoch#3 -- Accuracy train: 0.6643333333333333 -- Accuracy test: 0.681 
Epoch#4 -- Accuracy train: 0.809 -- Accuracy test: 0.813 
Epoch#5 -- Accuracy train: 0.6692222222222223 -- Accuracy test: 0.662 
Epoch#6 -- Accuracy train: 0.6643333333333333 -- Accuracy test: 0.681 
Epoch#7 -- Accuracy train: 0.6843333333333333 -- Accuracy test: 0.681 
Epoch#8 -- Accuracy train: 0.7863333333333333 -- Accuracy test: 0.783 
Epoch#9 -- Accuracy train: 0.6692222222222223 -- Accuracy test: 0.662 
Epoch#10 -- Accuracy train: 0.6692222222222223 -- Accuracy test: 0.662 
Epoch#11 -- Accuracy train: 0.8266666666666667 -- Accuracy test: 0.821 
Epoch#12 -- Accuracy train: 0.8078888888888889 -- Accuracy test: 0.813 
Epoch#13 -- Accuracy train: 0.735 -- Accuracy test: 0.732 
Epoch#14 -- Accuracy train: 0.7922222222222223 -- Accuracy test: 0.788 
Epoch#15 -- Accuracy train: 0.7881111111111111 -- Accuracy test: 0.783 
Epoch#16 -- Accuracy train: 0.8306666666666667 -- Accuracy test: 0.851 
Epoch#17 -- Accuracy train: 0.8152222222222222 -- Accuracy test: 0.829 
Epoch#18 -- Accuracy train: 0.7623333333333333 -- Accuracy test: 0.758 
Epoch#19 -- Accuracy train: 0.7594444444444445 -- Accuracy test: 0.757 
Epoch#20 -- Accuracy train: 0.7593333333333333 -- Accuracy test: 0.775 
Epoch#21 -- Accuracy train: 0.7614444444444445 -- Accuracy test: 0.783 
Epoch#22 -- Accuracy train: 0.7543333333333333 -- Accuracy test: 0.763 
Epoch#23 -- Accuracy train: 0.7188888888888889 -- Accuracy test: 0.723 
Epoch#24 -- Accuracy train: 0.7825555555555556 -- Accuracy test: 0.777 
Epoch#25 -- Accuracy train: 0.8248888888888889 -- Accuracy test: 0.843 
Epoch#26 -- Accuracy train: 0.6798888888888889 -- Accuracy test: 0.69 
Epoch#27 -- Accuracy train: 0.8144444444444444 -- Accuracy test: 0.824 
Epoch#28 -- Accuracy train: 0.6643333333333333 -- Accuracy test: 0.681 
Epoch#29 -- Accuracy train: 0.781 -- Accuracy test: 0.783 
Epoch#30 -- Accuracy train: 0.7868888888888889 -- Accuracy test: 0.784 
Epoch#31 -- Accuracy train: 0.6866666666666666 -- Accuracy test: 0.686 
Epoch#32 -- Accuracy train: 0.7863333333333333 -- Accuracy test: 0.791 
Epoch#33 -- Accuracy train: 0.7846666666666666 -- Accuracy test: 0.795 
Epoch#34 -- Accuracy train: 0.8128888888888889 -- Accuracy test: 0.806 
Epoch#35 -- Accuracy train: 0.6691111111111111 -- Accuracy test: 0.662 
Epoch#36 -- Accuracy train: 0.8226666666666667 -- Accuracy test: 0.813 
Epoch#37 -- Accuracy train: 0.7155555555555555 -- Accuracy test: 0.743 
Epoch#38 -- Accuracy train: 0.7002222222222222 -- Accuracy test: 0.702 
Epoch#39 -- Accuracy train: 0.8292222222222222 -- Accuracy test: 0.837 
Epoch#40 -- Accuracy train: 0.8256666666666667 -- Accuracy test: 0.84 
Epoch#41 -- Accuracy train: 0.8784444444444445 -- Accuracy test: 0.894 
Epoch#42 -- Accuracy train: 0.7418888888888889 -- Accuracy test: 0.729 
Epoch#43 -- Accuracy train: 0.8167777777777778 -- Accuracy test: 0.826 
Epoch#44 -- Accuracy train: 0.6692222222222223 -- Accuracy test: 0.662 
Epoch#45 -- Accuracy train: 0.33566666666666667 -- Accuracy test: 0.319 
Epoch#46 -- Accuracy train: 0.8244444444444444 -- Accuracy test: 0.822 
Epoch#47 -- Accuracy train: 0.7393333333333333 -- Accuracy test: 0.737 
Epoch#48 -- Accuracy train: 0.8105555555555556 -- Accuracy test: 0.825 
Epoch#49 -- Accuracy train: 0.7514444444444445 -- Accuracy test: 0.776 
Epoch#50 -- Accuracy train: 0.8198888888888889 -- Accuracy test: 0.821 
Epoch#51 -- Accuracy train: 0.8195555555555556 -- Accuracy test: 0.828 
Epoch#52 -- Accuracy train: 0.7831111111111111 -- Accuracy test: 0.8 
Epoch#53 -- Accuracy train: 0.8691111111111111 -- Accuracy test: 0.886 
Epoch#54 -- Accuracy train: 0.8862222222222222 -- Accuracy test: 0.892 
Epoch#55 -- Accuracy train: 0.8183333333333334 -- Accuracy test: 0.834 
Epoch#56 -- Accuracy train: 0.8607777777777778 -- Accuracy test: 0.864 
Epoch#57 -- Accuracy train: 0.8513333333333334 -- Accuracy test: 0.856 
Epoch#58 -- Accuracy train: 0.8753333333333333 -- Accuracy test: 0.879 
Epoch#59 -- Accuracy train: 0.8353333333333334 -- Accuracy test: 0.834 
Epoch#60 -- Accuracy train: 0.7937777777777778 -- Accuracy test: 0.807 
Epoch#61 -- Accuracy train: 0.7335555555555555 -- Accuracy test: 0.762 
Epoch#62 -- Accuracy train: 0.7587777777777778 -- Accuracy test: 0.752 
Epoch#63 -- Accuracy train: 0.6998888888888889 -- Accuracy test: 0.684 
Epoch#64 -- Accuracy train: 0.7962222222222223 -- Accuracy test: 0.798 
Epoch#65 -- Accuracy train: 0.7545555555555555 -- Accuracy test: 0.787 
Epoch#66 -- Accuracy train: 0.8063333333333333 -- Accuracy test: 0.813 
Epoch#67 -- Accuracy train: 0.6525555555555556 -- Accuracy test: 0.644 
Epoch#68 -- Accuracy train: 0.7148888888888889 -- Accuracy test: 0.725 
Epoch#69 -- Accuracy train: 0.6692222222222223 -- Accuracy test: 0.662 
Epoch#70 -- Accuracy train: 0.6692222222222223 -- Accuracy test: 0.662 
Epoch#71 -- Accuracy train: 0.6692222222222223 -- Accuracy test: 0.662 
Epoch#72 -- Accuracy train: 0.7037777777777777 -- Accuracy test: 0.721 
Epoch#73 -- Accuracy train: 0.7863333333333333 -- Accuracy test: 0.783 
Epoch#74 -- Accuracy train: 0.8117777777777778 -- Accuracy test: 0.81 
Epoch#75 -- Accuracy train: 0.8137777777777778 -- Accuracy test: 0.829 
Epoch#76 -- Accuracy train: 0.7664444444444445 -- Accuracy test: 0.77 
Epoch#77 -- Accuracy train: 0.8093333333333333 -- Accuracy test: 0.836 
Epoch#78 -- Accuracy train: 0.6643333333333333 -- Accuracy test: 0.681 
Epoch#79 -- Accuracy train: 0.5496666666666666 -- Accuracy test: 0.557 
Epoch#80 -- Accuracy train: 0.814 -- Accuracy test: 0.824 
Epoch#81 -- Accuracy train: 0.6692222222222223 -- Accuracy test: 0.662 
Epoch#82 -- Accuracy train: 0.5741111111111111 -- Accuracy test: 0.572 
Epoch#83 -- Accuracy train: 0.7241111111111111 -- Accuracy test: 0.722 
Epoch#84 -- Accuracy train: 0.7482222222222222 -- Accuracy test: 0.765 
Epoch#85 -- Accuracy train: 0.7683333333333333 -- Accuracy test: 0.761 
Epoch#86 -- Accuracy train: 0.8026666666666666 -- Accuracy test: 0.818 
Epoch#87 -- Accuracy train: 0.6643333333333333 -- Accuracy test: 0.681 
Epoch#88 -- Accuracy train: 0.7827777777777778 -- Accuracy test: 0.783 
Epoch#89 -- Accuracy train: 0.7977777777777778 -- Accuracy test: 0.807 
Epoch#90 -- Accuracy train: 0.8343333333333334 -- Accuracy test: 0.847 
Epoch#91 -- Accuracy train: 0.7975555555555556 -- Accuracy test: 0.818 
Epoch#92 -- Accuracy train: 0.4881111111111111 -- Accuracy test: 0.488 
Epoch#93 -- Accuracy train: 0.7572222222222222 -- Accuracy test: 0.757 
Epoch#94 -- Accuracy train: 0.7832222222222223 -- Accuracy test: 0.779 
Epoch#95 -- Accuracy train: 0.7266666666666667 -- Accuracy test: 0.715 
Epoch#96 -- Accuracy train: 0.7527777777777778 -- Accuracy test: 0.746 
Epoch#97 -- Accuracy train: 0.5186666666666667 -- Accuracy test: 0.494 
Epoch#98 -- Accuracy train: 0.7863333333333333 -- Accuracy test: 0.783 
Epoch#99 -- Accuracy train: 0.7287777777777777 -- Accuracy test: 0.742 
Epoch#100 -- Accuracy train: 0.7281111111111112 -- Accuracy test: 0.722 
Epoch#101 -- Accuracy train: 0.8167777777777778 -- Accuracy test: 0.825 
Epoch#102 -- Accuracy train: 0.8485555555555555 -- Accuracy test: 0.856 
Epoch#103 -- Accuracy train: 0.6905555555555556 -- Accuracy test: 0.707 
Epoch#104 -- Accuracy train: 0.754 -- Accuracy test: 0.745 
Epoch#105 -- Accuracy train: 0.7978888888888889 -- Accuracy test: 0.792 
Epoch#106 -- Accuracy train: 0.7851111111111111 -- Accuracy test: 0.778 
Epoch#107 -- Accuracy train: 0.7836666666666666 -- Accuracy test: 0.804 
Epoch#108 -- Accuracy train: 0.33566666666666667 -- Accuracy test: 0.319 
Epoch#109 -- Accuracy train: 0.6725555555555556 -- Accuracy test: 0.666 
Epoch#110 -- Accuracy train: 0.7254444444444444 -- Accuracy test: 0.725 
Epoch#111 -- Accuracy train: 0.7715555555555556 -- Accuracy test: 0.772 
Epoch#112 -- Accuracy train: 0.7493333333333333 -- Accuracy test: 0.768 
Epoch#113 -- Accuracy train: 0.7445555555555555 -- Accuracy test: 0.764 
Epoch#114 -- Accuracy train: 0.619 -- Accuracy test: 0.607 
Epoch#115 -- Accuracy train: 0.7538888888888889 -- Accuracy test: 0.777 
Epoch#116 -- Accuracy train: 0.79 -- Accuracy test: 0.794 
Epoch#117 -- Accuracy train: 0.7855555555555556 -- Accuracy test: 0.785 
Epoch#118 -- Accuracy train: 0.6052222222222222 -- Accuracy test: 0.597 
Epoch#119 -- Accuracy train: 0.6643333333333333 -- Accuracy test: 0.681 
Epoch#120 -- Accuracy train: 0.667 -- Accuracy test: 0.661 
Epoch#121 -- Accuracy train: 0.7326666666666667 -- Accuracy test: 0.752 
Epoch#122 -- Accuracy train: 0.7525555555555555 -- Accuracy test: 0.765 
Epoch#123 -- Accuracy train: 0.7705555555555555 -- Accuracy test: 0.786 
Epoch#124 -- Accuracy train: 0.665 -- Accuracy test: 0.658 
Epoch#125 -- Accuracy train: 0.778 -- Accuracy test: 0.775 
Epoch#126 -- Accuracy train: 0.7778888888888889 -- Accuracy test: 0.793 
Epoch#127 -- Accuracy train: 0.8242222222222222 -- Accuracy test: 0.82 
Epoch#128 -- Accuracy train: 0.7922222222222223 -- Accuracy test: 0.796 
Epoch#129 -- Accuracy train: 0.7462222222222222 -- Accuracy test: 0.741 
Epoch#130 -- Accuracy train: 0.6643333333333333 -- Accuracy test: 0.681 
Epoch#131 -- Accuracy train: 0.7434444444444445 -- Accuracy test: 0.756 
Epoch#132 -- Accuracy train: 0.6664444444444444 -- Accuracy test: 0.658 
Epoch#133 -- Accuracy train: 0.5651111111111111 -- Accuracy test: 0.56 
Epoch#134 -- Accuracy train: 0.5811111111111111 -- Accuracy test: 0.58 
Epoch#135 -- Accuracy train: 0.49677777777777776 -- Accuracy test: 0.502 
Epoch#136 -- Accuracy train: 0.6666666666666666 -- Accuracy test: 0.657 
Epoch#137 -- Accuracy train: 0.635 -- Accuracy test: 0.631 
Epoch#138 -- Accuracy train: 0.6181111111111111 -- Accuracy test: 0.62 
Epoch#139 -- Accuracy train: 0.7912222222222223 -- Accuracy test: 0.799 
Epoch#140 -- Accuracy train: 0.7732222222222223 -- Accuracy test: 0.788 
Epoch#141 -- Accuracy train: 0.7844444444444445 -- Accuracy test: 0.783 
Epoch#142 -- Accuracy train: 0.7503333333333333 -- Accuracy test: 0.767 
Epoch#143 -- Accuracy train: 0.7403333333333333 -- Accuracy test: 0.746 
Epoch#144 -- Accuracy train: 0.6692222222222223 -- Accuracy test: 0.662 
Epoch#145 -- Accuracy train: 0.619 -- Accuracy test: 0.607 
Epoch#146 -- Accuracy train: 0.5811111111111111 -- Accuracy test: 0.58 
Epoch#147 -- Accuracy train: 0.7164444444444444 -- Accuracy test: 0.744 
Epoch#148 -- Accuracy train: 0.8154444444444444 -- Accuracy test: 0.826 
Epoch#149 -- Accuracy train: 0.7355555555555555 -- Accuracy test: 0.761 
Epoch#150 -- Accuracy train: 0.7825555555555556 -- Accuracy test: 0.797 
Time: 788.8221182823181
Clause #0 W:(-9 -6) NOT x60 AND NOT x141
Number of literals: 2
Clause #1 W:(26 7) NOT x23 AND NOT x40 AND NOT x121 AND NOT x122 AND NOT x155
Number of literals: 5
Clause #2 W:(-8 8) NOT x23 AND NOT x56
Number of literals: 2
Clause #3 W:(5 1) NOT x15 AND NOT x57 AND NOT x98 AND NOT x171
Number of literals: 4
Clause #4 W:(11 -31) x90 AND NOT x46 AND NOT x73 AND NOT x108 AND NOT x191 AND NOT x202
Number of literals: 6
Clause #5 W:(-30 16) NOT x69 AND NOT x195 AND NOT x220 AND NOT x224 AND NOT x255
Number of literals: 5
Clause #6 W:(-7 18) NOT x134 AND NOT x184 AND NOT x204
Number of literals: 3
Clause #7 W:(3 8) NOT x1 AND NOT x119 AND NOT x128 AND NOT x162 AND NOT x174 AND NOT x220
Number of literals: 6
Clause #8 W:(20 -32) x165 AND NOT x10 AND NOT x102 AND NOT x133
Number of literals: 4
Clause #9 W:(-3 4) 
Number of literals: 0
Clause #10 W:(0 6) 
Number of literals: 0
Clause #11 W:(4 8) NOT x105 AND NOT x120 AND NOT x126 AND NOT x163 AND NOT x192 AND NOT x222
Number of literals: 6
Clause #12 W:(-13 -17) NOT x54 AND NOT x113 AND NOT x234
Number of literals: 3
Clause #13 W:(0 -1) 
Number of literals: 0
Clause #14 W:(19 -8) NOT x32 AND NOT x152
Number of literals: 2
Clause #15 W:(0 7) NOT x82 AND NOT x86 AND NOT x110
Number of literals: 3
Clause #16 W:(-2 -3) 
Number of literals: 0
Clause #17 W:(-12 4) NOT x43 AND NOT x162 AND NOT x237
Number of literals: 3
Clause #18 W:(1 4) x90 AND NOT x1 AND NOT x70 AND NOT x204
Number of literals: 4
Clause #19 W:(-7 -15) NOT x38 AND NOT x56 AND NOT x92 AND NOT x177
Number of literals: 4
Clause #20 W:(4 16) NOT x144 AND NOT x209 AND NOT x216
Number of literals: 3
Clause #21 W:(-7 -7) NOT x36 AND NOT x157 AND NOT x252
Number of literals: 3
Clause #22 W:(-12 -3) NOT x25 AND NOT x89 AND NOT x177 AND NOT x233 AND NOT x239
Number of literals: 5
Clause #23 W:(-4 -2) NOT x8 AND NOT x50 AND NOT x54 AND NOT x157 AND NOT x195
Number of literals: 5
Clause #24 W:(5 3) NOT x18 AND NOT x29 AND NOT x140 AND NOT x148 AND NOT x179 AND NOT x228
Number of literals: 6
Clause #25 W:(-26 5) NOT x78
Number of literals: 1
Clause #26 W:(-11 16) NOT x160 AND NOT x239
Number of literals: 2
Clause #27 W:(-10 -19) NOT x134 AND NOT x158 AND NOT x172 AND NOT x194 AND NOT x230
Number of literals: 5
Clause #28 W:(3 9) x95
Number of literals: 1
Clause #29 W:(8 1) x204 AND NOT x81 AND NOT x90 AND NOT x181 AND NOT x219
Number of literals: 5
Clause #30 W:(9 -2) NOT x6 AND NOT x52 AND NOT x161 AND NOT x194
Number of literals: 4
Clause #31 W:(1 26) x80 AND x198 AND NOT x60 AND NOT x75 AND NOT x82 AND NOT x108 AND NOT x111 AND NOT x143 AND NOT x204 AND NOT x255
Number of literals: 10
Clause #32 W:(40 -17) x90 AND NOT x1 AND NOT x11 AND NOT x36 AND NOT x63 AND NOT x119 AND NOT x191 AND NOT x216 AND NOT x232
Number of literals: 9
Clause #33 W:(-1 0) x12
Number of literals: 1
Clause #34 W:(4 10) NOT x47 AND NOT x107 AND NOT x157
Number of literals: 3
Clause #35 W:(-5 -1) x8
Number of literals: 1
Clause #36 W:(0 1) 
Number of literals: 0
Clause #37 W:(-1 -2) x106
Number of literals: 1
Clause #38 W:(-4 8) NOT x17 AND NOT x27 AND NOT x43 AND NOT x48 AND NOT x109 AND NOT x156
Number of literals: 6
Clause #39 W:(6 -1) 
Number of literals: 0
Clause #40 W:(2 0) x216
Number of literals: 1
Clause #41 W:(5 -1) x18
Number of literals: 1
Clause #42 W:(-15 -8) x8 AND NOT x20 AND NOT x43 AND NOT x75 AND NOT x123 AND NOT x136 AND NOT x209 AND NOT x211 AND NOT x238
Number of literals: 9
Clause #43 W:(-5 10) NOT x86 AND NOT x133 AND NOT x204
Number of literals: 3
Clause #44 W:(-3 -5) x7
Number of literals: 1
Clause #45 W:(-3 -1) x11
Number of literals: 1
Clause #46 W:(3 6) 
Number of literals: 0
Clause #47 W:(0 12) x24
Number of literals: 1
Clause #48 W:(-3 0) x6
Number of literals: 1
Clause #49 W:(-12 -5) x30 AND NOT x253
Number of literals: 2
Clause #50 W:(0 1) x13
Number of literals: 1
Clause #51 W:(3 -3) x17
Number of literals: 1
Clause #52 W:(9 1) NOT x100 AND NOT x187
Number of literals: 2
Clause #53 W:(1 1) x5
Number of literals: 1
Clause #54 W:(-1 4) 
Number of literals: 0
Clause #55 W:(-4 -1) 
Number of literals: 0
Clause #56 W:(1 -1) x25
Number of literals: 1
Clause #57 W:(-4 0) x24
Number of literals: 1
Clause #58 W:(1 5) x17
Number of literals: 1
Clause #59 W:(-10 -1) x11
Number of literals: 1
Clause #60 W:(-6 4) x90 AND NOT x31 AND NOT x36 AND NOT x129 AND NOT x177
Number of literals: 5
Clause #61 W:(1 3) 
Number of literals: 0
Clause #62 W:(-25 12) NOT x42 AND NOT x73 AND NOT x128 AND NOT x132 AND NOT x145 AND NOT x188 AND NOT x225
Number of literals: 7
Clause #63 W:(-1 0) NOT x16 AND NOT x159 AND NOT x197 AND NOT x200
Number of literals: 4
Clause #64 W:(10 -5) NOT x23 AND NOT x29 AND NOT x189 AND NOT x245
Number of literals: 4
Clause #65 W:(0 -4) NOT x26 AND NOT x30 AND NOT x180 AND NOT x216
Number of literals: 4
Clause #66 W:(3 -22) NOT x45
Number of literals: 1
Clause #67 W:(2 9) x204 AND NOT x12 AND NOT x26 AND NOT x54 AND NOT x87 AND NOT x106 AND NOT x199 AND NOT x235 AND NOT x247
Number of literals: 9
Clause #68 W:(-1 -3) 
Number of literals: 0
Clause #69 W:(-15 6) NOT x1
Number of literals: 1
Clause #70 W:(-1 4) 
Number of literals: 0
Clause #71 W:(0 -5) x14
Number of literals: 1
Clause #72 W:(-1 -8) 
Number of literals: 0
Clause #73 W:(-18 25) NOT x36 AND NOT x62 AND NOT x105 AND NOT x119 AND NOT x154 AND NOT x255
Number of literals: 6
Clause #74 W:(-4 -1) 
Number of literals: 0
Clause #75 W:(-5 -3) NOT x4 AND NOT x85 AND NOT x94 AND NOT x130 AND NOT x214 AND NOT x244
Number of literals: 6
Clause #76 W:(-1 5) NOT x25 AND NOT x97 AND NOT x115 AND NOT x246 AND NOT x247
Number of literals: 5
Clause #77 W:(3 3) NOT x57 AND NOT x89 AND NOT x122 AND NOT x187
Number of literals: 4
Clause #78 W:(79 -57) x165 AND NOT x40 AND NOT x70 AND NOT x78 AND NOT x127 AND NOT x172 AND NOT x203 AND NOT x222
Number of literals: 8
Clause #79 W:(-2 6) NOT x10 AND NOT x85 AND NOT x177
Number of literals: 3
Clause #80 W:(-18 10) NOT x30 AND NOT x72 AND NOT x124 AND NOT x134 AND NOT x160 AND NOT x223
Number of literals: 6
Clause #81 W:(5 5) NOT x85 AND NOT x162
Number of literals: 2
Clause #82 W:(-3 1) x69 AND NOT x119
Number of literals: 2
Clause #83 W:(-1 -19) x12
Number of literals: 1
Clause #84 W:(-1 -3) x89 AND NOT x179 AND NOT x181
Number of literals: 3
Clause #85 W:(3 14) NOT x48
Number of literals: 1
Clause #86 W:(10 2) NOT x91 AND NOT x238
Number of literals: 2
Clause #87 W:(10 0) NOT x27 AND NOT x70 AND NOT x166 AND NOT x223 AND NOT x235
Number of literals: 5
Clause #88 W:(30 -1) 
Number of literals: 0
Clause #89 W:(0 0) x17
Number of literals: 1
Clause #90 W:(-16 -9) x21
Number of literals: 1
Clause #91 W:(0 10) NOT x52 AND NOT x160
Number of literals: 2
Clause #92 W:(-8 0) 
Number of literals: 0
Clause #93 W:(-19 4) NOT x38 AND NOT x45 AND NOT x127 AND NOT x144 AND NOT x154 AND NOT x225
Number of literals: 6
Clause #94 W:(-6 0) NOT x27 AND NOT x121 AND NOT x221
Number of literals: 3
Clause #95 W:(1 1) x19
Number of literals: 1
Clause #96 W:(-7 -1) NOT x2 AND NOT x3 AND NOT x24 AND NOT x40 AND NOT x70 AND NOT x227
Number of literals: 6
Clause #97 W:(24 12) NOT x23 AND NOT x76 AND NOT x91 AND NOT x132 AND NOT x158 AND NOT x215
Number of literals: 6
Clause #98 W:(1 2) NOT x9 AND NOT x33 AND NOT x36 AND NOT x60 AND NOT x125 AND NOT x204 AND NOT x232
Number of literals: 7
Clause #99 W:(5 4) NOT x1 AND NOT x128 AND NOT x197 AND NOT x219 AND NOT x225
Number of literals: 5
Clause #100 W:(1 0) 
Number of literals: 0
Clause #101 W:(-1 -3) 
Number of literals: 0
Clause #102 W:(0 3) NOT x135 AND NOT x233
Number of literals: 2
Clause #103 W:(-2 20) NOT x13 AND NOT x81 AND NOT x142 AND NOT x145 AND NOT x191 AND NOT x251
Number of literals: 6
Clause #104 W:(-11 -1) NOT x74 AND NOT x79 AND NOT x110 AND NOT x121 AND NOT x188
Number of literals: 5
Clause #105 W:(14 -3) 
Number of literals: 0
Clause #106 W:(3 12) NOT x175 AND NOT x232
Number of literals: 2
Clause #107 W:(1 1) x4
Number of literals: 1
Clause #108 W:(-1 -3) 
Number of literals: 0
Clause #109 W:(16 4) x15 AND NOT x32
Number of literals: 2
Clause #110 W:(-8 -3) x30
Number of literals: 1
Clause #111 W:(-1 0) 
Number of literals: 0
Clause #112 W:(9 2) x8 AND NOT x250
Number of literals: 2
Clause #113 W:(-9 -23) NOT x28 AND NOT x39 AND NOT x200
Number of literals: 3
Clause #114 W:(-6 -1) 
Number of literals: 0
Clause #115 W:(-2 27) NOT x31 AND NOT x131 AND NOT x144 AND NOT x216
Number of literals: 4
Clause #116 W:(4 14) 
Number of literals: 0
Clause #117 W:(-1 2) x0
Number of literals: 1
Clause #118 W:(-74 61) x1 AND NOT x30 AND NOT x215
Number of literals: 3
Clause #119 W:(1 2) x5
Number of literals: 1
Clause #120 W:(6 -1) 
Number of literals: 0
Clause #121 W:(-5 -3) NOT x19 AND NOT x20 AND NOT x91 AND NOT x178 AND NOT x197 AND NOT x203
Number of literals: 6
Clause #122 W:(-1 -2) x8
Number of literals: 1
Clause #123 W:(18 0) x42
Number of literals: 1
Clause #124 W:(3 -1) x8
Number of literals: 1
Clause #125 W:(3 4) 
Number of literals: 0
Clause #126 W:(0 -6) x26
Number of literals: 1
Clause #127 W:(-2 0) x4 AND NOT x155
Number of literals: 2
Clause #128 W:(1 13) x18
Number of literals: 1
Clause #129 W:(-1 8) x23 AND NOT x55 AND NOT x125 AND NOT x200 AND NOT x241
Number of literals: 5
Clause #130 W:(-4 -2) NOT x1 AND NOT x32 AND NOT x36 AND NOT x129 AND NOT x142 AND NOT x159
Number of literals: 6
Clause #131 W:(5 3) 
Number of literals: 0
Clause #132 W:(-2 -3) NOT x38 AND NOT x123
Number of literals: 2
Clause #133 W:(14 -5) NOT x28 AND NOT x146 AND NOT x225 AND NOT x234 AND NOT x239
Number of literals: 5
Clause #134 W:(-9 22) NOT x132 AND NOT x245
Number of literals: 2
Clause #135 W:(1 0) 
Number of literals: 0
Clause #136 W:(8 -9) x247 AND NOT x75 AND NOT x85 AND NOT x98 AND NOT x139 AND NOT x204
Number of literals: 6
Clause #137 W:(-2 0) 
Number of literals: 0
Clause #138 W:(-4 13) x247 AND NOT x11 AND NOT x44 AND NOT x70 AND NOT x116 AND NOT x138 AND NOT x150 AND NOT x155 AND NOT x163 AND NOT x164 AND NOT x233 AND NOT x253
Number of literals: 12
Clause #139 W:(0 2) NOT x10 AND NOT x117 AND NOT x214 AND NOT x232 AND NOT x249
Number of literals: 5
Clause #140 W:(5 -1) x12
Number of literals: 1
Clause #141 W:(-7 12) NOT x38 AND NOT x99 AND NOT x116 AND NOT x182 AND NOT x225
Number of literals: 5
Clause #142 W:(8 5) 
Number of literals: 0
Clause #143 W:(4 7) x165
Number of literals: 1
Clause #144 W:(13 19) NOT x64
Number of literals: 1
Clause #145 W:(41 -56) x204 AND NOT x142 AND NOT x156 AND NOT x158 AND NOT x195 AND NOT x211
Number of literals: 6
Clause #146 W:(13 -11) NOT x44
Number of literals: 1
Clause #147 W:(-4 -5) 
Number of literals: 0
Clause #148 W:(-1 4) NOT x39 AND NOT x193
Number of literals: 2
Clause #149 W:(-19 -14) NOT x106
Number of literals: 1
Clause #150 W:(-7 -9) x21 AND x90 AND NOT x4 AND NOT x42 AND NOT x134 AND NOT x175
Number of literals: 6
Clause #151 W:(-9 -9) x90
Number of literals: 1
Clause #152 W:(-1 9) x37 AND NOT x45 AND NOT x89 AND NOT x108 AND NOT x138 AND NOT x139
Number of literals: 6
Clause #153 W:(7 -6) x165 AND NOT x11 AND NOT x99 AND NOT x159 AND NOT x206 AND NOT x244 AND NOT x247
Number of literals: 7
Clause #154 W:(-3 11) NOT x113 AND NOT x130 AND NOT x183 AND NOT x202 AND NOT x209 AND NOT x215 AND NOT x226 AND NOT x233
Number of literals: 8
Clause #155 W:(-1 -1) 
Number of literals: 0
Clause #156 W:(-17 1) NOT x67 AND NOT x201
Number of literals: 2
Clause #157 W:(6 6) NOT x28 AND NOT x137 AND NOT x153 AND NOT x230 AND NOT x245
Number of literals: 5
Clause #158 W:(-11 -6) NOT x22 AND NOT x208
Number of literals: 2
Clause #159 W:(8 3) x165 AND NOT x3 AND NOT x32 AND NOT x79 AND NOT x159 AND NOT x207 AND NOT x213
Number of literals: 7
Clause #160 W:(0 0) 
Number of literals: 0
Clause #161 W:(20 -27) x165 AND NOT x76
Number of literals: 2
Clause #162 W:(-10 19) NOT x157 AND NOT x168 AND NOT x196
Number of literals: 3
Clause #163 W:(0 3) NOT x90
Number of literals: 1
Clause #164 W:(-1 -3) 
Number of literals: 0
Clause #165 W:(-15 -17) NOT x5 AND NOT x172 AND NOT x173 AND NOT x244
Number of literals: 4
Clause #166 W:(-6 -10) x144 AND NOT x222
Number of literals: 2
Clause #167 W:(-22 -4) NOT x43 AND NOT x45 AND NOT x78
Number of literals: 3
Clause #168 W:(15 2) NOT x126 AND NOT x161 AND NOT x232
Number of literals: 3
Clause #169 W:(5 -2) NOT x12 AND NOT x85 AND NOT x101 AND NOT x161
Number of literals: 4
Clause #170 W:(16 -1) x4
Number of literals: 1
Clause #171 W:(-4 3) NOT x20 AND NOT x88 AND NOT x98
Number of literals: 3
Clause #172 W:(0 -17) 
Number of literals: 0
Clause #173 W:(-1 -4) 
Number of literals: 0
Clause #174 W:(-10 14) NOT x1 AND NOT x39 AND NOT x60 AND NOT x101 AND NOT x129 AND NOT x249
Number of literals: 6
Clause #175 W:(29 -3) NOT x8 AND NOT x37 AND NOT x55 AND NOT x95 AND NOT x163 AND NOT x175
Number of literals: 6
Clause #176 W:(-8 5) NOT x79 AND NOT x129 AND NOT x138 AND NOT x203 AND NOT x214 AND NOT x250
Number of literals: 6
Clause #177 W:(-14 7) NOT x115 AND NOT x173 AND NOT x235 AND NOT x236 AND NOT x252
Number of literals: 5
Clause #178 W:(-1 -6) 
Number of literals: 0
Clause #179 W:(-6 0) x4
Number of literals: 1
Clause #180 W:(0 11) NOT x241
Number of literals: 1
Clause #181 W:(-3 -3) NOT x246
Number of literals: 1
Clause #182 W:(0 -1) x26
Number of literals: 1
Clause #183 W:(-4 -9) x22
Number of literals: 1
Clause #184 W:(21 0) NOT x48 AND NOT x87 AND NOT x167 AND NOT x178 AND NOT x193 AND NOT x238
Number of literals: 6
Clause #185 W:(-10 -1) x11
Number of literals: 1
Clause #186 W:(-15 -5) NOT x65 AND NOT x89 AND NOT x173 AND NOT x255
Number of literals: 4
Clause #187 W:(-7 -7) NOT x18 AND NOT x41 AND NOT x74 AND NOT x102 AND NOT x249
Number of literals: 5
Clause #188 W:(-7 -6) NOT x148 AND NOT x229
Number of literals: 2
Clause #189 W:(6 1) NOT x20
Number of literals: 1
Clause #190 W:(5 1) NOT x73 AND NOT x79 AND NOT x92 AND NOT x213
Number of literals: 4
Clause #191 W:(-20 3) x24
Number of literals: 1
Clause #192 W:(12 -32) NOT x23 AND NOT x216
Number of literals: 2
Clause #193 W:(16 -30) NOT x93 AND NOT x238
Number of literals: 2
Clause #194 W:(-1 -2) NOT x70 AND NOT x90
Number of literals: 2
Clause #195 W:(5 10) NOT x1 AND NOT x33 AND NOT x97 AND NOT x130 AND NOT x171
Number of literals: 5
Clause #196 W:(6 25) NOT x29 AND NOT x51 AND NOT x71 AND NOT x74 AND NOT x158
Number of literals: 5
Clause #197 W:(1 0) 
Number of literals: 0
Clause #198 W:(2 -1) 
Number of literals: 0
Clause #199 W:(-9 -21) NOT x20 AND NOT x22 AND NOT x42 AND NOT x44 AND NOT x112 AND NOT x156 AND NOT x193 AND NOT x203
Number of literals: 8
Clause #200 W:(-24 3) NOT x12 AND NOT x62 AND NOT x250
Number of literals: 3
Clause #201 W:(0 6) NOT x204
Number of literals: 1
Clause #202 W:(15 2) x90 AND NOT x0 AND NOT x44 AND NOT x54 AND NOT x84 AND NOT x125 AND NOT x184 AND NOT x190
Number of literals: 8
Clause #203 W:(6 -4) NOT x55 AND NOT x64 AND NOT x121 AND NOT x171 AND NOT x192
Number of literals: 5
Clause #204 W:(-1 -1) NOT x49
Number of literals: 1
Clause #205 W:(-2 0) x90 AND NOT x125 AND NOT x186
Number of literals: 3
Clause #206 W:(23 4) NOT x50 AND NOT x114 AND NOT x141
Number of literals: 3
Clause #207 W:(6 2) NOT x138 AND NOT x233
Number of literals: 2
Clause #208 W:(-26 12) x90
Number of literals: 1
Clause #209 W:(-16 -7) NOT x96 AND NOT x127 AND NOT x248 AND NOT x250
Number of literals: 4
Clause #210 W:(-8 -11) x90 AND NOT x119 AND NOT x142 AND NOT x162 AND NOT x174
Number of literals: 5
Clause #211 W:(-29 10) NOT x17 AND NOT x54 AND NOT x128 AND NOT x162 AND NOT x209 AND NOT x218
Number of literals: 6
Clause #212 W:(-2 16) NOT x106 AND NOT x108 AND NOT x132 AND NOT x250 AND NOT x251
Number of literals: 5
Clause #213 W:(-8 -6) NOT x1 AND NOT x6 AND NOT x218
Number of literals: 3
Clause #214 W:(-6 -3) NOT x1 AND NOT x45 AND NOT x79 AND NOT x159 AND NOT x169
Number of literals: 5
Clause #215 W:(21 -5) NOT x1 AND NOT x17 AND NOT x69 AND NOT x80 AND NOT x220
Number of literals: 5
Clause #216 W:(2 12) NOT x28 AND NOT x37 AND NOT x59 AND NOT x91 AND NOT x197 AND NOT x198 AND NOT x199 AND NOT x210 AND NOT x219
Number of literals: 9
Clause #217 W:(-1 -2) NOT x187 AND NOT x194 AND NOT x209 AND NOT x229
Number of literals: 4
Clause #218 W:(15 6) NOT x111
Number of literals: 1
Clause #219 W:(3 3) NOT x255
Number of literals: 1
Clause #220 W:(-4 -2) x90 AND NOT x128 AND NOT x164 AND NOT x188 AND NOT x225
Number of literals: 5
Clause #221 W:(-15 0) NOT x38 AND NOT x77 AND NOT x117
Number of literals: 3
Clause #222 W:(0 2) NOT x3 AND NOT x106
Number of literals: 2
Clause #223 W:(-1 -22) NOT x16 AND NOT x27 AND NOT x45 AND NOT x151 AND NOT x196
Number of literals: 5
Clause #224 W:(1 15) NOT x7 AND NOT x28 AND NOT x75 AND NOT x83 AND NOT x93 AND NOT x200 AND NOT x204 AND NOT x210
Number of literals: 8
Clause #225 W:(13 -5) NOT x82 AND NOT x161
Number of literals: 2
Clause #226 W:(-13 24) NOT x106 AND NOT x126 AND NOT x159
Number of literals: 3
Clause #227 W:(-1 1) 
Number of literals: 0
Clause #228 W:(2 12) NOT x105
Number of literals: 1
Clause #229 W:(7 6) NOT x144 AND NOT x162 AND NOT x224 AND NOT x243
Number of literals: 4
Clause #230 W:(0 -1) NOT x217
Number of literals: 1
Clause #231 W:(-1 -6) NOT x110 AND NOT x154
Number of literals: 2
Clause #232 W:(-4 -5) x165
Number of literals: 1
Clause #233 W:(-1 0) NOT x1
Number of literals: 1
Clause #234 W:(-9 39) NOT x3 AND NOT x51 AND NOT x53 AND NOT x74 AND NOT x93 AND NOT x251
Number of literals: 6
Clause #235 W:(-13 -12) NOT x55 AND NOT x122 AND NOT x153
Number of literals: 3
Clause #236 W:(0 -1) NOT x69
Number of literals: 1
Clause #237 W:(-2 -5) NOT x22 AND NOT x112 AND NOT x145 AND NOT x175 AND NOT x204 AND NOT x213
Number of literals: 6
Clause #238 W:(-7 -11) NOT x190 AND NOT x231
Number of literals: 2
Clause #239 W:(6 14) NOT x130 AND NOT x187
Number of literals: 2
Clause #240 W:(-1 3) NOT x37 AND NOT x120 AND NOT x125 AND NOT x163
Number of literals: 4
Clause #241 W:(-3 0) x90 AND NOT x171 AND NOT x198 AND NOT x234
Number of literals: 4
Clause #242 W:(15 4) NOT x1 AND NOT x56 AND NOT x71 AND NOT x80 AND NOT x87 AND NOT x97 AND NOT x109 AND NOT x178 AND NOT x197 AND NOT x209 AND NOT x244 AND NOT x253
Number of literals: 12
Clause #243 W:(-1 0) NOT x43 AND NOT x67 AND NOT x95 AND NOT x181
Number of literals: 4
Clause #244 W:(36 -53) x165 AND NOT x80 AND NOT x241
Number of literals: 3
Clause #245 W:(12 -6) NOT x30 AND NOT x52 AND NOT x61 AND NOT x83 AND NOT x226
Number of literals: 5
Clause #246 W:(-8 0) NOT x157 AND NOT x167 AND NOT x224 AND NOT x228
Number of literals: 4
Clause #247 W:(-1 -1) NOT x1 AND NOT x187
Number of literals: 2
Clause #248 W:(-2 -3) 
Number of literals: 0
Clause #249 W:(14 7) NOT x65 AND NOT x156 AND NOT x164 AND NOT x229
Number of literals: 4
Clause #250 W:(37 -20) x1 AND NOT x28 AND NOT x47 AND NOT x142 AND NOT x148 AND NOT x187 AND NOT x215
Number of literals: 7
Clause #251 W:(-14 -2) NOT x1 AND NOT x20 AND NOT x40 AND NOT x84 AND NOT x95 AND NOT x107 AND NOT x153 AND NOT x158
Number of literals: 8
Clause #252 W:(6 1) x4
Number of literals: 1
Clause #253 W:(-22 28) NOT x96 AND NOT x132 AND NOT x255
Number of literals: 3
Clause #254 W:(0 -3) NOT x204
Number of literals: 1
Clause #255 W:(-5 -10) 
Number of literals: 0
Clause #256 W:(-6 3) NOT x48 AND NOT x66 AND NOT x163 AND NOT x194 AND NOT x195 AND NOT x244
Number of literals: 6
Clause #257 W:(6 12) NOT x79 AND NOT x117 AND NOT x126 AND NOT x127 AND NOT x224 AND NOT x231
Number of literals: 6
Clause #258 W:(5 0) NOT x17 AND NOT x50
Number of literals: 2
Clause #259 W:(-1 5) NOT x36 AND NOT x151
Number of literals: 2
Clause #260 W:(-10 10) NOT x10 AND NOT x205 AND NOT x220
Number of literals: 3
Clause #261 W:(6 17) NOT x130 AND NOT x191 AND NOT x202 AND NOT x206 AND NOT x236
Number of literals: 5
Clause #262 W:(3 -1) NOT x201
Number of literals: 1
Clause #263 W:(3 24) NOT x82 AND NOT x100 AND NOT x219 AND NOT x241
Number of literals: 4
Clause #264 W:(-5 13) NOT x1 AND NOT x64 AND NOT x82 AND NOT x94 AND NOT x193 AND NOT x202
Number of literals: 6
Clause #265 W:(0 0) 
Number of literals: 0
Clause #266 W:(17 -26) x165
Number of literals: 1
Clause #267 W:(20 2) x165 AND NOT x54
Number of literals: 2
Clause #268 W:(-126 117) x1 AND NOT x43 AND NOT x119 AND NOT x141
Number of literals: 4
Clause #269 W:(-7 -5) x247 AND NOT x134 AND NOT x169 AND NOT x171 AND NOT x191
Number of literals: 5
Clause #270 W:(3 10) NOT x82 AND NOT x132 AND NOT x137
Number of literals: 3
Clause #271 W:(-10 4) NOT x71 AND NOT x93 AND NOT x138 AND NOT x190 AND NOT x242
Number of literals: 5
Clause #272 W:(0 -2) NOT x2 AND NOT x116 AND NOT x182 AND NOT x204
Number of literals: 4
Clause #273 W:(-8 -5) NOT x2 AND NOT x22 AND NOT x44 AND NOT x77 AND NOT x129 AND NOT x142 AND NOT x217 AND NOT x242
Number of literals: 8
Clause #274 W:(-13 -2) x90 AND NOT x17 AND NOT x93 AND NOT x164 AND NOT x188 AND NOT x227
Number of literals: 6
Clause #275 W:(1 1) NOT x62 AND NOT x119 AND NOT x176
Number of literals: 3
Clause #276 W:(11 -8) NOT x89 AND NOT x168
Number of literals: 2
Clause #277 W:(17 -24) x90 AND NOT x91 AND NOT x98 AND NOT x144
Number of literals: 4
Clause #278 W:(-2 0) 
Number of literals: 0
Clause #279 W:(6 -2) NOT x161 AND NOT x231
Number of literals: 2
Clause #280 W:(-19 11) NOT x29 AND NOT x70 AND NOT x81 AND NOT x90 AND NOT x226 AND NOT x247
Number of literals: 6
Clause #281 W:(2 0) x159 AND NOT x245 AND NOT x252
Number of literals: 3
Clause #282 W:(13 1) NOT x100 AND NOT x128 AND NOT x145 AND NOT x200 AND NOT x201
Number of literals: 5
Clause #283 W:(-18 -4) NOT x3 AND NOT x96 AND NOT x129
Number of literals: 3
Clause #284 W:(-1 3) NOT x23 AND NOT x81 AND NOT x87 AND NOT x121 AND NOT x216
Number of literals: 5
Clause #285 W:(-15 -1) NOT x108 AND NOT x166 AND NOT x194 AND NOT x204 AND NOT x239 AND NOT x250
Number of literals: 6
Clause #286 W:(-6 9) x90 AND NOT x41 AND NOT x53 AND NOT x55 AND NOT x155 AND NOT x237
Number of literals: 6
Clause #287 W:(-1 5) x140 AND NOT x82 AND NOT x86 AND NOT x179 AND NOT x244
Number of literals: 5
Clause #288 W:(8 22) x90 AND NOT x38 AND NOT x73 AND NOT x206 AND NOT x225
Number of literals: 5
Clause #289 W:(-9 3) NOT x51 AND NOT x73 AND NOT x118 AND NOT x180 AND NOT x204 AND NOT x209
Number of literals: 6
Clause #290 W:(0 1) 
Number of literals: 0
Clause #291 W:(12 18) NOT x52 AND NOT x161 AND NOT x226
Number of literals: 3
Clause #292 W:(-18 4) NOT x10 AND NOT x11 AND NOT x253
Number of literals: 3
Clause #293 W:(-1 1) 
Number of literals: 0
Clause #294 W:(0 -2) 
Number of literals: 0
Clause #295 W:(31 0) NOT x64 AND NOT x118 AND NOT x181 AND NOT x231 AND NOT x251
Number of literals: 5
Clause #296 W:(8 8) NOT x40 AND NOT x59 AND NOT x71 AND NOT x122 AND NOT x124 AND NOT x127 AND NOT x178 AND NOT x220
Number of literals: 8
Clause #297 W:(-1 3) x86 AND NOT x84 AND NOT x100
Number of literals: 3
Clause #298 W:(0 3) NOT x157
Number of literals: 1
Clause #299 W:(-1 -1) 
Number of literals: 0
Clause #300 W:(0 -4) NOT x49 AND NOT x73 AND NOT x120 AND NOT x204
Number of literals: 4
Clause #301 W:(34 -48) NOT x88 AND NOT x177 AND NOT x253
Number of literals: 3
Clause #302 W:(1 10) NOT x27 AND NOT x143 AND NOT x186 AND NOT x217 AND NOT x234
Number of literals: 5
Clause #303 W:(-6 -4) NOT x72 AND NOT x104 AND NOT x125 AND NOT x163 AND NOT x179 AND NOT x195
Number of literals: 6
Clause #304 W:(0 -2) NOT x7 AND NOT x204
Number of literals: 2
Clause #305 W:(41 -47) x165 AND NOT x13 AND NOT x46 AND NOT x100 AND NOT x117 AND NOT x159 AND NOT x162
Number of literals: 7
Clause #306 W:(-4 21) NOT x32 AND NOT x81 AND NOT x139 AND NOT x143 AND NOT x189 AND NOT x218 AND NOT x219 AND NOT x231 AND NOT x244
Number of literals: 9
Clause #307 W:(4 -15) NOT x7 AND NOT x9 AND NOT x16 AND NOT x65 AND NOT x116 AND NOT x135 AND NOT x165 AND NOT x200
Number of literals: 8
Clause #308 W:(-1 -1) NOT x75 AND NOT x204
Number of literals: 2
Clause #309 W:(-2 -1) NOT x4
Number of literals: 1
Clause #310 W:(1 -30) NOT x104 AND NOT x164 AND NOT x170 AND NOT x177
Number of literals: 4
Clause #311 W:(-1 5) NOT x229
Number of literals: 1
Clause #312 W:(2 1) 
Number of literals: 0
Clause #313 W:(5 11) NOT x112 AND NOT x115 AND NOT x204 AND NOT x207 AND NOT x218
Number of literals: 5
Clause #314 W:(-28 1) 
Number of literals: 0
Clause #315 W:(-26 -3) NOT x5 AND NOT x26 AND NOT x74 AND NOT x86
Number of literals: 4
Clause #316 W:(6 2) NOT x28 AND NOT x31 AND NOT x245
Number of literals: 3
Clause #317 W:(-4 13) NOT x1 AND NOT x68 AND NOT x114 AND NOT x159
Number of literals: 4
Clause #318 W:(37 -36) x165 AND NOT x159 AND NOT x191
Number of literals: 3
Clause #319 W:(-6 3) NOT x15 AND NOT x84 AND NOT x137 AND NOT x142 AND NOT x177 AND NOT x247
Number of literals: 6
Clause #320 W:(-11 -12) NOT x2 AND NOT x78 AND NOT x131 AND NOT x249
Number of literals: 4
Clause #321 W:(1 -1) NOT x127 AND NOT x211
Number of literals: 2
Clause #322 W:(-4 15) x90 AND NOT x101 AND NOT x128
Number of literals: 3
Clause #323 W:(20 -8) NOT x17 AND NOT x52 AND NOT x228
Number of literals: 3
Clause #324 W:(0 11) NOT x74 AND NOT x102
Number of literals: 2
Clause #325 W:(-2 4) NOT x66 AND NOT x135 AND NOT x148
Number of literals: 3
Clause #326 W:(20 4) NOT x124 AND NOT x198 AND NOT x223 AND NOT x252
Number of literals: 4
Clause #327 W:(5 -22) NOT x42 AND NOT x43 AND NOT x82 AND NOT x155 AND NOT x159 AND NOT x163 AND NOT x204 AND NOT x205
Number of literals: 8
Clause #328 W:(4 -44) NOT x123 AND NOT x130 AND NOT x151 AND NOT x209 AND NOT x243
Number of literals: 5
Clause #329 W:(0 0) NOT x99 AND NOT x138 AND NOT x164
Number of literals: 3
Clause #330 W:(-1 6) x135
Number of literals: 1
Clause #331 W:(0 -2) x90
Number of literals: 1
Clause #332 W:(-10 12) NOT x47 AND NOT x211
Number of literals: 2
Clause #333 W:(-1 -13) 
Number of literals: 0
Clause #334 W:(-1 -3) x90 AND NOT x192 AND NOT x245
Number of literals: 3
Clause #335 W:(-2 8) 
Number of literals: 0
Clause #336 W:(0 2) NOT x55 AND NOT x173
Number of literals: 2
Clause #337 W:(-1 8) NOT x10 AND NOT x247
Number of literals: 2
Clause #338 W:(-8 0) x203
Number of literals: 1
Clause #339 W:(1 7) NOT x105 AND NOT x136
Number of literals: 2
Clause #340 W:(-35 8) NOT x16 AND NOT x80 AND NOT x110 AND NOT x111 AND NOT x149 AND NOT x218
Number of literals: 6
Clause #341 W:(-4 -8) NOT x0 AND NOT x33 AND NOT x222 AND NOT x245
Number of literals: 4
Clause #342 W:(-3 7) NOT x98 AND NOT x200 AND NOT x224 AND NOT x245
Number of literals: 4
Clause #343 W:(1 -3) 
Number of literals: 0
Clause #344 W:(0 16) NOT x42 AND NOT x169 AND NOT x235
Number of literals: 3
Clause #345 W:(-29 -26) NOT x111 AND NOT x175
Number of literals: 2
Clause #346 W:(-2 -3) 
Number of literals: 0
Clause #347 W:(-17 17) x90 AND NOT x86 AND NOT x98 AND NOT x123 AND NOT x167
Number of literals: 5
Clause #348 W:(1 0) 
Number of literals: 0
Clause #349 W:(-14 -3) NOT x8 AND NOT x15 AND NOT x22 AND NOT x171 AND NOT x255
Number of literals: 5
Clause #350 W:(-1 -5) NOT x92 AND NOT x117 AND NOT x223
Number of literals: 3
Clause #351 W:(24 9) NOT x20 AND NOT x52 AND NOT x82 AND NOT x95 AND NOT x160 AND NOT x243
Number of literals: 6
Clause #352 W:(-3 4) x9 AND x79 AND NOT x16 AND NOT x18 AND NOT x29 AND NOT x43 AND NOT x177 AND NOT x201
Number of literals: 8
Clause #353 W:(-2 -11) NOT x1 AND NOT x55 AND NOT x149 AND NOT x199 AND NOT x204
Number of literals: 5
Clause #354 W:(-1 -1) 
Number of literals: 0
Clause #355 W:(-1 2) 
Number of literals: 0
Clause #356 W:(5 0) NOT x33
Number of literals: 1
Clause #357 W:(-10 6) NOT x5 AND NOT x107 AND NOT x206 AND NOT x250
Number of literals: 4
Clause #358 W:(5 -1) 
Number of literals: 0
Clause #359 W:(1 4) NOT x50 AND NOT x53 AND NOT x136 AND NOT x246
Number of literals: 4
Clause #360 W:(-4 2) NOT x4 AND NOT x95
Number of literals: 2
Clause #361 W:(2 6) NOT x195 AND NOT x254
Number of literals: 2
Clause #362 W:(-16 0) NOT x28 AND NOT x116 AND NOT x196
Number of literals: 3
Clause #363 W:(-2 21) NOT x4
Number of literals: 1
Clause #364 W:(1 16) x159 AND NOT x1 AND NOT x215
Number of literals: 3
Clause #365 W:(4 8) 
Number of literals: 0
Clause #366 W:(10 3) NOT x17 AND NOT x42 AND NOT x73 AND NOT x75 AND NOT x237
Number of literals: 5
Clause #367 W:(3 20) NOT x64 AND NOT x75 AND NOT x146 AND NOT x209
Number of literals: 4
Clause #368 W:(-1 3) x12 AND NOT x60
Number of literals: 2
Clause #369 W:(-6 -17) NOT x4 AND NOT x117 AND NOT x234
Number of literals: 3
Clause #370 W:(4 -5) NOT x88
Number of literals: 1
Clause #371 W:(2 -7) NOT x50 AND NOT x106
Number of literals: 2
Clause #372 W:(-2 -4) 
Number of literals: 0
Clause #373 W:(4 2) NOT x14 AND NOT x190 AND NOT x213
Number of literals: 3
Clause #374 W:(14 12) NOT x23 AND NOT x37 AND NOT x45 AND NOT x128 AND NOT x182 AND NOT x249
Number of literals: 6
Clause #375 W:(21 -7) x1 AND NOT x54 AND NOT x103 AND NOT x168 AND NOT x245 AND NOT x249
Number of literals: 6
Clause #376 W:(0 3) 
Number of literals: 0
Clause #377 W:(-4 12) NOT x61 AND NOT x114 AND NOT x170
Number of literals: 3
Clause #378 W:(-6 2) NOT x100 AND NOT x184
Number of literals: 2
Clause #379 W:(6 13) NOT x1 AND NOT x47 AND NOT x248
Number of literals: 3
Clause #380 W:(0 -6) NOT x58 AND NOT x68 AND NOT x80 AND NOT x81 AND NOT x87
Number of literals: 5
Clause #381 W:(-10 0) NOT x29 AND NOT x50 AND NOT x68 AND NOT x123 AND NOT x156 AND NOT x175 AND NOT x195 AND NOT x252 AND NOT x254
Number of literals: 9
Clause #382 W:(1 21) 
Number of literals: 0
Clause #383 W:(35 -48) NOT x28 AND NOT x157 AND NOT x161 AND NOT x165 AND NOT x200 AND NOT x244
Number of literals: 6
Clause #384 W:(-22 13) NOT x14 AND NOT x45 AND NOT x117 AND NOT x162 AND NOT x225
Number of literals: 5
Clause #385 W:(-6 28) NOT x24 AND NOT x34 AND NOT x143 AND NOT x229 AND NOT x244
Number of literals: 5
Clause #386 W:(-22 -4) NOT x101 AND NOT x180 AND NOT x242
Number of literals: 3
Clause #387 W:(-2 -4) x22 AND x90 AND NOT x13 AND NOT x72 AND NOT x91
Number of literals: 5
Clause #388 W:(4 3) NOT x10 AND NOT x86 AND NOT x87 AND NOT x146
Number of literals: 4
Clause #389 W:(36 -44) NOT x1 AND NOT x9 AND NOT x131 AND NOT x153 AND NOT x162 AND NOT x202 AND NOT x218
Number of literals: 7
Clause #390 W:(0 3) NOT x178
Number of literals: 1
Clause #391 W:(39 -35) x90 AND NOT x15 AND NOT x44 AND NOT x134 AND NOT x147 AND NOT x192 AND NOT x197 AND NOT x204 AND NOT x238 AND NOT x247 AND NOT x253
Number of literals: 11
Clause #392 W:(4 -8) NOT x139 AND NOT x204
Number of literals: 2
Clause #393 W:(-4 6) NOT x155 AND NOT x245
Number of literals: 2
Clause #394 W:(30 -43) 
Number of literals: 0
Clause #395 W:(-5 -14) NOT x45 AND NOT x46 AND NOT x178
Number of literals: 3
Clause #396 W:(-9 -14) NOT x5 AND NOT x8 AND NOT x9 AND NOT x20 AND NOT x70 AND NOT x99 AND NOT x101 AND NOT x137 AND NOT x163 AND NOT x177 AND NOT x179
Number of literals: 11
Clause #397 W:(0 -2) x103 AND NOT x61 AND NOT x90 AND NOT x103 AND NOT x212 AND NOT x247
Number of literals: 6
Clause #398 W:(-1 0) NOT x253
Number of literals: 1
Clause #399 W:(2 -3) 
Number of literals: 0
Clause #400 W:(-19 -8) NOT x89 AND NOT x133 AND NOT x151 AND NOT x160
Number of literals: 4
Clause #401 W:(-2 11) 
Number of literals: 0
Clause #402 W:(-20 14) NOT x9 AND NOT x31 AND NOT x86 AND NOT x122 AND NOT x149 AND NOT x204 AND NOT x223
Number of literals: 7
Clause #403 W:(0 0) NOT x1 AND NOT x9 AND NOT x38 AND NOT x61 AND NOT x129 AND NOT x220
Number of literals: 6
Clause #404 W:(9 7) NOT x15 AND NOT x94 AND NOT x107 AND NOT x204
Number of literals: 4
Clause #405 W:(2 4) NOT x140
Number of literals: 1
Clause #406 W:(-2 4) x247 AND NOT x68 AND NOT x77 AND NOT x150 AND NOT x164 AND NOT x204
Number of literals: 6
Clause #407 W:(-3 4) NOT x28 AND NOT x158
Number of literals: 2
Clause #408 W:(12 16) NOT x26 AND NOT x34 AND NOT x167 AND NOT x175 AND NOT x254
Number of literals: 5
Clause #409 W:(-6 0) 
Number of literals: 0
Clause #410 W:(5 -4) 
Number of literals: 0
Clause #411 W:(-1 -2) 
Number of literals: 0
Clause #412 W:(-13 -17) NOT x58 AND NOT x137 AND NOT x171 AND NOT x211 AND NOT x242 AND NOT x254
Number of literals: 6
Clause #413 W:(-1 1) NOT x20 AND NOT x32 AND NOT x224
Number of literals: 3
Clause #414 W:(0 2) 
Number of literals: 0
Clause #415 W:(60 -12) NOT x1 AND NOT x16
Number of literals: 2
Clause #416 W:(0 1) x13
Number of literals: 1
Clause #417 W:(1 -9) x90 AND NOT x13 AND NOT x57 AND NOT x103 AND NOT x132 AND NOT x137 AND NOT x174 AND NOT x208
Number of literals: 8
Clause #418 W:(-9 2) NOT x107 AND NOT x144
Number of literals: 2
Clause #419 W:(6 -1) NOT x15 AND NOT x47 AND NOT x103 AND NOT x156 AND NOT x251
Number of literals: 5
Clause #420 W:(-8 -11) NOT x7 AND NOT x48 AND NOT x87 AND NOT x95 AND NOT x189 AND NOT x220
Number of literals: 6
Clause #421 W:(-6 2) NOT x19 AND NOT x58 AND NOT x88 AND NOT x136 AND NOT x145 AND NOT x205
Number of literals: 6
Clause #422 W:(4 1) NOT x1 AND NOT x4 AND NOT x48 AND NOT x116 AND NOT x242
Number of literals: 5
Clause #423 W:(-13 -10) NOT x16 AND NOT x53 AND NOT x123 AND NOT x125 AND NOT x188
Number of literals: 5
Clause #424 W:(-10 4) 
Number of literals: 0
Clause #425 W:(-10 -8) 
Number of literals: 0
Clause #426 W:(-6 9) NOT x85 AND NOT x120 AND NOT x238
Number of literals: 3
Clause #427 W:(-4 -5) NOT x23 AND NOT x56 AND NOT x136
Number of literals: 3
Clause #428 W:(1 0) 
Number of literals: 0
Clause #429 W:(4 1) NOT x41 AND NOT x144 AND NOT x166 AND NOT x219
Number of literals: 4
Clause #430 W:(0 -5) NOT x86 AND NOT x124 AND NOT x196 AND NOT x240 AND NOT x254
Number of literals: 5
Clause #431 W:(-2 -3) NOT x210
Number of literals: 1
Clause #432 W:(-18 0) NOT x37 AND NOT x40 AND NOT x172
Number of literals: 3
Clause #433 W:(-3 4) NOT x31 AND NOT x53 AND NOT x102 AND NOT x154 AND NOT x200 AND NOT x209
Number of literals: 6
Clause #434 W:(2 -1) NOT x49 AND NOT x55 AND NOT x64 AND NOT x115 AND NOT x193
Number of literals: 5
Clause #435 W:(1 -3) NOT x99 AND NOT x114
Number of literals: 2
Clause #436 W:(7 1) NOT x7
Number of literals: 1
Clause #437 W:(0 -6) x165 AND NOT x204
Number of literals: 2
Clause #438 W:(-2 -3) 
Number of literals: 0
Clause #439 W:(1 9) NOT x247
Number of literals: 1
Clause #440 W:(-8 0) x6
Number of literals: 1
Clause #441 W:(-19 -4) NOT x30 AND NOT x36 AND NOT x227
Number of literals: 3
Clause #442 W:(-5 5) NOT x27 AND NOT x151 AND NOT x179 AND NOT x211 AND NOT x250
Number of literals: 5
Clause #443 W:(0 1) NOT x27 AND NOT x30 AND NOT x80 AND NOT x98
Number of literals: 4
Clause #444 W:(-20 -6) NOT x4 AND NOT x101 AND NOT x120 AND NOT x219
Number of literals: 4
Clause #445 W:(-16 -1) NOT x2 AND NOT x72 AND NOT x160 AND NOT x174 AND NOT x190
Number of literals: 5
Clause #446 W:(1 -1) x88 AND x198
Number of literals: 2
Clause #447 W:(12 -12) x1 AND NOT x54 AND NOT x67 AND NOT x81 AND NOT x141 AND NOT x247
Number of literals: 6
Clause #448 W:(-1 2) NOT x15 AND NOT x68 AND NOT x170 AND NOT x249
Number of literals: 4
Clause #449 W:(0 4) NOT x21 AND NOT x48 AND NOT x80 AND NOT x102 AND NOT x161 AND NOT x200
Number of literals: 6
Clause #450 W:(-3 -1) NOT x89 AND NOT x207 AND NOT x212
Number of literals: 3
Clause #451 W:(-19 5) NOT x75 AND NOT x98 AND NOT x202 AND NOT x235 AND NOT x251
Number of literals: 5
Clause #452 W:(6 -1) 
Number of literals: 0
Clause #453 W:(6 5) NOT x50 AND NOT x63 AND NOT x141
Number of literals: 3
Clause #454 W:(86 -84) x165 AND NOT x157
Number of literals: 2
Clause #455 W:(-10 6) NOT x28
Number of literals: 1
Clause #456 W:(-5 6) NOT x4 AND NOT x8 AND NOT x26 AND NOT x100 AND NOT x208 AND NOT x219
Number of literals: 6
Clause #457 W:(-17 10) x165 AND NOT x7 AND NOT x14 AND NOT x119 AND NOT x181
Number of literals: 5
Clause #458 W:(5 2) 
Number of literals: 0
Clause #459 W:(-5 10) x1
Number of literals: 1
Clause #460 W:(-1 -13) NOT x95 AND NOT x146 AND NOT x177
Number of literals: 3
Clause #461 W:(12 5) NOT x11 AND NOT x13 AND NOT x46 AND NOT x126 AND NOT x132 AND NOT x169 AND NOT x188
Number of literals: 7
Clause #462 W:(-1 -1) NOT x52 AND NOT x98 AND NOT x204 AND NOT x221
Number of literals: 4
Clause #463 W:(19 1) NOT x42 AND NOT x69 AND NOT x156 AND NOT x221 AND NOT x236
Number of literals: 5
Clause #464 W:(-16 -2) NOT x86 AND NOT x131 AND NOT x139 AND NOT x152 AND NOT x207
Number of literals: 5
Clause #465 W:(-14 -7) NOT x2 AND NOT x30 AND NOT x58 AND NOT x101 AND NOT x148
Number of literals: 5
Clause #466 W:(-7 2) NOT x61 AND NOT x76 AND NOT x94 AND NOT x107 AND NOT x163 AND NOT x218 AND NOT x224
Number of literals: 7
Clause #467 W:(9 -3) NOT x119 AND NOT x232 AND NOT x253
Number of literals: 3
Clause #468 W:(-1 -1) NOT x54 AND NOT x94
Number of literals: 2
Clause #469 W:(0 -4) NOT x151
Number of literals: 1
Clause #470 W:(-1 4) NOT x52 AND NOT x98 AND NOT x249
Number of literals: 3
Clause #471 W:(6 -7) NOT x8 AND NOT x17 AND NOT x46 AND NOT x105 AND NOT x174 AND NOT x247
Number of literals: 6
Clause #472 W:(-7 30) NOT x19 AND NOT x178 AND NOT x240
Number of literals: 3
Clause #473 W:(-6 -9) x237 AND NOT x37 AND NOT x143 AND NOT x154 AND NOT x175 AND NOT x191
Number of literals: 6
Clause #474 W:(-7 8) NOT x47 AND NOT x56 AND NOT x75 AND NOT x107 AND NOT x108 AND NOT x153 AND NOT x181 AND NOT x238
Number of literals: 8
Clause #475 W:(-2 5) NOT x58
Number of literals: 1
Clause #476 W:(-1 0) NOT x110
Number of literals: 1
Clause #477 W:(0 25) x90 AND NOT x241
Number of literals: 2
Clause #478 W:(-28 16) NOT x5 AND NOT x20 AND NOT x68 AND NOT x95 AND NOT x156 AND NOT x198
Number of literals: 6
Clause #479 W:(-2 -9) x249 AND NOT x11 AND NOT x50 AND NOT x91 AND NOT x132
Number of literals: 5
Clause #480 W:(-2 -3) NOT x36 AND NOT x135 AND NOT x154 AND NOT x216
Number of literals: 4
Clause #481 W:(13 -9) NOT x28 AND NOT x111 AND NOT x113 AND NOT x133 AND NOT x150
Number of literals: 5
Clause #482 W:(1 0) 
Number of literals: 0
Clause #483 W:(1 0) NOT x11 AND NOT x148 AND NOT x229
Number of literals: 3
Clause #484 W:(2 0) x179 AND NOT x98
Number of literals: 2
Clause #485 W:(0 8) NOT x5
Number of literals: 1
Clause #486 W:(-1 -1) NOT x154
Number of literals: 1
Clause #487 W:(-19 5) NOT x97
Number of literals: 1
Clause #488 W:(-1 0) NOT x73 AND NOT x175
Number of literals: 2
Clause #489 W:(-5 -5) NOT x105 AND NOT x114
Number of literals: 2
Clause #490 W:(-3 8) x90 AND NOT x13
Number of literals: 2
Clause #491 W:(-2 -20) x160
Number of literals: 1
Clause #492 W:(-1 -2) 
Number of literals: 0
Clause #493 W:(-1 12) NOT x66 AND NOT x141
Number of literals: 2
Clause #494 W:(10 -2) x90 AND NOT x60 AND NOT x192
Number of literals: 3
Clause #495 W:(-8 -1) NOT x208
Number of literals: 1
Clause #496 W:(-5 -8) NOT x14 AND NOT x76 AND NOT x140 AND NOT x143 AND NOT x182 AND NOT x196 AND NOT x221 AND NOT x232
Number of literals: 8
Clause #497 W:(-3 -2) NOT x119
Number of literals: 1
Clause #498 W:(9 0) NOT x64 AND NOT x121 AND NOT x133 AND NOT x145 AND NOT x153 AND NOT x195 AND NOT x254
Number of literals: 7
Clause #499 W:(3 2) NOT x34 AND NOT x59
Number of literals: 2
results: Results(training_time_s=788.8221182823181, inference_time_s=0.09366106986999512, memory_usage_mb=408.6015625, accuracy=0.797, precision=0.7913339839872957, recall=0.797, f1_score=0.7879371820377206)
confusion matrix: [[177, 142], [61, 620]]
reporting runs/2024-12-20T00:25:28/results.toml
reporting runs/2024-12-20T00:25:28/confusion_matrix.csv
reporting runs/2024-12-20T00:25:28/weights.csv
